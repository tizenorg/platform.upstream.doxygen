
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer defargsYY_create_buffer
#define yy_delete_buffer defargsYY_delete_buffer
#define yy_flex_debug defargsYY_flex_debug
#define yy_init_buffer defargsYY_init_buffer
#define yy_flush_buffer defargsYY_flush_buffer
#define yy_load_buffer_state defargsYY_load_buffer_state
#define yy_switch_to_buffer defargsYY_switch_to_buffer
#define yyin defargsYYin
#define yyleng defargsYYleng
#define yylex defargsYYlex
#define yylineno defargsYYlineno
#define yyout defargsYYout
#define yyrestart defargsYYrestart
#define yytext defargsYYtext
#define yywrap defargsYYwrap
#define yyalloc defargsYYalloc
#define yyrealloc defargsYYrealloc
#define yyfree defargsYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE defargsYYrestart(defargsYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t defargsYYleng;

extern FILE *defargsYYin, *defargsYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up defargsYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up defargsYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via defargsYYrestart()), so that the user can continue scanning by
	 * just pointing defargsYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when defargsYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t defargsYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow defargsYYwrap()'s to do buffer switches
 * instead of setting up a fresh defargsYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void defargsYYrestart (FILE *input_file  );
void defargsYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE defargsYY_create_buffer (FILE *file,int size  );
void defargsYY_delete_buffer (YY_BUFFER_STATE b  );
void defargsYY_flush_buffer (YY_BUFFER_STATE b  );
void defargsYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void defargsYYpop_buffer_state (void );

static void defargsYYensure_buffer_stack (void );
static void defargsYY_load_buffer_state (void );
static void defargsYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER defargsYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE defargsYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE defargsYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE defargsYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *defargsYYalloc (yy_size_t  );
void *defargsYYrealloc (void *,yy_size_t  );
void defargsYYfree (void *  );

#define yy_new_buffer defargsYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        defargsYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            defargsYY_create_buffer(defargsYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        defargsYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            defargsYY_create_buffer(defargsYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define defargsYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *defargsYYin = (FILE *) 0, *defargsYYout = (FILE *) 0;

typedef int yy_state_type;

extern int defargsYYlineno;

int defargsYYlineno = 1;

extern char *defargsYYtext;
#define yytext_ptr defargsYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up defargsYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	defargsYYleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[274] =
    {   0,
        2,    2,   53,   51,   52,   50,   52,   51,   52,    1,
       51,   52,   32,   51,   52,   25,   32,   51,   52,   32,
       51,   52,   32,   51,   52,   32,   51,   52,   32,   51,
       52,   32,   51,   52,   34,   51,   52,   16,   34,   51,
       52,   17,   18,   34,   51,   52,   34,   51,   52,   33,
       34,   51,   52,   17,   34,   51,   52,   19,   34,   51,
       52,   20,   34,   51,   52,   21,   34,   51,   52,   22,
       34,   51,   52,   30,   51,   52,    2,   30,   51,   52,
       30,   51,   52,   15,   30,   51,   52,   28,   30,   51,
       52,   30,   51,   52,   30,   51,   52,   15,   30,   51,

       52,   26,   30,   51,   52,   28,   30,   51,   52,   29,
       30,   51,   52,   30,   51,   52,   15,   30,   51,   52,
        8,   32,   51,   52,   32,   51,   52,   15,   32,   51,
       52,   28,   32,   51,   52,   28,   32,   51,   52,   32,
       51,   52,   32,   51,   52,   32,   51,   52,   13,   30,
       51,   52,   10,   29,   30,   51,   52,   51,   52,   51,
       52,   51,   52,   51,   52,   51,   52,   43,   48,   51,
       52,   47,   50,   52,   48,   51,   52,   43,   48,   51,
       52,   44,   51,   52,   46,   50,   52,   44,   51,   52,
       40,   51,   52,   40,   51,   52,   41,   50,   52,   40,

       51,   52,   40,   51,   52,   31,   23,   24,   18,   17,
       33,    2,   29,16393,   14,   29,    3,   11,   12,   10,
       29,   38,   37,   43,   45,   43,   44,   44,   44,   49,
       24,   17,   17,16393, 8201,    6,    6,    7,   42,   43,
       49,   44,   49,   49,   24, 8201,    5,    4,    5,   43,
       49,   44,   49,   24,   27,    4,   35,   24,   39,   24,
       39,   24,   36,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24
    } ;

static yyconst flex_int16_t yy_accept[238] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    6,    8,   10,   13,   16,   20,   23,   26,
       29,   32,   35,   38,   42,   47,   50,   54,   58,   62,
       66,   70,   74,   77,   81,   84,   88,   92,   95,   98,
      102,  106,  110,  114,  117,  121,  125,  128,  132,  136,
      140,  143,  146,  149,  153,  158,  160,  162,  164,  166,
      168,  172,  175,  178,  182,  185,  188,  191,  194,  197,
      200,  203,  206,  206,  206,  207,  208,  208,  209,  210,

      211,  212,  212,  213,  214,  214,  214,  215,  215,  215,
      216,  217,  217,  218,  218,  218,  218,  218,  218,  218,
      219,  220,  222,  222,  222,  223,  223,  224,  224,  224,
      225,  226,  227,  228,  229,  230,  230,  230,  231,  231,
      232,  233,  234,  234,  234,  234,  235,  236,  236,  236,
      237,  237,  238,  238,  238,  239,  239,  240,  240,  240,
      242,  244,  244,  244,  245,  245,  246,  246,  247,  247,
      248,  250,  250,  250,  250,  250,  252,  254,  254,  254,
      254,  255,  256,  257,  257,  257,  258,  258,  258,  258,
      258,  259,  259,  259,  260,  260,  260,  261,  261,  261,

      262,  262,  262,  263,  263,  264,  264,  264,  265,  265,
      265,  266,  266,  266,  267,  267,  267,  268,  268,  268,
      269,  269,  269,  270,  270,  270,  271,  271,  271,  272,
      272,  272,  273,  273,  274,  274,  274
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    1,    7,    8,    9,
       10,   11,    1,   12,   13,    1,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   18,   19,    1,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   24,   23,   23,   23,   23,
       23,   25,   23,   23,   26,   23,   23,   23,   23,   23,
       27,   28,   29,    7,   23,    1,   30,   23,   31,   32,

       33,   34,   23,   23,   35,   23,   23,   36,   23,   37,
       38,   23,   23,   39,   40,   41,   42,   43,   23,   23,
       23,   23,   44,    1,   45,    1,    1,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    4,    5,
        6,    1,    1,    1,    7,    7,    7,    7,    8,    1,
        1,    1,    9,    9,    9,    9,    1,   10,    1,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    1,    1
    } ;

static yyconst flex_int16_t yy_base[288] =
    {   0,
        0,    1,    2,    3,    5,   21,   18,   26,   49,    0,
      757,  751,   86,   89,   91,   93,  138,    0,  181,    0,
      225,    0,  268,  309,   27,   28,    6,   34,  102,  110,
      758,  883,  883,   33,  883,  883,  883,  730,   96,   24,
        0,  746,  883,  883,  747,  103,    0,  741,  883,  883,
      883,  883,  883,  738,    0,  118,   11,  712,  104,  101,
      883,  190,    0,  704,  883,  883,  703,  883,  183,  194,
      700,  717,  102,  270,    0,  186,  694,  185,  677,  675,
        0,  883,  693,  119,    0,  883,  188,  883,   94,  883,
      203,  207,  269,  206,  883,  883,  699,  693,  695,  275,

        0,  693,  687,    0,  281,  294,  351,  272,  207,  883,
        0,  657,  883,  672,  279,  674,  668,  646,  300,  883,
      883,    0,  283,  639,  883,  273,  883,  625,  625,    0,
      883,  294,    0,  303,  302,  624,  610,  630,  639,  638,
      316,    0,  301,  622,  335,  310,  394,  324,  311,  883,
      627,  624,  328,  617,  883,  596,  883,  583,  577,  584,
      575,  554,  556,  883,  583,  582,  348,    0,  566,  883,
      883,  333,  571,  538,  536,    0,    0,  538,  522,  553,
      549,  883,  883,  537,  522,  883,  492,  488,  479,  510,
      509,  504,  476,  509,  475,  499,  498,  492,  459,  402,

      348,  374,  373,  364,  883,  339,  366,  364,  359,  362,
      361,  356,  359,  358,  352,  355,  352,  347,  346,  342,
      336,  334,  333,  320,  321,  319,  295,  279,  271,  215,
      214,  193,  125,  883,  117,  883,  439,  449,  459,  469,
      479,  489,  499,  507,  510,   88,  519,  523,  532,  542,
      546,  555,  565,  575,  583,  592,  602,  611,  621,  630,
      639,  648,  657,  666,  675,  684,  693,  702,  711,  720,
      729,  738,  747,  756,  765,  774,  783,  792,  801,  810,
      819,  828,  837,  846,  855,  864,  873
    } ;

static yyconst flex_int16_t yy_def[288] =
    {   0,
      237,  237,  237,  237,  238,  238,  238,  238,  236,    9,
        9,    9,    9,    9,    9,    9,  236,   17,  238,   19,
      236,   21,  237,  237,  239,  239,  240,  240,  241,  241,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      242,  243,  236,  236,  244,  236,  245,  244,  236,  236,
      236,  236,  236,  236,  246,  247,  236,  236,  236,  236,
      236,  236,  248,  249,  236,  236,  250,  236,  236,  236,
      236,  236,  236,  236,  251,  236,  236,  236,  236,  236,
      252,  236,  236,  252,  253,  236,  253,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  254,  254,  244,  255,

      245,  244,  236,  248,  247,  247,  247,  236,  236,  236,
      248,  249,  236,  236,  256,  236,  257,  236,  236,  236,
      236,  251,  236,  258,  236,  236,  236,  236,  236,  252,
      236,  252,  253,  253,  253,  236,  236,  236,  259,  259,
      255,  141,  247,  236,  247,  107,  236,  236,  236,  236,
      236,  236,  236,  260,  236,  258,  236,  236,  236,  252,
      253,  236,  236,  236,  261,  261,  247,  147,  236,  236,
      236,  236,  262,  236,  236,  252,  253,  236,  236,  263,
      263,  236,  236,  236,  264,  236,  236,  236,  236,  265,
      265,  266,  236,  236,  236,  267,  267,  268,  236,  236,

      236,  269,  269,  270,  236,  236,  271,  271,  272,  273,
      273,  274,  275,  275,  276,  277,  277,  278,  279,  279,
      280,  281,  281,  282,  283,  283,  284,  285,  285,  286,
      236,  236,  287,  236,  236,    0,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236
    } ;

static yyconst flex_int16_t yy_nxt[929] =
    {   0,
      236,  236,   33,   33,   33,   33,  236,   33,   86,   37,
       35,   35,  108,   34,   34,   34,   34,   38,   39,   87,
       33,   35,   35,   33,  109,   37,   40,   42,   33,   82,
       82,   39,   41,   38,   39,   42,   86,   83,   83,   39,
       84,   84,   40,   93,   95,   95,   94,   87,   41,   43,
       43,   33,   43,   43,   43,   43,   43,   44,   45,   43,
       43,   43,   46,   43,   43,   43,   43,   43,   43,   43,
       43,   47,   47,   47,   47,   43,   43,   43,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   43,   43,   43,   43,  104,   43,   43,   43,

       43,   43,   43,   89,   90,   49,   93,   50,   49,   94,
       50,   89,   90,   93,   93,   91,   94,   94,  118,  106,
      110,  110,   92,   91,  107,  155,  116,  136,  107,   93,
       92,  137,  132,  155,   51,   52,   51,   52,   53,   54,
       33,   53,   53,   55,   53,   53,   56,   57,   53,   57,
       58,   59,   53,   53,   53,   53,   53,   60,   61,   62,
       63,   63,   63,   63,   64,   53,   53,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   65,   53,   33,  108,   66,  126,  123,   67,   68,
       69,  108,   69,   38,   39,  108,  109,  234,  134,  127,

       68,  135,   70,  109,   71,   72,   71,  109,  126,  138,
      110,  110,  124,   93,   95,   95,   94,  148,  234,  138,
      149,  127,   73,  155,   68,   53,   53,   33,   53,   53,
       55,   53,   53,   53,   74,   53,   53,   53,   59,   53,
       53,   53,   53,   53,   53,   53,   53,   75,   75,   75,
       75,   53,   53,   53,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   53,   53,
       33,  119,  138,  108,  126,  232,  102,   76,  120,  138,
       77,   34,  143,  232,  123,  109,  152,  127,   78,  141,
      141,  141,  141,  153,  153,  145,  121,  160,   79,  144,

      107,  119,  143,  155,  107,  161,  161,  160,  120,  124,
       80,   33,  144,  161,  169,  161,  105,  102,   76,  144,
      105,   77,   34,  229,  169,  229,  121,  169,  155,   78,
      141,  141,  141,  141,  169,  171,  145,  226,  226,   79,
      183,  107,  172,  172,  155,  107,  223,  184,  184,  106,
      223,   80,  146,  144,  107,  155,  220,  107,  107,  220,
      155,  107,  217,  217,  155,  214,  214,  155,  211,  144,
      211,  194,  155,  147,  147,  147,  147,  208,  208,  206,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  105,  143,  105,  105,  105,  105,

      105,  105,  105,  200,  105,  105,  105,  105,  168,  168,
      168,  168,  144,  105,  105,  105,  168,  168,  168,  168,
      105,  105,  105,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  105,  105,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   96,
       96,  205,   96,   96,   96,   96,   96,   96,   96,   97,

      155,   97,  203,  203,   97,   97,   97,   97,  100,  201,
      200,  199,  155,  197,  197,  100,  101,  195,  101,  105,
      105,  105,  105,  194,  105,  105,  193,  105,  105,  111,
      155,  111,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  114,  114,  183,  114,  114,  114,  114,  114,
      114,  114,  122,  191,  122,  130,  130,  191,  130,  130,
      189,  130,  130,  130,  130,  133,  133,  188,  133,  133,
      133,  133,  133,  133,  133,  139,  187,  139,  186,  155,
      139,  139,  139,  139,  142,  182,  181,  181,  179,  142,
      178,  142,  151,  151,  177,  151,  151,  151,  151,  151,

      151,  151,  154,  176,  154,  154,  175,  154,  154,  154,
      154,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  165,  174,  165,  157,  155,  165,  165,  165,  165,
      173,  170,  173,  173,  170,  173,  173,  173,  173,  180,
      167,  180,  166,  166,  180,  180,  180,  180,  185,  164,
      185,  185,  163,  185,  185,  185,  185,  190,  162,  190,
      159,  158,  190,  190,  190,  190,  192,  157,  192,  192,
      116,  192,  192,  192,  192,  196,  155,  196,  117,  150,
      196,  196,  196,  196,  198,  113,  198,  198,  103,  198,
      198,  198,  198,  202,  102,  202,   99,  140,  202,  202,

      202,  202,  204,  140,  204,  204,  131,  204,  204,  204,
      204,  207,  129,  207,  128,  125,  207,  207,  207,  207,
      209,  117,  209,  209,  116,  209,  209,  209,  209,  210,
      115,  210,  113,  110,  210,  210,  210,  210,  212,  103,
      212,  212,  102,  212,  212,  212,  212,  213,   99,  213,
       98,   95,  213,  213,  213,  213,  215,  236,  215,  215,
       48,  215,  215,  215,  215,  216,   48,  216,  236,  236,
      216,  216,  216,  216,  218,  236,  218,  218,  236,  218,
      218,  218,  218,  219,  236,  219,  236,  236,  219,  219,
      219,  219,  221,  236,  221,  221,  236,  221,  221,  221,

      221,  222,  236,  222,  236,  236,  222,  222,  222,  222,
      224,  236,  224,  224,  236,  224,  224,  224,  224,  225,
      236,  225,  236,  236,  225,  225,  225,  225,  227,  236,
      227,  227,  236,  227,  227,  227,  227,  228,  236,  228,
      236,  236,  228,  228,  228,  228,  230,  236,  230,  230,
      236,  230,  230,  230,  230,  231,  236,  231,  236,  236,
      231,  231,  231,  231,  233,  236,  233,  233,  236,  233,
      233,  233,  233,  235,  236,  235,  235,  236,  235,  235,
      235,  235,   31,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236
    } ;

static yyconst flex_int16_t yy_chk[929] =
    {   0,
        0,    0,    1,    2,    3,    4,    0,    5,   27,    5,
        3,    4,   57,    1,    2,    3,    4,    5,    5,   27,
        7,    3,    4,    6,   57,    6,    5,    7,    8,   25,
       26,    7,    5,    6,    6,    8,   28,   25,   26,    8,
       25,   26,    6,   34,   40,   40,   34,   28,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   13,   13,  246,   14,   14,   15,

       15,   16,   16,   29,   29,   13,   39,   13,   14,   39,
       14,   30,   30,   46,   59,   29,   46,   59,   73,   56,
       60,   60,   29,   30,   56,  235,   73,   89,   56,   84,
       30,   89,   84,  233,   15,   15,   16,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   69,   19,   78,   76,   19,   19,
       19,   62,   19,   19,   19,   70,   69,  232,   87,   78,

       19,   87,   19,   62,   19,   19,   19,   70,   92,   94,
       62,   62,   76,   91,   70,   70,   91,  109,  231,   94,
      109,   92,   19,  230,   19,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       23,   74,   93,  108,  126,  229,  100,   23,   74,   93,
       23,   23,  105,  228,  123,  108,  115,  126,   23,  100,
      100,  100,  100,  115,  115,  106,   74,  132,   23,  105,

      106,  119,  143,  227,  106,  135,  134,  132,  119,  123,
       23,   24,  106,  134,  149,  135,  146,  141,   24,  143,
      146,   24,   24,  226,  149,  225,  119,  148,  224,   24,
      141,  141,  141,  141,  148,  153,  145,  223,  222,   24,
      172,  145,  153,  153,  221,  145,  220,  172,  172,  167,
      219,   24,  107,  145,  167,  218,  217,  107,  167,  216,
      215,  107,  214,  213,  212,  211,  210,  209,  208,  107,
      207,  206,  204,  107,  107,  107,  107,  203,  202,  201,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  200,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  242,
      242,  199,  242,  242,  242,  242,  242,  242,  242,  243,

      198,  243,  197,  196,  243,  243,  243,  243,  244,  195,
      194,  193,  192,  191,  190,  244,  245,  189,  245,  247,
      247,  247,  247,  188,  247,  247,  187,  247,  247,  248,
      185,  248,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  250,  250,  184,  250,  250,  250,  250,  250,
      250,  250,  251,  181,  251,  252,  252,  180,  252,  252,
      179,  252,  252,  252,  252,  253,  253,  178,  253,  253,
      253,  253,  253,  253,  253,  254,  175,  254,  174,  173,
      254,  254,  254,  254,  255,  169,  166,  165,  163,  255,
      162,  255,  256,  256,  161,  256,  256,  256,  256,  256,

      256,  256,  257,  160,  257,  257,  159,  257,  257,  257,
      257,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  259,  158,  259,  156,  154,  259,  259,  259,  259,
      260,  152,  260,  260,  151,  260,  260,  260,  260,  261,
      144,  261,  140,  139,  261,  261,  261,  261,  262,  138,
      262,  262,  137,  262,  262,  262,  262,  263,  136,  263,
      129,  128,  263,  263,  263,  263,  264,  124,  264,  264,
      118,  264,  264,  264,  264,  265,  117,  265,  116,  114,
      265,  265,  265,  265,  266,  112,  266,  266,  103,  266,
      266,  266,  266,  267,  102,  267,   99,   98,  267,  267,

      267,  267,  268,   97,  268,  268,   83,  268,  268,  268,
      268,  269,   80,  269,   79,   77,  269,  269,  269,  269,
      270,   72,  270,  270,   71,  270,  270,  270,  270,  271,
       67,  271,   64,   58,  271,  271,  271,  271,  272,   54,
      272,  272,   48,  272,  272,  272,  272,  273,   45,  273,
       42,   38,  273,  273,  273,  273,  274,   31,  274,  274,
       12,  274,  274,  274,  274,  275,   11,  275,    0,    0,
      275,  275,  275,  275,  276,    0,  276,  276,    0,  276,
      276,  276,  276,  277,    0,  277,    0,    0,  277,  277,
      277,  277,  278,    0,  278,  278,    0,  278,  278,  278,

      278,  279,    0,  279,    0,    0,  279,  279,  279,  279,
      280,    0,  280,  280,    0,  280,  280,  280,  280,  281,
        0,  281,    0,    0,  281,  281,  281,  281,  282,    0,
      282,  282,    0,  282,  282,  282,  282,  283,    0,  283,
        0,    0,  283,  283,  283,  283,  284,    0,  284,  284,
        0,  284,  284,  284,  284,  285,    0,  285,    0,    0,
      285,  285,  285,  285,  286,    0,  286,  286,    0,  286,
      286,  286,  286,  287,    0,  287,  287,    0,  287,  287,
      287,  287,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236
    } ;

extern int defargsYY_flex_debug;
int defargsYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up defargsYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *defargsYYtext;
#line 1 "defargs.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2012 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*! \file
 *  This scanner is used to convert a string into a list of function or 
 *  template arguments. Each parsed argument results in a Argument struct,
 *  that is put into an ArgumentList in declaration order.
 *  Comment blocks for arguments can also be included in the string.
 *  The argument string does not contain new-lines (except inside any
 *  comment blocks).
 *  An Argument consists of the string fields: 
 *                 type,name,default value, and documentation
 *  The Argument list as a whole can be pure, constant or volatile.
 *
 *  Examples of input strings are:
 *  \code
 *    "(int a,int b) const"
 *    "(const char *s="hello world",int=5) = 0"
 *    "<class T,class N>"
 *    "(char c,const char)"
 *  \endcode
 *
 *  Note: It is not always possible to distinguish between the name and 
 *        type of an argument. In case of doubt the name is added to the
 *        type, and the matchArgumentList in util.cpp is be used to
 *        further determine the correct separation.
 */
#line 44 "defargs.l"

/*
 *	includes
 */
#include "qtbc.h"
#include <stdio.h>
//#include <iostream.h>
#include <assert.h>
#include <ctype.h>
#include <qregexp.h>

#include "defargs.h"
#include "entry.h"
#include "util.h"
#include "arguments.h"
  
#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT 1
  
/* -----------------------------------------------------------------
 *	state variables
 */
static const char      *g_inputString;
static int	        g_inputPosition;
static ArgumentList    *g_argList;
static QCString        *g_copyArgValue;
static QCString         g_curArgTypeName;
static QCString         g_curArgDefValue;
static QCString		g_curArgName;
static QCString		g_curArgDocs;
static QCString		g_curArgAttrib;
static QCString		g_curArgArray;
static QCString		g_extraTypeChars;
static int              g_argRoundCount;
static int              g_argSharpCount;
static int              g_argCurlyCount;
static int              g_readArgContext;
static int              g_lastDocContext;
static int              g_lastDocChar;
static QCString         g_delimiter;

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    while( c < max_size && g_inputString[g_inputPosition] )
    {
	*buf = g_inputString[g_inputPosition++] ;
	c++; buf++;
    }
    return c;
}















#line 921 "<stdout>"

#define INITIAL 0
#define Start 1
#define CopyArgString 2
#define CopyRawString 3
#define CopyArgRound 4
#define CopyArgRound2 5
#define CopyArgSharp 6
#define CopyArgCurly 7
#define ReadFuncArgType 8
#define ReadFuncArgDef 9
#define ReadFuncArgPtr 10
#define FuncQual 11
#define ReadDocBlock 12
#define ReadDocLine 13
#define TrailingReturn 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int defargsYYlex_destroy (void );

int defargsYYget_debug (void );

void defargsYYset_debug (int debug_flag  );

YY_EXTRA_TYPE defargsYYget_extra (void );

void defargsYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *defargsYYget_in (void );

void defargsYYset_in  (FILE * in_str  );

FILE *defargsYYget_out (void );

void defargsYYset_out  (FILE * out_str  );

yy_size_t defargsYYget_leng (void );

char *defargsYYget_text (void );

int defargsYYget_lineno (void );

void defargsYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int defargsYYwrap (void );
#else
extern int defargsYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( defargsYYtext, defargsYYleng, 1, defargsYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( defargsYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( defargsYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, defargsYYin))==0 && ferror(defargsYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(defargsYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int defargsYYlex (void);

#define YY_DECL int defargsYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after defargsYYtext and defargsYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 126 "defargs.l"


#line 1120 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)defargsYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in defargsYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! defargsYYin )
			defargsYYin = stdin;

		if ( ! defargsYYout )
			defargsYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			defargsYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				defargsYY_create_buffer(defargsYYin,YY_BUF_SIZE );
		}

		defargsYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of defargsYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 237 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 883 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 128 "defargs.l"
{ BEGIN(ReadFuncArgType); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 130 "defargs.l"
{
  					  g_curArgTypeName+=" ";
  					}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 133 "defargs.l"
{ 
					  if (g_curArgTypeName.stripWhiteSpace().isEmpty())
					  {
					    g_curArgAttrib=defargsYYtext; // for M$-IDL
					  }
					  else // array type
					  {
					    g_curArgArray+=defargsYYtext;
					  }
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "defargs.l"
{ g_curArgDefValue+=defargsYYtext; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "defargs.l"
{ g_curArgDefValue+=defargsYYtext; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 145 "defargs.l"
{ g_curArgDefValue+=defargsYYtext; }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 146 "defargs.l"
{ g_curArgDefValue+=defargsYYtext; 
                                          QCString text=defargsYYtext;
                                          int i=text.find('"');
                                          g_delimiter = defargsYYtext+i+1;
                                          g_delimiter=g_delimiter.left(g_delimiter.length()-1);
                                          BEGIN( CopyRawString );
                                        }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 153 "defargs.l"
{
  					  g_curArgDefValue+=*defargsYYtext;
  					  BEGIN( CopyArgString );
  					}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 157 "defargs.l"
{ 
  					  // function pointer as argument
					  g_curArgTypeName+=defargsYYtext;
					  //g_curArgTypeName=g_curArgTypeName.simplifyWhiteSpace();
					  BEGIN( ReadFuncArgPtr );
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 163 "defargs.l"
{
					  g_curArgName=defargsYYtext;
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 166 "defargs.l"
{ // function pointer
					  g_curArgTypeName+=defargsYYtext;
					  //g_curArgTypeName=g_curArgTypeName.simplifyWhiteSpace();
					  g_readArgContext = ReadFuncArgType;
					  g_copyArgValue=&g_curArgTypeName;
					  g_argRoundCount=0;
					  BEGIN( CopyArgRound2 );
					}
	YY_BREAK
case 12:
*yy_cp = (yy_hold_char); /* undo effects of setting up defargsYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up defargsYYtext again */
YY_RULE_SETUP
#line 174 "defargs.l"
{ // pointer to fixed size array
					  g_curArgTypeName+=defargsYYtext;
					  g_curArgTypeName+=g_curArgName;
					  //g_curArgTypeName=g_curArgTypeName.simplifyWhiteSpace();
					  BEGIN( ReadFuncArgType );
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 180 "defargs.l"
{ // redundant braces detected / remove them
					  int i=g_curArgTypeName.findRev('('),l=g_curArgTypeName.length();
					  if (i!=-1)
					    g_curArgTypeName=g_curArgTypeName.left(i)+
					                   g_curArgTypeName.right(l-i-1);
					  g_curArgTypeName+=g_curArgName;
					  BEGIN( ReadFuncArgType );
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 188 "defargs.l"
{ // handle operators in defargs
  					  g_curArgTypeName+=defargsYYtext;
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 191 "defargs.l"
{	 
					  if (YY_START==ReadFuncArgType)
					  {
					    g_curArgTypeName+=*defargsYYtext;
					    g_copyArgValue=&g_curArgTypeName;
					  }
					  else // YY_START==ReadFuncArgDef
					  {
					    g_curArgDefValue+=*defargsYYtext;
					    g_copyArgValue=&g_curArgDefValue;
					  }
					  g_readArgContext = YY_START; 
					  if (*defargsYYtext=='(')
					  {
					    g_argRoundCount=0; 
					    BEGIN( CopyArgRound ); 
					  }
					  else if (*defargsYYtext=='{')
					  {
					    g_argCurlyCount=0; 
					    BEGIN( CopyArgCurly ); 
					  }
					  else // defargsYYtext=='<'
					  {
					    g_argSharpCount=0; 
					    BEGIN( CopyArgSharp ); 
					  }
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 219 "defargs.l"
{
  					  g_argRoundCount++;
					  *g_copyArgValue += *defargsYYtext;
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 223 "defargs.l"
{
					  *g_copyArgValue += defargsYYtext;
					  if (g_argRoundCount>0) 
					  {
					    g_argRoundCount--;
					  }
					  else 
					  {
					    if (YY_START==CopyArgRound2)
					    {
					      *g_copyArgValue+=" "+g_curArgName;
					    }
					    BEGIN( g_readArgContext );
					  }
  					}
	YY_BREAK
case 18:
*yy_cp = (yy_hold_char); /* undo effects of setting up defargsYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up defargsYYtext again */
YY_RULE_SETUP
#line 238 "defargs.l"
{
					  *g_copyArgValue += *defargsYYtext;
					  if (g_argRoundCount>0) g_argRoundCount--;
					  else BEGIN( g_readArgContext );
                                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 243 "defargs.l"
{
  					  g_argSharpCount++;
					  *g_copyArgValue += *defargsYYtext;
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 247 "defargs.l"
{
					  *g_copyArgValue += *defargsYYtext;
					  if (g_argSharpCount>0) g_argSharpCount--;
					  else BEGIN( g_readArgContext );
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 252 "defargs.l"
{
  					  g_argCurlyCount++;
					  *g_copyArgValue += *defargsYYtext;
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 256 "defargs.l"
{
					  *g_copyArgValue += *defargsYYtext;
					  if (g_argCurlyCount>0) g_argCurlyCount--;
					  else BEGIN( g_readArgContext );
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 261 "defargs.l"
{
					  g_curArgDefValue+=defargsYYtext;
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 264 "defargs.l"
{
					  g_curArgDefValue+=defargsYYtext;
                                          QCString delimiter = defargsYYtext+1;
                                          delimiter=delimiter.left(delimiter.length()-1);
                                          if (delimiter==g_delimiter)
                                          {
					    BEGIN( ReadFuncArgDef );
                                          }
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 273 "defargs.l"
{
					  g_curArgDefValue+=*defargsYYtext;
					  BEGIN( ReadFuncArgDef );
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 277 "defargs.l"
{
					  BEGIN( ReadFuncArgDef );
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 280 "defargs.l"
{
					  g_lastDocContext=YY_START;
					  g_lastDocChar=*defargsYYtext;  
					  QCString text=defargsYYtext;
					  if (text.find("//")!=-1)
					    BEGIN( ReadDocLine );
					  else
					    BEGIN( ReadDocBlock );
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 289 "defargs.l"
{
  					  if (*defargsYYtext==')' && g_curArgTypeName.stripWhiteSpace().isEmpty())
					  {
					    g_curArgTypeName+=*defargsYYtext;
					    BEGIN(FuncQual);
					  }
					  else
					  {
					    g_curArgTypeName=removeRedundantWhiteSpace(g_curArgTypeName);
					    g_curArgDefValue=g_curArgDefValue.stripWhiteSpace();
					    //printf("curArgType=`%s' curArgDefVal=`%s'\n",g_curArgTypeName.data(),g_curArgDefValue.data());
					    int l=g_curArgTypeName.length();
					    if (l>0)
					    {
					      int i=l-1;
					      while (i>=0 && (isspace((uchar)g_curArgTypeName.at(i)) || g_curArgTypeName.at(i)=='.')) i--;
					      while (i>=0 && (isId(g_curArgTypeName.at(i)) || g_curArgTypeName.at(i)=='$')) i--;
					      Argument *a = new Argument; 
					      a->attrib = g_curArgAttrib.copy();
					      //printf("a->type=%s a->name=%s i=%d l=%d\n",
					      //        a->type.data(),a->name.data(),i,l);
					      a->array.resize(0);
					      if (i==l-1 && g_curArgTypeName.at(i)==')') // function argument
					      {
						int bi=g_curArgTypeName.find('(');
						int fi=bi-1;
						//printf("func arg fi=%d\n",fi);
						while (fi>=0 && isId(g_curArgTypeName.at(fi))) fi--;
						if (fi>=0)
						{
						  a->type  = g_curArgTypeName.left(fi+1);
						  a->name  = g_curArgTypeName.mid(fi+1,bi-fi-1).stripWhiteSpace();
						  a->array = g_curArgTypeName.right(l-bi);
						}
						else
						{
						  a->type = g_curArgTypeName;
						}
					      }
					      else if (i>=0 && g_curArgTypeName.at(i)!=':')
					      { // type contains a name
						a->type = removeRedundantWhiteSpace(g_curArgTypeName.left(i+1)).stripWhiteSpace();
						a->name = g_curArgTypeName.right(l-i-1).stripWhiteSpace();

						// if the type becomes a type specifier only then we make a mistake
						// and need to correct it to avoid seeing a nameless parameter
						// "struct A" as a parameter with type "struct" and name "A".
						int sv=0;
						if      (a->type.left(6)=="const ")    sv=6;
						else if (a->type.left(9)=="volatile ") sv=9;

						if (a->type.mid(sv)=="struct"    ||
						    a->type.mid(sv)=="union"     ||
						    a->type.mid(sv)=="class"     ||
						    a->type.mid(sv)=="typename"  ||
						    a->type=="const"             ||
						    a->type=="volatile"
						   )
						{ 
						  a->type = a->type + " " + a->name;
						  a->name.resize(0);
						}
						//printf(" --> a->type='%s'\n",a->type.data());
					      }
					      else // assume only the type was specified, try to determine name later 
					      {
						a->type = removeRedundantWhiteSpace(g_curArgTypeName);  
					      }
                                              if (!a->type.isEmpty() && a->type.at(0)=='$') // typeless PHP name?
                                              {
                                                a->name = a->type;
                                                a->type = "";
                                              }
					      a->array  += removeRedundantWhiteSpace(g_curArgArray);
					      //printf("array=%s\n",a->array.data());
					      int alen = a->array.length();
					      if (alen>2 && a->array.at(0)=='(' && 
						            a->array.at(alen-1)==')') // fix-up for int *(a[10])
					      {
						int i=a->array.find('[')-1;
						a->array = a->array.mid(1,alen-2);
						if (i>0 && a->name.isEmpty())
						{
						  a->name  = a->array.left(i).stripWhiteSpace();
						  a->array = a->array.mid(i);
						}
					      }
					      a->defval = g_curArgDefValue.copy();
					      //printf("a->type=%s a->name=%s a->defval=\"%s\"\n",a->type.data(),a->name.data(),a->defval.data());
					      a->docs   = g_curArgDocs.stripWhiteSpace();
					      //printf("Argument `%s' `%s' adding docs=`%s'\n",a->type.data(),a->name.data(),a->docs.data());
					      g_argList->append(a);
					    }
					    g_curArgAttrib.resize(0);
					    g_curArgTypeName.resize(0);
					    g_curArgDefValue.resize(0);
					    g_curArgArray.resize(0);
					    g_curArgDocs.resize(0);
					    if (*defargsYYtext==')')
					    {
					      BEGIN(FuncQual);
					      //printf(">>> end of argument list\n");
					    }
					    else
					    {
					      BEGIN( ReadFuncArgType );
					    }
					  }
  					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 398 "defargs.l"
{ 
  					  QCString name=defargsYYtext; //resolveDefines(defargsYYtext);
					  if (YY_START==ReadFuncArgType && g_curArgArray=="[]") // Java style array
					  {
					    g_curArgTypeName+=" []";
					    g_curArgArray.resize(0);
					  }
					  //printf("resolveName `%s'->`%s'\n",defargsYYtext,name.data());
  					  g_curArgTypeName+=name;
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 408 "defargs.l"
{ 
  					  g_curArgTypeName+=*defargsYYtext;
					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 412 "defargs.l"
{
  					  g_curArgDefValue+=defargsYYtext;
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 415 "defargs.l"
{
					  g_curArgDefValue+=*defargsYYtext;
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 418 "defargs.l"
{
  					  QCString name=defargsYYtext; //resolveDefines(defargsYYtext);
					  *g_copyArgValue+=name;
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 422 "defargs.l"
{
					  *g_copyArgValue += *defargsYYtext;
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 425 "defargs.l"
{ 
					  g_argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 428 "defargs.l"
{ 
					  g_argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 431 "defargs.l"
{ 
					  g_argList->pureSpecifier=TRUE;
                                          BEGIN(FuncQual);
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 435 "defargs.l"
{ // C++11 trailing return type
                                          g_argList->trailingReturnType=" -> ";
                                          BEGIN(TrailingReturn);
                                        }
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up defargsYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up defargsYYtext again */
YY_RULE_SETUP
#line 439 "defargs.l"
{
                                          unput(*defargsYYtext);
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 443 "defargs.l"
{
                                          g_argList->trailingReturnType+=defargsYYtext;
                                        }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 446 "defargs.l"
{
                                          g_argList->trailingReturnType+=defargsYYtext;
                                        }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 449 "defargs.l"
{ // for functions returning a pointer to an array, 
                                          // i.e. ")[]" in "int (*f(int))[4]" with argsString="(int))[4]"
  					  g_extraTypeChars=defargsYYtext;
  					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 453 "defargs.l"
{
  					  g_curArgDocs+=defargsYYtext;
  					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 456 "defargs.l"
{
  					  g_curArgDocs+=defargsYYtext;
  					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 459 "defargs.l"
{ 
  					  if (g_lastDocChar!=0)
					    unput(g_lastDocChar);
  					  BEGIN(g_lastDocContext); 
					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 464 "defargs.l"
{
  					  if (g_lastDocChar!=0)
					    unput(g_lastDocChar);
					  BEGIN(g_lastDocContext);
  					}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 469 "defargs.l"
{
  					  g_curArgDocs+=*defargsYYtext;
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 472 "defargs.l"
{
  					  g_curArgDocs+=*defargsYYtext;
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 475 "defargs.l"
{
  					  g_lastDocContext=YY_START;
					  g_lastDocChar=0;  
					  if (defargsYYtext[1]=='/')
					    BEGIN( ReadDocLine );
					  else
  					    BEGIN( ReadDocBlock );
  					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 483 "defargs.l"

	YY_BREAK
case 51:
YY_RULE_SETUP
#line 484 "defargs.l"

	YY_BREAK
case 52:
YY_RULE_SETUP
#line 486 "defargs.l"
ECHO;
	YY_BREAK
#line 1815 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Start):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyRawString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgRound2):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgCurly):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadFuncArgDef):
			case YY_STATE_EOF(ReadFuncArgPtr):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(ReadDocBlock):
			case YY_STATE_EOF(ReadDocLine):
			case YY_STATE_EOF(TrailingReturn):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed defargsYYin at a new source and called
			 * defargsYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = defargsYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( defargsYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * defargsYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of defargsYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			defargsYYrestart(defargsYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) defargsYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 237 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 237 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 236);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up defargsYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					defargsYYrestart(defargsYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( defargsYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve defargsYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void defargsYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        defargsYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            defargsYY_create_buffer(defargsYYin,YY_BUF_SIZE );
	}

	defargsYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	defargsYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void defargsYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		defargsYYpop_buffer_state();
	 *		defargsYYpush_buffer_state(new_buffer);
     */
	defargsYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	defargsYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (defargsYYwrap()) processing, but the only time this flag
	 * is looked at is after defargsYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void defargsYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	defargsYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE defargsYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) defargsYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in defargsYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) defargsYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in defargsYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	defargsYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with defargsYY_create_buffer()
 * 
 */
    void defargsYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		defargsYYfree((void *) b->yy_ch_buf  );

	defargsYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a defargsYYrestart() or at EOF.
 */
    static void defargsYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	defargsYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then defargsYY_init_buffer was _probably_
     * called from defargsYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void defargsYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		defargsYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void defargsYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	defargsYYensure_buffer_stack();

	/* This block is copied from defargsYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from defargsYY_switch_to_buffer. */
	defargsYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void defargsYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	defargsYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		defargsYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void defargsYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)defargsYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in defargsYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)defargsYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in defargsYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE defargsYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) defargsYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in defargsYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	defargsYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to defargsYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       defargsYY_scan_bytes() instead.
 */
YY_BUFFER_STATE defargsYY_scan_string (yyconst char * yystr )
{
    
	return defargsYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to defargsYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE defargsYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) defargsYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in defargsYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = defargsYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in defargsYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up defargsYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		defargsYYtext[defargsYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = defargsYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		defargsYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int defargsYYget_lineno  (void)
{
        
    return defargsYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *defargsYYget_in  (void)
{
        return defargsYYin;
}

/** Get the output stream.
 * 
 */
FILE *defargsYYget_out  (void)
{
        return defargsYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t defargsYYget_leng  (void)
{
        return defargsYYleng;
}

/** Get the current token.
 * 
 */

char *defargsYYget_text  (void)
{
        return defargsYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void defargsYYset_lineno (int  line_number )
{
    
    defargsYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see defargsYY_switch_to_buffer
 */
void defargsYYset_in (FILE *  in_str )
{
        defargsYYin = in_str ;
}

void defargsYYset_out (FILE *  out_str )
{
        defargsYYout = out_str ;
}

int defargsYYget_debug  (void)
{
        return defargsYY_flex_debug;
}

void defargsYYset_debug (int  bdebug )
{
        defargsYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from defargsYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    defargsYYin = stdin;
    defargsYYout = stdout;
#else
    defargsYYin = (FILE *) 0;
    defargsYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * defargsYYlex_init()
     */
    return 0;
}

/* defargsYYlex_destroy is for both reentrant and non-reentrant scanners. */
int defargsYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		defargsYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		defargsYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	defargsYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    defargsYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * defargsYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *defargsYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *defargsYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void defargsYYfree (void * ptr )
{
	free( (char *) ptr );	/* see defargsYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 486 "defargs.l"



/* ----------------------------------------------------------------------------
 */

/*! Converts an argument string into an ArgumentList.
 *  \param[in] argsString the list of Arguments.
 *  \param[out] al a reference to resulting argument list pointer.
 *  \param[out] extraTypeChars point to string to which trailing characters 
 *              for complex types are written to
 */
 
void stringToArgumentList(const char *argsString,ArgumentList* al,QCString *extraTypeChars)
{
  if (al==0) return; 
  if (argsString==0) return;

  g_copyArgValue=0;
  g_curArgDocs.resize(0);
  g_curArgAttrib.resize(0);
  g_curArgArray.resize(0);
  g_extraTypeChars.resize(0);
  g_argRoundCount = 0;
  g_argSharpCount = 0;
  g_argCurlyCount = 0;
  g_lastDocChar = 0;

  g_inputString   = argsString;
  g_inputPosition = 0;
  g_curArgTypeName.resize(0);
  g_curArgDefValue.resize(0);
  g_curArgName.resize(0);
  g_argList = al;
  defargsYYrestart( defargsYYin );
  BEGIN( Start );
  defargsYYlex();
  if (extraTypeChars) *extraTypeChars=g_extraTypeChars;
  //printf("stringToArgumentList(%s) result=%s\n",argsString,argListToString(al).data());
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
  void defargsYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


