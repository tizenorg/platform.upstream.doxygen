
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentScanYY_create_buffer
#define yy_delete_buffer commentScanYY_delete_buffer
#define yy_flex_debug commentScanYY_flex_debug
#define yy_init_buffer commentScanYY_init_buffer
#define yy_flush_buffer commentScanYY_flush_buffer
#define yy_load_buffer_state commentScanYY_load_buffer_state
#define yy_switch_to_buffer commentScanYY_switch_to_buffer
#define yyin commentScanYYin
#define yyleng commentScanYYleng
#define yylex commentScanYYlex
#define yylineno commentScanYYlineno
#define yyout commentScanYYout
#define yyrestart commentScanYYrestart
#define yytext commentScanYYtext
#define yywrap commentScanYYwrap
#define yyalloc commentScanYYalloc
#define yyrealloc commentScanYYrealloc
#define yyfree commentScanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentScanYYrestart(commentScanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentScanYYleng;

extern FILE *commentScanYYin, *commentScanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentScanYYrestart()), so that the user can continue scanning by
	 * just pointing commentScanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentScanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentScanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentScanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentScanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentScanYYrestart (FILE *input_file  );
void commentScanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentScanYY_create_buffer (FILE *file,int size  );
void commentScanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentScanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentScanYYpop_buffer_state (void );

static void commentScanYYensure_buffer_stack (void );
static void commentScanYY_load_buffer_state (void );
static void commentScanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentScanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentScanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentScanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentScanYYalloc (yy_size_t  );
void *commentScanYYrealloc (void *,yy_size_t  );
void commentScanYYfree (void *  );

#define yy_new_buffer commentScanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentScanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentScanYYin = (FILE *) 0, *commentScanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentScanYYlineno;

int commentScanYYlineno = 1;

extern char *commentScanYYtext;
#define yytext_ptr commentScanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentScanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentScanYYleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 195
#define YY_END_OF_BUFFER 196
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[790] =
    {   0,
       75,   75,  119,  119,  132,  132,  142,  142,  186,  186,
      196,  195,   43,  195,   43,  195,   42,  195,   43,  195,
       43,  195,   43,  195,   43,  195,   41,   43,  195,   43,
      195,   43,  195,   27,   43,  195,   43,  195,   43,  195,
       43,  195,   43,  195,   43,  195,   41,   43,  195,   43,
      195,   43,  195,   88,  195,   87,  195,   88,  195,   85,
       88,  195,   88,  195,   88,  195,  195,   89,  195,  109,
      195,  108,  195,  109,  195,  106,  109,  195,  109,  195,
       70,  195,   70,  195,   69,  195,   70,  195,   70,  195,
       70,  195,   66,   70,  195,   70,  195,   70,  195,   74,

      195,   73,  195,   74,  195,   71,   74,  195,   74,  195,
       74,  195,   74,  195,   78,  195,   77,  195,   75,   78,
      195,   75,   78,  195,   78,  195,   75,   78,  195,   75,
       78,  195,   78,  195,   70,  195,   69,  195,   70,  195,
       70,  195,   70,  195,   70,  195,   70,  195,   97,  195,
       96,  195,   94,   97,  195,   97,  195,  101,  195,  100,
      195,  101,  195,  101,  195,  105,  195,  104,  195,  105,
      195,  105,  195,   93,  195,   90,  195,   93,  195,   91,
       93,  195,   93,  195,   93,  195,   57,  195,   56,  195,
       57,  195,   54,   57,  195,   57,  195,   61,  195,   61,

      195,   60,  195,   61,  195,   61,  195,   61,  195,   58,
       61,  195,   61,  195,   61,  195,   65,  195,   64,  195,
       65,  195,   62,   65,  195,   65,  195,   81,  195,   79,
      195,  195,   83,  195,   84,  195,  195,  115,  195,  114,
      195,  113,  115,  195,  115,  195,  119,  122,  195,  116,
      195,  119,  122,  195,  122,  195,  122,  195,  124,  195,
      123,  195,  195,  127,  195,  127,  195,  125,  195,  127,
      195,  127,  195,  132,  136,  195,  133,  195,  136,  195,
      136,  195,  136,  195,  136,  195,  136,  195,  112,  195,
      110,  195,  112,  195,  140,  195,  138,  195,  137,  140,

      195,  140,  195,  143,  195,  142,  143,  195,  141,  195,
      143,  195,  150,  151,  195,  149,  195,  151,  195,  151,
      195,  151,  195,  161,  162,  195,  152,  195,  162,  195,
      162,  195,  162,  195,  165,  195,  163,  195,  165,  195,
      169,  195,  167,  195,  166,  169,  195,  169,  195,  172,
      175,  195,  170,  195,  173,  175,  195,  174,  175,  195,
      175,  195,  175,  195,  178,  195,  176,  195,  178,  195,
      181,  195,  180,  195,  181,  195,  179,  181,  195,  181,
      195,  184,  195,  183,  195,  184,  195,  182,  184,  195,
      184,  195,   51,   53,  195,   52,  195,   53,  195,   53,

      195,  130,  195,  129,  195,  128,  130,  195,  130,  195,
       46,   47,  195,   45,  195,   47,  195,   47,  195,  186,
      188,  195,  187,  195,  188,  195,  188,  195,  188,  195,
      191,  195,  190,  195,  189,  191,  195,  191,  195,  193,
      194,  195,  192,  195,  194,  195,   40,    4,   34,   35,
       37,   35,   26,   26,   18,   26,   18,   18,   18,   18,
       18,   18,   24,   25,   20,   26,   27,   18,   18,   18,
       18,   18,   18,   18,   18,   30,   31,   34,   28,   85,
       85,   86,   85,   89,  106,  106,  107,   66,   66,   68,
       66,   71,   71,   72,   71,   75,   75,   75,   75,   75,

       75,   76,   75,   94,   95,   98,   99,  103,  102,  103,
       91,   91,   92,   91,   54,   54,   54,   55,   58,   58,
       59,   58,   62,   62,   63,   79,   80,   83,   82,  113,
      119,  116,  119,  121,  121,  118,  123,  126,  132,  135,
      134,  111,  137,  139,  142,  141,  150,  161,  164,  166,
      168,  172,  171,  177,  179,  179,  182,  182,   51,  128,
       46,  186,  185,  189,  193,   26,   33,   39,   35,   39,
       39,   39,   35,   39,   39,   36,    7,    1,    1,    2,
       18,   18,   18,   18,   22,   23,   18,   18,   18,   20,
        5,   18,   18,   18,   18,   18,   18,   18,   32,   33,

       29,   85,   85,   66,   71,   71,   75,   75,   75,   91,
       91,   54,   54,   54,   54,   58,   62,  120,   48,   49,
       50,   44,  185,   39,   39,   16,    1,   19,    2, 8198,
       18,16390,   18,   18,   18,   18,   18,   18, 8198,   18,
    16390,   18,   18,   18,   18,   18,   85,   71,   75,   75,
       67,   91,   54,   54,   54,   62,  120,  145,  153,   44,
       15,   38,    7,   13, 8198, 8198,   18,   18,   18,   21,
       18,   18,    5, 8198,   18,   18,   18,   85,   71,   75,
       91,    3,   14,    8,   18,   18,   21,   18,   18,   18,
       18,   18,   85,   71,   75,   91,   79,  147,  155,   18,

       18,   18,   18,   18,   18,   18,   85,   71,   75,   91,
      146,  144,  154,   18,   18,   18,   18,   18,   18,   18,
       85,   87,  108,   69,   71,   73,   75,   77,   96,  100,
      104,   90,   91,   56,   60,   64,   81,   84,  114,  117,
      124,  125,  131,  133,  110,  138,  148,  149,  152,  163,
      167,  170,  176,  180,  183,  129,   45,  187,  190,  192,
       10,    9,   18,   18,   18,    5,   18,   18,  156,   12,
       11,   18,   18,   18,   18,   18,   18,  159,   17,   18,
       17,   18,  160,  157,   17,   18,  160,  158,   40
    } ;

static yyconst flex_int16_t yy_accept[1138] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   15,   17,   19,   21,   23,
       25,   27,   30,   32,   34,   37,   39,   41,   43,   45,

       47,   50,   52,   54,   56,   58,   60,   63,   65,   67,
       68,   70,   72,   74,   76,   79,   81,   83,   85,   87,
       89,   91,   93,   96,   98,  100,  102,  104,  106,  109,
      111,  113,  115,  117,  119,  122,  125,  127,  130,  133,
      135,  137,  139,  141,  143,  145,  147,  149,  151,  153,
      156,  158,  160,  162,  164,  166,  168,  170,  172,  174,
      176,  178,  180,  183,  185,  187,  189,  191,  193,  196,
      198,  200,  202,  204,  206,  208,  210,  213,  215,  217,
      219,  221,  223,  226,  228,  230,  232,  233,  235,  237,
      238,  240,  242,  245,  247,  250,  252,  255,  257,  259,

      261,  263,  264,  266,  268,  270,  272,  274,  277,  279,
      281,  283,  285,  287,  289,  291,  293,  295,  297,  299,
      302,  304,  306,  309,  311,  313,  316,  318,  320,  322,
      324,  327,  329,  331,  333,  335,  337,  339,  341,  343,
      345,  348,  350,  353,  355,  358,  361,  363,  365,  367,
      369,  371,  373,  375,  377,  380,  382,  384,  386,  388,
      391,  393,  396,  398,  400,  402,  404,  406,  409,  411,
      414,  416,  418,  420,  423,  425,  427,  429,  431,  433,
      435,  438,  440,  443,  445,  447,  447,  447,  447,  447,
      448,  448,  448,  449,  449,  449,  449,  449,  450,  451,

      452,  452,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  454,  455,  456,  457,
      458,  459,  460,  461,  462,  463,  464,  465,  467,  468,
      469,  470,  471,  472,  473,  474,  475,  476,  476,  476,
      476,  476,  476,  476,  477,  478,  479,  479,  480,  480,
      480,  480,  480,  480,  481,  482,  482,  482,  482,  483,
      484,  484,  485,  486,  486,  487,  487,  487,  488,  488,
      488,  488,  488,  488,  489,  489,  489,  490,  490,  491,
      491,  491,  491,  492,  492,  493,  494,  494,  494,  494,
      495,  496,  496,  497,  498,  498,  499,  500,  501,  501,

      501,  502,  502,  503,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  505,  505,
      506,  506,  506,  507,  507,  509,  509,  509,  510,  510,
      511,  511,  511,  512,  513,  513,  513,  513,  514,  515,
      516,  516,  516,  517,  517,  518,  518,  519,  519,  519,
      519,  519,  519,  520,  520,  520,  521,  521,  522,  522,
      522,  522,  523,  524,  524,  525,  525,  526,  526,  527,
      527,  527,  528,  528,  529,  529,  530,  530,  531,  531,
      532,  533,  534,  534,  535,  536,  536,  537,  537,  538,
      538,  538,  538,  538,  539,  539,  540,  541,  542,  542,

      542,  542,  543,  543,  544,  544,  545,  545,  546,  547,
      547,  547,  548,  548,  548,  548,  549,  549,  549,  549,
      549,  549,  549,  550,  550,  551,  551,  552,  552,  553,
      553,  554,  554,  554,  555,  555,  556,  556,  557,  557,
      557,  558,  558,  559,  559,  559,  560,  560,  560,  561,
      561,  562,  562,  562,  563,  564,  564,  565,  565,  566,
      566,  567,  567,  567,  567,  567,  568,  569,  571,  572,
      573,  575,  576,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  578,  578,  578,  578,  578,  578,  579,  580,
      581,  582,  583,  584,  585,  586,  587,  587,  588,  589,

      590,  591,  592,  593,  594,  595,  596,  597,  598,  599,
      599,  599,  599,  599,  600,  601,  601,  602,  603,  603,
      604,  604,  604,  604,  605,  606,  606,  607,  608,  608,
      609,  609,  610,  610,  610,  610,  610,  610,  610,  611,
      611,  612,  613,  614,  615,  616,  616,  616,  617,  617,
      618,  618,  618,  618,  618,  618,  618,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  620,  621,  622,  622,  622,  623,
      623,  624,  624,  624,  624,  624,  624,  624,  624,  625,

      626,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  628,  629,  630,  633,  634,  635,  635,
      636,  637,  638,  638,  639,  642,  643,  644,  645,  646,
      647,  647,  647,  647,  648,  648,  648,  649,  650,  650,
      651,  652,  652,  652,  652,  653,  653,  654,  655,  656,
      656,  656,  657,  657,  657,  657,  657,  657,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  659,
      659,  659,  659,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  661,  661,  661,  661,
      661,  661,  662,  662,  662,  663,  663,  663,  663,  663,

      663,  665,  665,  665,  665,  666,  668,  669,  670,  671,
      672,  673,  675,  676,  677,  678,  678,  679,  679,  679,
      680,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  683,  684,  684,  684,  684,  685,  685,  685,  685,
      685,  686,  687,  688,  689,  690,  691,  692,  693,  694,
      694,  694,  695,  696,  696,  696,  696,  697,  697,  697,

      697,  697,  697,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  699,  699,  699,  699,  699,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  701,  702,  703,  704,  705,  706,
      707,  708,  708,  708,  709,  710,  710,  710,  710,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  712,  713,  713,  713,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  715,  716,
      717,  718,  719,  720,  721,  723,  724,  725,  727,  729,
      730,  731,  732,  734,  735,  736,  737,  738,  739,  740,
      741,  742,  743,  744,  744,  744,  744,  744,  744,  744,
      745,  746,  747,  748,  749,  749,  749,  749,  749,  749,
      750,  751,  752,  753,  754,  755,  756,  757,  758,  759,
      760,  761,  761,  761,  762,  763,  764,  765,  766,  767,
      768,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      770,  770,  770,  771,  772,  773,  774,  774,  775,  776,

      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      777,  777,  778,  778,  778,  778,  778,  779,  779,  779,
      781,  781,  783,  783,  784,  785,  785,  787,  787,  788,
      788,  788,  788,  788,  789,  790,  790
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    8,    8,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   20,   20,   20,   21,    1,   22,
        1,   23,    1,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   30,   30,   34,   35,   30,   36,   37,
       30,   38,   30,   39,   40,   30,   30,   30,   30,   30,
       41,   42,   43,    1,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   30,   54,   55,   56,   57,
       58,   59,   30,   60,   61,   62,   63,   64,   30,   65,
       66,   30,   67,   68,   69,   70,    1,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       18,    7,   19,   20,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
        1,   22,    1,   23,   21,   21,   21,   21,   21,   21,
       21,   21,   24,   21,   21,   21,   25,   21,   21,   21,
       21,   21,   21,   21,   21,   21,    7,   26,   27,   28,
       29
    } ;

static yyconst flex_int16_t yy_base[1356] =
    {   0,
        0,    0,    0,   70,  138,  208, 4982, 4981,  278,    0,
      349,    0,  420,  490,  560,  630,  700,    0,  771,    0,
       70,   71,   73,   81,  842,  912,  982,    0, 1053,    0,
     1124,    0, 1195,    0,   84,   89, 1266,    0,   90,   92,
     1337,    0,  115,  122,  153,  179,   91,   94, 1408,    0,
      184,  195,   95,  148,  199,  230,  125,  127, 1479,    0,
      435,  444,  132,  185, 1550,    0, 1621,    0,  231,  432,
      436,  461, 1692,    0,  225,  437,  505,  506, 1763,    0,
      196,  430, 4983, 8724, 8724,  514,  468, 4975, 4971, 4955,
       84,  232, 1829, 1885,  244, 1948, 2017,  101,  161,  519,

      583,  526,  590, 8724, 8724, 4971,  601,  603, 1842, 4968,
     8724, 8724, 8724,    0,   89,  478, 8724,  658,  662,  870,
     1834, 4949,  866,  534,  682, 8724, 8724, 4959,  860,  883,
     4941, 1894, 8724, 8724, 2085,  925, 1907, 1925, 8724, 1957,
      947,  954, 1979, 2000, 4942, 2040,  892, 8724, 8724,    0,
      549, 8724, 8724, 4954,  611, 8724, 8724, 4953,  887, 8724,
     8724, 4951,  922, 1832, 2061, 8724, 8724,    0, 2111,  903,
     8724, 2119, 2140, 2155, 2163, 4936, 2178, 1868,  969, 8724,
     8724,    0, 4940, 1900, 8724, 4939, 1914,    0, 8724, 1963,
     8724, 8724,    0, 4910,  463, 8724, 4911, 2165, 2234, 8724,

        0, 4907, 8724,  166, 8724, 4943, 4900,    0, 8724, 8724,
     4926, 4930, 4887,  134, 8724, 8724, 1984, 8724, 8724,    0,
     2009, 8724,  607, 8724, 4885,    0, 8724, 8724,   58,  217,
        0, 8724, 8724, 1999, 2142, 8724, 8724, 2021, 8724, 8724,
        0, 2066,    0, 8724, 8724, 8724, 8724, 2131, 8724, 8724,
     2146, 8724, 8724,    0,  223, 4883, 8724, 8724,    0,  237,
     4882,    0, 8724, 4875, 4874, 8724, 8724,    0, 4879,    0,
     8724, 4880, 4847,    0, 8724, 8724, 4820,  131, 8724, 8724,
        0, 4845,    0, 8724, 4839, 2203, 2297, 2360,  654, 2070,
     4838, 4869, 8724,    0, 4827, 4820,    0,  433, 8724, 8724,

     2430, 4819,  448, 4827,  633,  491,  486, 1841,  544,  614,
     2209,  424,  634, 4789, 4773, 8724,  465, 2500, 4765, 4771,
     4784, 4775, 1831,  409, 4771, 8724, 8724,    0, 2197, 1878,
     2204, 2218, 2136, 2226, 2246, 2224, 2247, 2569,  521, 2259,
     1849, 2274, 2270,  523, 2293, 2294, 1974, 8724, 1916, 2306,
     2327, 2329, 4823, 8724, 2176, 2034, 2295, 2078, 8724, 2335,
     4826, 8724,  559, 4819,  605, 4806, 2260, 8724, 4771, 2355,
     2396, 4804, 2458, 2370, 2376, 2473, 2509, 2298, 8724, 4768,
     2411, 2419,    0, 4815, 8724, 2390, 2083, 2448, 2338, 8724,
     2464, 4809,  169, 2637, 2707, 4808, 8724, 2510, 2328, 2530,

     4807, 2391, 8724, 2541, 2596, 2600, 4789, 2672, 2680, 2536,
     2730, 2750,    0, 2776, 2620, 2631, 2029,    0, 2453, 8724,
     4753, 4800, 8724, 2481, 8724, 4749, 4795, 8724, 2490, 8724,
     4746, 4793, 8724, 2533, 2538, 2544, 2513, 8724, 2610, 2785,
     2574,    0, 2805, 4778, 2813, 2589, 8724, 4743, 2780, 2833,
     4776, 2841, 2856, 2664, 2862, 2871, 2605, 8724, 4741, 2754,
     2877,    0, 4779, 4785, 4771, 2684, 8724, 4731, 4766, 4728,
     2689, 8724, 4724,    0, 2695, 8724, 4722,    0, 4721,  895,
     8724, 4732, 4729, 8724, 4763, 2735, 8724, 4716,    0, 4715,
      675, 4762, 4760, 8724, 4711,    0, 8724, 8724, 4703, 4704,

     2742, 8724, 4703,    0, 2759, 8724, 4699, 2886, 8724, 4708,
     4696,    0,   24, 4698, 4690,    0, 4687, 4693, 4694,  402,
     4652, 2765, 8724, 4651,    0, 2825, 8724, 4650,    0, 2850,
     8724, 4644, 2891, 8724, 4643,  660, 4683,  674, 4643, 4604,
      839, 4642,  841, 4629, 4594,    0, 4639,  546,    0, 4592,
        0,  246, 4591,    0,    0, 4590,    0, 4589,    0, 4588,
     4592, 4581, 4612,    0, 4616, 4606, 8724, 8724, 4603, 2932,
     4599, 4599, 8724, 4599,  906, 4564, 4549,  525, 1862,  914,
     1920, 8724, 1840, 1846, 1880, 4555, 4554,  925, 2893,    0,
     2052, 2145, 2561, 2236, 8724, 8724,    0, 2331, 2486, 2613,

        0,    0, 2908, 2797, 2910, 2915, 2916, 2917, 2922, 2965,
     2217, 2881, 2976, 8724, 2990, 3004, 2248, 2888, 2966, 2968,
        0, 4556, 4555,    0, 2996, 2999, 3006,  583, 3072, 3019,
     3048, 3084, 4596, 2921, 3027, 4553, 4544, 4543, 3033, 3081,
     3101, 3126, 3146, 3154, 3174, 4541, 4536,    0,    0, 4568,
     4528, 4518, 4525, 4522, 4519,    0,    0, 4518, 4517, 4513,
     4516, 4510, 4506, 4502, 4501, 4464, 3806, 3796, 3796, 3792,
     2530, 3779, 3784, 3783, 3775, 3774, 3773, 3768, 3767,    0,
     3760,    0, 3745, 8724, 8724, 8724, 3743, 3765, 2265, 3733,
        0, 3723, 3705, 3695, 2070, 3694, 3732,    0, 3095, 2502,

     8724, 1991, 3678, 3674, 1998, 3701, 2697, 2073, 2720,  833,
     3677, 3664, 2767, 8724,    0, 3195, 3061, 3051, 3642, 3041,
     2793, 3131, 3663, 3265, 3322, 3122, 3266, 3307, 3308, 3309,
     3279, 3284, 3352, 3259, 3635, 3633, 3354, 3420, 3490, 3361,
     8724, 3625, 3617, 3615, 3381,    0, 3446, 3516, 3472, 3611,
     3602, 3633, 3586, 3577, 3567, 3565, 3559,    0, 3558, 3541,
     3498, 3352, 3481, 3472, 3459, 3453, 3429, 3420, 8724, 3400,
     3397, 3399, 8724, 3381, 3390, 3371, 3344, 3338, 3337, 3330,
     3329, 3324, 3322, 3305, 3304, 3026, 3291, 3245, 3241, 3240,
     3235, 8724, 3267, 3280, 8724, 3256, 3233, 3217, 3163, 3164,

     8724, 2090, 3131, 3145,    0, 3055, 3272, 3301, 3122, 3107,
     3404, 3560, 3466, 3467, 3543, 3525, 3398, 3135, 3131, 3570,
     3583, 3122, 3121, 3113, 3592, 3633, 3112, 3104, 3103, 3083,
     3085, 3083, 3076, 3071, 3067, 3050, 3034, 3029, 3023, 3023,
      915, 3000, 3003, 2995, 2998, 2996, 2990, 2985, 2977, 2974,
     2956, 2955,  912, 2936, 2945, 2941, 1888, 2941, 2939, 2927,
     2923, 2917, 2913, 2902, 2888, 2886, 2880, 2876, 2867, 2865,
     2892, 8724, 2847, 2861, 3267, 8724, 2867, 3351, 2831, 2824,
     3313, 3383, 8724, 3408, 3480, 3547, 3481, 3605, 3623, 2824,
     2823, 3629, 3641, 2822, 2817, 2810, 3639, 3675, 3695, 2801,

     2795, 2794, 8724, 2783, 2775, 2774, 2773, 2767, 2766, 2763,
     2731, 2735, 2711, 2708, 2694, 2686, 2667, 2671, 2664, 2657,
     2649, 2626, 8724, 2621,    0,    0, 2618, 8724, 2601, 3065,
     2597, 2598, 2608, 2604, 2586, 2584, 2582, 2573, 2568, 2567,
     2560, 2551, 2527, 2522, 2510, 2498, 2490, 2475, 2461, 2497,
     3378, 2449, 2437, 3616, 3454, 3539, 3661, 3684, 3668, 3686,
     3685, 2436, 2427, 3691, 3702, 2410, 2408, 2399, 3715, 2397,
     2390, 2389, 2388, 2375, 2373, 2366, 2365, 2359, 2369,    0,
     2353, 2355, 2345, 2331, 2342, 2329, 2305, 2303, 2295, 2294,
        0, 8724, 8724, 2293, 2286, 8724, 2283, 2266, 2255, 2249,

     2242, 2226, 2219, 2217, 2211, 2184, 2180, 2170, 2164, 2144,
     2142, 2140, 2138, 2116, 2104, 2146, 2140, 3455, 3537, 3549,
     3735, 3737, 3741, 3747, 3463, 8724, 8724, 3738, 3749, 8724,
     8724, 8724, 3752, 8724, 8724, 8724, 8724, 8724, 8724, 8724,
     8724, 8724, 8724, 2104, 2081, 2060, 2005, 1980, 1951, 8724,
     8724, 8724, 8724, 8724, 1946, 1934, 3183, 1938, 1936, 8724,
     8724, 8724, 8724, 8724, 8724, 8724, 8724, 8724, 8724, 8724,
     8724, 1952, 1946, 8724, 8724, 3748, 3315, 3758,  440, 3762,
     3776, 1904, 1895, 1884, 1874, 1851, 1787, 1784,  925, 8724,
      903,  856, 8724, 8724, 3769, 3780,  549, 3782, 3790,  838,

      823,  812,  795,  635,  609,  605, 3283,  498,  414, 3621,
     1993, 3800,  205,  210,  186,  181, 8724, 3545,  141, 3551,
      566, 3804,  127, 3590, 8724,   63, 3609, 2025, 3615,   52,
     2042, 3788, 1903, 8724, 3805, 8724, 3855, 3884, 3913, 3942,
     3971, 4000, 4029, 4058, 4087, 4116, 4145, 4174, 4203, 4232,
     4261, 4290, 4319, 4348, 4377, 4406, 4435, 4464, 4493, 4522,
     4544, 4562, 4578, 4597, 4614, 4633, 4661, 4679, 4708, 4717,
     4732, 4760, 4788, 4816, 4845, 4863, 4892, 4916, 4944, 4972,
     5000, 5016, 5045, 5074, 5103, 5121, 5130, 5158, 5186, 5214,
     5242, 5251, 5266, 5282, 5311, 5327, 5356, 5385, 5401, 5430,

     5459, 5475, 5504, 5533, 5549, 5578, 5587, 5602, 5611, 5626,
     5655, 5671, 5700, 5729, 5745, 5774, 5797, 5825, 5834, 5847,
     5865, 5877, 5902, 5911, 3791, 5928, 5952, 5977, 5995, 6013,
     6042, 6057, 6079, 6107, 6135, 6163, 6176, 6205, 6223, 6241,
     6270, 6299, 6323, 6341, 6369, 6397, 6425, 6454, 6482, 6498,
     6527, 6556, 6585, 6603, 6621, 6649, 6658, 6686, 6714, 6742,
     6770, 6783, 6798, 6820, 6836, 6865, 6881, 6910, 6939, 6961,
     6977, 7006, 7035, 7051, 7080, 7109, 7125, 7154, 7169, 7191,
     7206, 7228, 7257, 7273, 7302, 7331, 3798, 7347, 7376, 7389,
     7418, 7434, 7448, 7473, 7502, 7530, 3813, 7554, 7579, 3820,

     3827, 7607, 7621, 7639, 7648, 7661, 7679, 7697, 7726, 7750,
     7774, 7803, 7831, 7849, 7867, 7895, 7923, 7951, 7964, 7973,
     7988, 7997, 8010, 8039, 8048, 8057, 4532, 8086, 8102, 8118,
     8143, 4537, 8171, 8196, 8205, 8229, 8253, 8268, 8286, 8315,
     8339, 8357, 8366, 8394, 8422, 8438, 8463, 8492, 8520, 8549,
     8578, 8607, 8636, 8665, 8694
    } ;

static yyconst flex_int16_t yy_def[1356] =
    {   0,
     1137, 1137, 1136,    3, 1138, 1138, 1139, 1139, 1136,    9,
     1136,   11, 1140, 1140, 1141, 1141, 1136,   17, 1136,   19,
     1142, 1142, 1143, 1143, 1144, 1144, 1136,   27, 1136,   29,
     1136,   31, 1136,   33, 1145, 1145, 1136,   37, 1146, 1146,
     1136,   41, 1147, 1147, 1148, 1148, 1149, 1149, 1136,   49,
     1150, 1150, 1151, 1151, 1152, 1152, 1153, 1153, 1136,   59,
     1154, 1154, 1155, 1155, 1136,   65, 1136,   67, 1156, 1156,
     1156, 1156, 1136,   73, 1157, 1157, 1158, 1158, 1136,   79,
     1159, 1159, 1136, 1136, 1136, 1136, 1136, 1160, 1161, 1162,
     1162, 1163, 1136, 1164, 1165, 1166, 1136, 1136, 1162, 1162,

     1163, 1162, 1136, 1136, 1136, 1167, 1168, 1168, 1168, 1169,
     1136, 1136, 1136, 1170, 1171, 1136, 1136, 1136, 1136, 1172,
     1172, 1136, 1173, 1136, 1174, 1136, 1136, 1175, 1176, 1176,
     1136, 1176, 1136, 1136, 1177, 1178, 1178, 1178, 1136, 1178,
     1136, 1136, 1179, 1179, 1136, 1180, 1181, 1136, 1136, 1182,
     1136, 1136, 1136, 1183, 1136, 1136, 1136, 1184, 1136, 1136,
     1136, 1185, 1186, 1186, 1186, 1136, 1136, 1187, 1188, 1136,
     1136, 1136, 1136, 1189, 1189, 1136, 1190, 1136, 1191, 1136,
     1136, 1192, 1193, 1136, 1136, 1194, 1136, 1195, 1136, 1136,
     1136, 1136, 1196, 1136, 1197, 1136, 1198, 1136, 1136, 1136,

     1199, 1136, 1136, 1136, 1136, 1200, 1136, 1201, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1202,
     1136, 1136, 1136, 1136, 1136, 1203, 1136, 1136, 1136, 1136,
     1204, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1205, 1136, 1206, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1207, 1208, 1136, 1136, 1136, 1209, 1210,
     1136, 1211, 1136, 1136, 1136, 1136, 1136, 1212, 1136, 1213,
     1136, 1136, 1136, 1214, 1136, 1136, 1136, 1136, 1136, 1136,
     1215, 1136, 1216, 1136, 1136, 1136, 1217, 1217, 1136, 1136,
     1136, 1218, 1136, 1219, 1220, 1221, 1222, 1221, 1136, 1136,

     1223, 1221, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1224, 1217, 1224,  318,
      318,  318,  318,  318,  318, 1136, 1136, 1225, 1226, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1221, 1136, 1136, 1221, 1221,
     1136, 1136, 1228, 1136, 1229, 1230, 1229, 1136, 1136, 1229,
     1231, 1136, 1232, 1233, 1232, 1136, 1136, 1136, 1136, 1136,
     1234, 1136, 1234, 1235, 1236, 1234, 1235, 1136, 1136, 1136,
     1236, 1236, 1237, 1238, 1136, 1239, 1240, 1239, 1136, 1136,
     1239, 1241, 1241, 1242, 1242, 1241, 1136, 1243, 1244, 1243,

     1241, 1136, 1136, 1243, 1136, 1245, 1136, 1245, 1246, 1247,
     1245, 1136, 1248, 1246, 1247, 1247, 1249, 1250, 1136, 1136,
     1136, 1251, 1136, 1136, 1136, 1136, 1252, 1136, 1136, 1136,
     1136, 1253, 1136, 1254, 1255, 1254, 1136, 1136, 1254, 1256,
     1136, 1257, 1256, 1136, 1258, 1136, 1136, 1136, 1136, 1259,
     1136, 1259, 1260, 1261, 1259, 1260, 1136, 1136, 1136, 1261,
     1261, 1262, 1263, 1264, 1263, 1136, 1136, 1136, 1265, 1136,
     1136, 1136, 1136, 1266, 1136, 1136, 1136, 1267, 1136, 1268,
     1136, 1269, 1136, 1136, 1270, 1136, 1136, 1136, 1271, 1136,
     1136, 1272, 1272, 1136, 1136, 1273, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1274, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1275, 1136, 1136, 1136, 1276, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1277, 1136, 1136, 1136, 1278, 1136,
     1136, 1136, 1136, 1136, 1136, 1279, 1280, 1279, 1136, 1136,
     1281, 1282, 1281, 1136, 1136, 1283, 1136, 1136, 1284, 1136,
     1285, 1136, 1136, 1286, 1287, 1136, 1288, 1136, 1289, 1136,
     1136, 1136, 1290, 1291, 1292, 1293, 1136, 1136, 1293, 1294,
     1293, 1292, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1295, 1136, 1136, 1136, 1136, 1136, 1136, 1296, 1296, 1297,
     1136, 1298, 1298, 1298, 1136, 1136, 1299, 1298, 1298, 1298,

     1300, 1301, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1136,
     1136, 1136, 1136, 1136, 1293, 1136, 1136, 1303, 1303, 1304,
     1305, 1136, 1136, 1306, 1307, 1307, 1308, 1136, 1309, 1310,
     1310, 1311, 1312, 1136, 1313, 1136, 1136, 1136, 1314, 1314,
     1315, 1316, 1317, 1318, 1318, 1136, 1136, 1319, 1320, 1321,
     1136, 1136, 1136, 1136, 1136, 1322, 1323, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1324, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1325,
     1136, 1326, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1327, 1136, 1136, 1136, 1136, 1136, 1328, 1329, 1330, 1136,

     1136, 1136, 1136, 1136, 1136, 1331, 1331, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1332, 1136, 1333, 1333, 1334, 1333,
     1333, 1333, 1335, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1136, 1136, 1337, 1338, 1136, 1136, 1339, 1340, 1340, 1341,
     1136, 1136, 1136, 1136, 1342, 1343, 1344, 1344, 1345, 1136,
     1136, 1321, 1136, 1136, 1136, 1136, 1136, 1323, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1346, 1330, 1136, 1136, 1136, 1136, 1136, 1347,

     1136, 1136, 1136, 1136, 1348, 1348, 1333, 1333, 1136, 1333,
     1336, 1335, 1336, 1336, 1336, 1136, 1338, 1136, 1136, 1339,
     1341, 1136, 1136, 1136, 1342, 1349, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1350, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1346, 1136, 1136, 1136, 1351, 1136, 1347, 1347, 1136, 1136,
     1333, 1333, 1136, 1333, 1336, 1336, 1336, 1336, 1338, 1136,
     1136, 1339, 1341, 1136, 1136, 1136, 1342, 1349, 1349, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1352, 1353, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1351,
     1351, 1136, 1136, 1333, 1333, 1333, 1336, 1336, 1336, 1336,
     1338, 1136, 1136, 1339, 1341, 1136, 1136, 1136, 1342, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1354,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1355, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1333, 1333, 1333,
     1336, 1336, 1336, 1336, 1338, 1136, 1136, 1339, 1341, 1136,
     1136, 1136, 1342, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1333, 1333, 1136, 1335, 1336,
     1336, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1333, 1333, 1335, 1336, 1336, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1333,
     1335, 1336, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1333,
     1335, 1336, 1136, 1136, 1136, 1136, 1136, 1335, 1136, 1136,
     1335, 1136, 1335, 1136, 1335,    0, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136
    } ;

static yyconst flex_int16_t yy_nxt[8796] =
    {   0,
       85,   86,   87,   85,   86,   85,   88,   85,   89,   85,
       85,   85,   90,   85,   91,   92,   85,   90,   90,   90,
       85,   93,   85,   94,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       85,   96,   85,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   85,   85,   85,   85,
       85,   97,  153,  153,   97,  157,  154,  154,  666,  158,
      667,   98,   99,  157,  100,  101,  189,  158,  102,  102,
      103,  189,  196,  216,  196,   84,  216,  227,  298,  228,

       84,  197,  344,  197,  364,  344,  513,  297, 1132,  366,
      514,  155,  155,  198,  159,  198,  204,  205,  229,  204,
     1130,  206,  159,  204,  205,  190,  204,  237,  206,  237,
      190,  199,  217,  199,  250,  217,  230,  103,  104,  104,
      105,  104,  104,  104,  106,  104,  104,  104,  104,  104,
      227,  104,  228,  104,  108,  209,  207,  210,  108,  104,
      104,  104,  344,  207,  211,  344,  238,  491,  238,  212,
      491,  229,  492,  251,  556,  628,  213,  500,  104,  109,
      104,  209,  499,  210,  297,  223,  224,  250,  223,  230,
      211,  396,  980, 1126,  214,  212,  223,  224,  284,  223,

      555,  232,  213,  233,  104,  104,  104,  104,  104,  104,
      105,  104,  104,  104,  106,  104,  104,  104,  104,  104,
      214,  104,  234,  104,  108,  225,  251,  271,  108,  104,
      104,  104,  232,  263,  233, 1124,  225,  285,  537,  272,
      235,  980,  299,  539,  296,  300,  296,  301,  104,  109,
      104,  688,  542,  234,  264,  297,  296,  544,  296,  296,
      515,  296,  296,  296, 1123,  513,  273,  297,  689,  514,
      980,  235,  264,  303,  104,  104,  104,  104,  112,  112,
      113,  112,  112,  112,  112,  112,  114,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  112,  116,
      112,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  112,  112,  112,  112,  115,  117,
      118,  119,  118,  118,  117,  117,  117,  120,  117,  117,
      117,  117,  117,  117,  121,  117,  117,  117,  117,  122,
      117,  117,  117,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  117,
      124,  117,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  117,  117,  117,  125,  123,
      126,  126,  127,  126,  126,  126,  128,  126,  126,  126,
      126,  126,  284,  126,  263,  126,  130,  244,  263,  271,
      130,  131,  126,  126,  245,  246,  244,  566,  585,  573,
      673,  272,  573,  245,  246,  264,  297,  598,  247,  265,
      126,  132,  126,  263,  674,  481,  599,  247,  585,  289,
      290,  285,  289,  264,  482, 1119,  248,  265,  273,  367,
      368, 1136,  367, 1097,  265,  248,  126,  126,  126,  126,
      126,  126,  127,  126,  126,  126,  128,  126,  126,  126,

      126,  126,  265,  126,  483,  126,  130,  275,  275,  291,
      130,  131,  126,  126,  589,  286,  276,  276,  286,  579,
      345,  369,  344,  345,  344,  344,  578,  344,  277,  277,
      126,  132,  126,  346,  590,  378,  379,  287,  378,  343,
      579,  349,  297,  350,  350,  350,  278,  278,  578,  297,
      419,  420,  705,  419, 1118,  288,  126,  126,  126,  126,
      133,  133,  134,  133,  133,  133,  135,  133,  133,  133,
      133,  133,  705,  133,  364,  133,  137,  380,  580,  366,
      137,  138,  139,  133,  347,  348,  343,  347,  685,  397,
      602,  351,  421,  299,  351,  296,  300,  296,  301,  580,

      133,  140,  133, 1111,  352,  397,  297,  602,  508,  509,
      343,  508,  424,  425,  686,  424,  356,  357, 1136,  357,
      364,  357, 1128,  357,  303,  366,  133,  133,  133,  133,
      133,  133,  134,  133,  133,  133,  135,  133,  133,  133,
      133,  133,  357,  133,  357,  133,  137,  579,  510, 1116,
      137,  138,  139,  133,  426,  289,  290,  343,  289,  370,
      370,  370,  370,  370,  370,  370,  370,  579,  579,  575,
      133,  140,  133,  371,  980,  537,  491,  371,  372,  491,
      539,  492,  372,  381,  381,  381,  381, 1115,  579,  537,
      382,  575,  576,  577,  539,  291,  133,  133,  133,  133,

      117,  141,  142,  141,  141,  117,  117,  117,  143,  117,
      117,  117,  117,  117,  117,  144,  117,  117,  117,  117,
      145,  117,  117,  117,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      117,  124,  117,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  117,  117,  117,  147,
      146,  148,  148,  149,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  148,  151,  148,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  148,  148,  148,
      148,  150,  160,  160,  161,  160,  160,  160,  162,  160,
      160,  160,  160,  160,  542,  160,  542,  160,  164,  544,
      980,  544,  164,  160,  160,  160,  802,  370,  370,  370,
      370,  370,  370,  370,  370,  387,  388,  980,  373, 1114,
      388,  371,  160,  165,  160,  371,  372,  802,  429,  430,
      372,  429, 1113,  415,  415,  415,  415,  481, 1136,  388,

      416,  388, 1109,  388,  446,  447,  482,  446,  160,  160,
      160,  160,  160,  160,  161,  160,  160,  160,  162,  160,
      160,  160,  160,  160,  388,  160,  713,  160,  164,  713,
      431,  397,  164,  160,  160,  160,  483,  435,  436,  375,
      399,  400,  436,  702,  579,  400,  448,  397,  405,  405,
      405,  405,  160,  165,  160,  405,  405,  405,  405,  914,
     1108,  928,  406,  436,  579,  702,  400,  407,  929,  406,
      460,  460,  460,  460,  407,  915, 1107,  461,  160,  160,
      160,  160,  166,  166,  167,  166,  166,  166,  166,  166,
      168,  166,  166,  166,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  166,  166,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  166,  170,  166,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  166,  166,
      166,  166,  169,  171,  172,  173,  172,  172,  171,  171,
      171,  174,  171,  171,  171,  171,  171,  171,  175,  171,
      171,  171,  171,  176,  171,  171,  171,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  171,  178,  171,  177,  177,  177,  177,

      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  171,
      171,  171,  179,  177,  180,  180,  181,  180,  180,  180,
      180,  180,  182,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  180,  184,  180,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      180,  180,  180,  180,  183,   84,   84,  185,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,   84,  187,   84,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,   84,   84,   84,   84,  186,  191,  191,  192,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  193,  193,  193,  193,  193,  191,  194,  191,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  191,  191,  191,  191,  193,   84,   84,  200,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,   84,  202,   84,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,   84,   84,   84,   84,  201,  218,  218,
      219,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  218,  221,
      218,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  218,  218,  218,  218,  220,  239,
      239,  240,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,

      239,  239,  239,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  239,
      242,  239,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  239,  239,  239,  239,  241,
      252,  252,  253,  252,  252,  252,  252,  252,  254,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      252,  256,  252,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  252,  252,  252,  252,
      255,  257,  257,  258,  257,  257,  257,  257,  257,  259,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  257,  261,  257,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  257,  257,  257,
      257,  260,  266,  266,  267,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  266,  269,  266,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  266,  266,
      266,  266,  268,  279,  279,  280,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,

      281,  281,  281,  279,  282,  279,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  279,
      279,  279,  279,  281,  304,  376,  376,  376,  376,  595,
     1106, 1105,  373,  358,  359,  305,  358, 1136,  436,  371,
      347,  348,  436,  347,  372,  306,  307, 1136,  357,  579,
      308,  309,  357,  581,  310,  311,  581,  312,  313,  457,
      458,  596,  457,  436,  709,  306,  307,  708,  579,  591,
      308,  309,  591,  357,  582,  360,  310,  311,  314,  315,
      312,  313,  316,  316,  709,  389,  390,  597,  389,  708,

      579,  466,  467,  375,  466,  710,  316,  316,  317, 1136,
      388,  459, 1104, 1136,  388,  471,  472,  617,  471,  602,
      617,  707, 1136,  400,  707,  710,  319,  400, 1103, 1136,
      320,  401,  321,  322,  323,  388,  933,  391, 1102,  297,
     1136,  400,  582,  468,  602,  400,  324,  397,  400,  325,
      934,  326, 1101,  327,  328,  316,  316,  473,  402,  403,
     1100,  402, 1135, 1136,  475,  476,  400,  475, 1094,  316,
      316,  319, 1136,  400, 1093,  347,  348,  400,  347, 1136,
      405,  405,  405,  405, 1092,  501,  502,  408,  501,  317,
     1091,  331, 1089,  332,  406,  333,  334,  335,  400,  407,

      404,  411,  411,  411,  411, 1088,  477, 1087,  408,  336,
      505,  506,  337,  505,  326,  406,  327,  328,  338,  796,
      407,  338,  522,  523, 1086,  522,  799,  503,  339,  339,
      634,  340,  341,  634,  602,  342,  342,  343,  413,  796,
      287,  412,  405,  405,  412, 1121,  799,  517,  410,  413,
      619,  518,  507,  591,  619,  406,  591,  519,  288,  520,
      407, 1085,  437,  438,  524,  437,  602,  526,  527,  410,
      526,  289,  290, 1131,  289,  619, 1136,  436,  714,  358,
      359,  436,  358,  602,  343,  392,  392, 1133,  392,  392,
      392,  393,  392,  392,  392,  392,  392,  579,  392,  626,

      392,  395,  436,  626,  439,  395,  392,  396,  392,  528,
      714,  291,  441,  441,  441,  441, 1084,  579,  579,  442,
      449,  449,  449,  449,  626,  392,  395,  392,  443,  443,
      443,  444,  530,  531,  450,  530,  714,  591,  579,  451,
      591,  449,  449,  449,  449, 1083,  591,  533,  534,  591,
      533,  392,  392,  392,  392,  450,  449,  449,  449,  449,
      451, 1082, 1075,  452,  455,  455,  455,  455, 1074, 1073,
      450,  452,  484,  484,  532,  451, 1072,  602,  450,  449,
      449,  449,  449,  451,  605,  521,  484,  484,  485,  535,
      517,  356,  357,  450,  518,  716,  357,  290,  451, 1071,

      519, 1070,  520, 1069,  286,  591,  484,  286,  591,  296,
      581,  296,  296,  581,  296,  296,  296,  357,  617,  591,
      297,  617,  591, 1068,  454,  591,  287,  591,  591, 1067,
      591,  582,  454,  583,  484,  486,  487,  591,  486, 1066,
      591,  484,  484, 1065,  288,  602,  584,  591,  591,  617,
      591,  591,  617,  583,  595,  484,  484,  484,  603,  602,
      345,  367,  368,  345,  367,  602,  786,  602,  584,  786,
     1064,  351,  607,  610,  351,  485, 1063,  488, 1062,  343,
      604,  608,  606,  718,  352, 1061,  596,  602,  602,  611,
      343,  612,  612,  612,  345,  613,  614,  345,  613,  378,

      379, 1060,  378,  484,  316,  316,  609,  352,  615, 1059,
     1136,  357,  597,  343,  616,  357, 1058,  297,  316,  316,
      561,  349, 1057,  350,  350,  350,  343, 1056,  351,  297,
      351,  351,  591,  351, 1055,  591,  357,  343,  316,  389,
      390,  352,  389,  610,  631,  322,  323,  343,  631,  343,
      356,  357, 1054,  509, 1052,  357,  370,  370,  370,  370,
      343,  616, 1051,  326, 1050,  327,  328,  316,  316,  631,
      371,  370,  370,  370,  370,  372,  357,  381,  381,  381,
      381,  316,  316,  316,  382,  371, 1049, 1048, 1047,  620,
      372,  720,  402,  403,  343,  402,  343,  376,  376,  376,

      376,  561, 1046, 1045,  373,  387,  388, 1044,  322,  323,
      388,  371,  381,  381,  381,  381,  372,  980, 1042,  382,
     1136, 1136, 1136, 1136, 1041, 1040,  326, 1136,  327,  328,
      567,  388, 1039,  567, 1038,  567,  567,  567,  567,  567,
      568,  567,  569,  567,  569,  570,  567, 1037, 1036, 1035,
      567,  567,  567,  572,  419,  420, 1034,  419, 1032, 1136,
     1136, 1136, 1136, 1136,  388,  375, 1136, 1031,  388, 1030,
      567,  567,  567, 1136,  376,  376,  376,  376, 1136,  387,
      388,  373,  424,  425,  388,  424, 1027,  591,  371,  388,
      591,  429,  430,  372,  429, 1026,  567,  567,  567,  567,

      567,  591, 1017,  795,  591,  388,  795, 1136, 1136, 1016,
      370,  370,  370,  370,  437,  438,  397,  437,  627,  876,
     1015, 1136, 1136, 1136,  371,  399,  400, 1136, 1014,  372,
      400,  773,  397,  721,  773, 1013, 1136,  415,  415,  415,
      415, 1136,  375, 1012,  416, 1136,  400,  397,  435,  436,
      400,  400, 1136,  436,  640, 1011,  399,  400,  640, 1136,
      436,  400,  591,  397,  436,  591, 1136, 1010, 1136, 1136,
      338,  400, 1009,  338,  436,  441,  441,  441,  441,  640,
      339,  339,  400,  340,  341,  436,  774,  342,  342,  343,
      446,  447,  287,  446,  444,  632, 1008,  405,  405,  405,

      405,  411,  411,  411,  411, 1007,  457,  458,  408,  457,
      288,  406, 1006, 1005,  591,  406,  407,  591, 1004,  717,
      407,  415,  415,  415,  415,  435,  436, 1003,  416, 1002,
      436, 1001, 1136, 1136, 1136, 1136,  343,  392,  392, 1136,
      392,  392,  392,  628,  392,  392,  392,  392,  392, 1000,
      392,  436,  629,  395,  999,  998,  997,  395,  392,  396,
      392,  722,  995,  994,  641,  460,  460,  460,  460,  410,
      991,  990,  461, 1136, 1136, 1136, 1136,  392,  395,  392,
     1136,  412,  405,  405,  412,  466,  467, 1136,  466,  413,
      471,  472, 1136,  471,  989,  406,  475,  476,  707,  475,

      407,  707,  988,  392,  392,  392,  392,  392,  392,  987,
      392,  392,  392,  628,  392,  392,  392,  392,  392,  582,
      392,  800,  392,  395,  800,  986,  985,  395,  392,  392,
      392,  411,  411,  411,  411,  984,  486,  487,  408,  486,
      980, 1136,  801,  501,  502,  406,  501,  392,  395,  392,
      407,  412,  405,  405,  412,  460,  460,  460,  460,  413,
      505,  506,  461,  505,  983,  406,  522,  523,  713,  522,
      407,  713,  982,  392,  392,  392,  392,  412,  405,  405,
      412,  449,  449,  449,  449,  413,  441,  441,  441,  441,
      981,  406,  980,  442,  591,  450,  407,  591,  591,  410,

      451,  591,  443,  443,  443,  444,  441,  441,  441,  441,
      979,  978,  977,  442,  441,  441,  441,  441,  976,  975,
      974,  442,  443,  443,  443,  444,  526,  527,  973,  526,
      644,  644,  644,  444,  455,  455,  455,  455,  602,  972,
      971,  452, 1136, 1136, 1136, 1136,  970,  725,  450, 1136,
      716,  530,  531,  451,  530,  968, 1136,  449,  449,  449,
      449, 1136,  967,  455,  455,  455,  455,  966,  963,  962,
      452,  450,  449,  449,  449,  449,  451,  450, 1136, 1136,
     1136, 1136,  451,  953,  952, 1136,  450,  508,  509,  801,
      508,  451,  533,  534,  713,  533,  611,  713,  612,  612,

      612,  714,  454,  356,  619,  949,  948,  698,  619,  591,
     1136,  591,  591,  947,  591,  946,  591,  591,  591,  591,
      591,  591,  634,  591,  945,  634,  591,  510,  944,  619,
      413,  454,  567,  714,  943,  567,  942,  567,  567,  567,
      567,  567,  568,  567,  569,  567,  569,  699,  567,  602,
      941,  602,  567,  567,  567,  572,  602,  602,  602,  714,
      724,  940,  727,  602,  729,  939,  613,  614,  726,  613,
      730,  938,  567,  700,  567,  937,  728,  613,  614,  731,
      613, 1136,  619,  356,  357,  616,  619,  936,  357,  935,
      732,  613,  614,  932,  613,  931,  616,  930,  567,  567,

      567,  567,  567,  927,  733,  613,  614,  619,  613,  357,
      616,  387,  626,  297, 1136,  626,  626,  926,  732,  626,
      734,  387,  388,  925,  616,  397,  388,  786,  634,  924,
      786,  634,  616,  922,  399,  631,  413,  626,  921,  631,
      626,  397,  591,  616,  920,  591,  919,  388,  435,  640,
      918,  917,  591,  640, 1136,  591,  806,  616,  737,  806,
      631,  916,  591, 1136,  631,  591,  996,  913,  631,  996,
     1136,  616,  392,  392,  640,  392,  392,  392,  628,  392,
      392,  392,  392,  392,  912,  392,  911,  392,  739,  631,
      397,  910,  739,  392,  392,  392, 1136,  640,  909,  399,

      400,  640,  716,  808,  400,  299,  397,  296,  591,  296,
      794,  591,  392,  739,  392,  908,  435,  436,  297,  907,
      807,  436,  640,  591,  906,  400,  591,  441,  441,  441,
      441,  905,  591,  904,  746,  591,  740,  903,  392,  392,
      392,  392,  436,  747,  747,  747,  444,  749,  749,  749,
      749,  902,  901,  745,  442,  441,  441,  441,  441,  884,
      900,  896,  442,  602,  875,  878,  444,  875,  878,  895,
      894,  644,  644,  644,  444,  441,  441,  441,  441,  891,
      810,  813,  442,  890, 1090,  876,  801, 1090,  883,  880,
      879,  644,  644,  644,  444,  805,  806,  805,  805,  806,

      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  805,  805,  805,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  805,  805,  805,  805,  805,  591,  591,  951,  591,
      591,  951,  874,  591,  356,  357,  591,  873,  872,  357,
      613,  614,  698,  613, 1117,  613,  614, 1117,  613,  876,
      299,  870,  296,  731,  296,  794,  869,  868,  816,  616,

      357,  867,  591,  297,  616,  591,  602,  602,  591,  591,
      591,  591,  591,  591,  591,  817,  591,  591,  814,  591,
      881,  811,  805,  806,  805,  805,  806,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  616,  866,  602,  602,
      602,  616,  878,  613,  614,  878,  613,  882,  815,  954,
      865,  864,  805,  812,  805,  725,  733,  397,  725,  387,
      388, 1096,  616,  801,  388,  297,  399,  400,  863,  951,
      862,  400,  951,  397,  591,  861,  860,  591,  805,  805,
      805,  805,  805,  859,  858,  388,  435,  436,  837,  838,

      876,  436,  400,  839,  857,  591,  840,  841,  591,  591,
      820,  842,  591,  356,  357,  843,  844,  821,  357,  616,
      392,  392,  436,  392,  392,  392,  628,  392,  392,  392,
      392,  392,  856,  392,  855,  629,  739,  825,  854,  357,
      739,  392,  396,  392,  955,  602,  889,  441,  441,  441,
      441,  853,  885,  852,  746,  591,  591,  851,  591,  591,
      392,  739,  392,  747,  747,  747,  444,  591,  591,  956,
      591,  591,  850,  749,  749,  749,  749,  849,  356,  357,
      442,  591,  591,  357,  591,  591,  392,  392,  392,  392,
      392,  392,  444,  392,  392,  392,  628,  392,  392,  392,

      392,  392, 1019,  392,  357,  392,  739,  602,  602,  848,
      739,  392,  392,  392,  886,  847, 1076,  441,  441,  441,
      441,  602,  602,  887,  746,  957,  613,  614,  846,  613,
      392,  739,  392,  747,  747,  747,  444,  845,  591,  731,
      591,  591,  959,  591,  591,  616, 1125,  591,  591, 1125,
      591,  591, 1127,  591,  836, 1127,  392,  392,  392,  392,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  602,  387,  388, 1020,  602,  397,
      388, 1129,  616,  958, 1129,  888, 1077,  835,  399,  400,

      805,  805,  805,  400,  716,  397,  591,  435,  436,  591,
     1127,  388,  436, 1127,  834,  833, 1129,  591,  892, 1129,
      591,  832,  591,  831,  400,  591,  805,  805,  805,  805,
      805,  893,  830,  436,  441,  441,  441,  441,  356,  357,
      897,  746,  829,  357,  387,  388,  602,  397,  464,  388,
      898,  898,  898,  444,  435,  436,  399,  400,  828,  436,
     1018,  400,  591,  397,  357,  591,  960,  827,  961,  591,
      388,  824,  591,  823,  964, 1120,  441,  441,  441,  441,
      436,  822,  400,  746,  969,  591,  965,  591,  591,  819,
      591,  818,  898,  898,  898,  444,  441,  441,  441,  441,

      356,  357,  602,  746,  602,  357,  387,  388,  397,  602,
      809,  388,  898,  898,  898,  444, 1023,  399,  400,  804,
     1021,  803,  400,  582,  397,  602,  357,  602, 1022,  798,
      435,  436,  388,  797, 1024,  436, 1078,  290,  591, 1078,
      792,  591,  591,  400, 1025,  591,  791,  790,  591,  591,
     1028,  591,  591,  387,  388,  397,  436,  789,  388, 1078,
      290, 1029, 1078,  591,  399,  400,  591,  435,  436,  400,
      591,  397,  436,  591, 1033,  788, 1079,  591,  602,  388,
      591,  591,  602,  591,  591,  787,  591,  689,  602, 1134,
      400,  591, 1134,  436,  591,  785, 1095,  784, 1080,  291,

     1081,  591,  725,  602,  591, 1127,  289,  290, 1127,  289,
     1098,  601,  783,  601,  601,  601,  716,  602,  691,  782,
      781,  691,  691,  602, 1110,  780,  779,  778,  777,  725,
      776,  602, 1099,  715, 1112,  715,  715,  715,  775,  772,
      601,  602,  601,  601,  601,  602, 1079,  723,  771,  723,
      723,  723,  770,  768, 1122,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,

      249,  249,  249,  249,  249,  249,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  292,  292,  767,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  295,  691,  766,  765,  691,  691,  715,  764,  715,
      715,  715,  763,  762,  295,  761,  295,  295,  295,  760,
      759,  757,  295,  296,  756,  296,  296,  755,  296,  754,
      753,  296,  296,  464,  296,  296,  296,  302,  751,  302,
      302,  302,  302,  750,  302,  744,  743,  302,  302,  302,

      302,  302,  302,  318,  318,  742,  741,  736,  735,  712,
      711,  704,  703,  701, 1136,  318,  318,  318,  318,  318,
      318,  318,  297,  318,  318,  329,  297,  329,  329,  297,
      329,  698,  564,  329,  329,  696,  329,  329,  329,  330,
      330,  695,  694,  693,  692,  690,  687,  684,  683,  542,
      682,  330,  330,  330,  330,  330,  330,  330,  681,  330,
      330,  353,  353,  537,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      355,  680,  355,  355,  355,  355,  355,  679,  678,  355,

      355,  355,  355,  355,  677,  676,  675,  355,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  363,  672,  363,
      363,  363,  671,  670,  669,  363,  365,  668,  365,  365,
      665,  511,  365,  664,  365,  365,  365,  663,  662,  661,
      365,  374,  374,  374,  374,  660,  494,  374,  494,  659,
      658,  656,  488,  483,  374,  655,  654,  374,  653,  652,
      374,  470,  374,  374,  374,  651,  464,  374,  374,  377,
      377,  377,  377,  649,  464,  647,  450,  646,  643,  433,

      638,  428,  377,  637,  377,  377,  423,  636,  377,  406,
      377,  377,  377,  628,  628,  628,  377,  383,  383,  383,
      383,  385,  623,  383,  371,  622,  364,  621,  362,  354,
      600,  594,  593,  592,  590,  587,  383,  586,  383,  383,
      383,  574,  297,  297,  383,  384,  384,  564,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  386,  293,  386,  386,  386,  386,
      386,  562,  560,  386,  386,  386,  386,  386,  558,  555,
      553,  386,  394,  394,  552,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  398,  550,  548,  547,  545,  540,  398,  511,  398,
      398,  398,  398,  398,  398,  499,  398,  398,  398,  398,
      398,  498,  497,  495,  398,  409,  409,  409,  409,  494,
      490,  409,  483,  479,  470,  464,  450,  433,  409,  428,
      423,  409,  406,  385,  409,  385,  409,  409,  409,  371,
      362,  409,  409,  414,  414,  414,  414,  354,  297,  294,
      414,  293, 1136,  111,  111, 1136,  414, 1136,  414,  414,
     1136, 1136,  414, 1136,  414,  414,  414, 1136, 1136, 1136,

      414,  417,  417,  417,  417, 1136, 1136,  417, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
      417, 1136,  417,  417,  417, 1136, 1136, 1136,  417,  418,
     1136, 1136,  418, 1136, 1136, 1136,  418, 1136,  418,  418,
      418, 1136, 1136, 1136,  418,  422,  422, 1136,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  427,  427, 1136,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  432,  432, 1136,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  434, 1136,  434,  434,  434,  434,  434, 1136,
     1136,  434,  434,  434,  434,  434, 1136, 1136, 1136,  434,
      440, 1136,  440,  440,  440, 1136, 1136, 1136,  440,  445,
      445,  445,  445, 1136, 1136,  445, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136,  445,  445, 1136, 1136,  445, 1136,
      445,  445,  445, 1136, 1136, 1136,  445,  453,  453,  453,
      453, 1136, 1136,  453, 1136, 1136, 1136, 1136, 1136, 1136,

      453, 1136, 1136,  453, 1136, 1136,  453, 1136,  453,  453,
      453, 1136, 1136,  453,  453,  456,  456,  456,  456, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  456, 1136,
      456,  456, 1136, 1136,  456, 1136,  456,  456,  456, 1136,
     1136, 1136,  456,  462,  462,  462,  462, 1136, 1136,  462,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136,  462, 1136,  462,  462,  462, 1136, 1136, 1136,
      462,  463, 1136,  463,  463,  463, 1136, 1136, 1136,  463,
      465, 1136,  465, 1136, 1136, 1136,  465, 1136,  465,  465,
      465, 1136, 1136, 1136,  465,  469,  469, 1136,  469, 1136,

     1136, 1136,  469, 1136,  469,  469,  469, 1136, 1136, 1136,
      469,  474,  474, 1136,  474,  474,  474,  474,  474,  474,
      474, 1136,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474, 1136,  474,  474,  474,  474,  474,  474,  474,
      478, 1136, 1136,  478, 1136, 1136, 1136,  478, 1136,  478,
      478,  478, 1136, 1136, 1136,  478,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480, 1136,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  482,  482, 1136,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482, 1136,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  489, 1136, 1136,  489, 1136, 1136,
     1136,  489, 1136,  489,  489,  489, 1136, 1136, 1136,  489,
      493,  493, 1136,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  496,
      496, 1136,  496, 1136,  496,  496,  496,  496,  496, 1136,
      496,  496,  496,  496, 1136,  496,  496,  496, 1136,  496,
     1136,  496,  496,  496,  496,  496,  496,  496,  504, 1136,
     1136,  504, 1136, 1136, 1136,  504, 1136,  504,  504,  504,

     1136, 1136, 1136,  504,  512,  512, 1136,  512, 1136,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512, 1136,  512, 1136,  512,  512,  512,  512,
      512,  512,  512,  516,  516, 1136,  516, 1136,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516, 1136,  516, 1136,  516,  516,  516,  516,  516,
      516,  516,  525, 1136, 1136,  525, 1136, 1136, 1136,  525,
     1136,  525,  525,  525, 1136, 1136, 1136,  525,  529,  529,
     1136,  529,  529,  529,  529,  529, 1136, 1136,  529,  529,
      529,  529,  529,  529,  529,  529,  529, 1136,  529, 1136,

      529,  529,  529,  529,  529,  529,  529,  536, 1136,  536,
      536,  536, 1136, 1136, 1136,  536,  538, 1136,  538,  538,
     1136, 1136,  538, 1136,  538,  538,  538, 1136, 1136, 1136,
      538,  541, 1136,  541,  541,  541, 1136, 1136, 1136,  541,
      543, 1136,  543,  543, 1136, 1136,  543, 1136,  543,  543,
      543, 1136, 1136, 1136,  543,  546,  546, 1136,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546, 1136,  546, 1136,  546,  546,  546,
      546,  546,  546,  546,  549, 1136, 1136,  549, 1136, 1136,
     1136,  549, 1136,  549,  549,  549, 1136, 1136, 1136,  549,

      551,  551, 1136,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551, 1136,  551,  551,  551,  551,  551,  551,
      551, 1136,  551,  551,  551,  551,  551,  551,  551,  554,
      554, 1136,  554,  554,  554,  554,  554,  554,  554, 1136,
      554,  554,  554,  554,  554,  554,  554,  554, 1136,  554,
     1136,  554,  554,  554,  554,  554,  554,  554,  557, 1136,
      557,  557,  557, 1136, 1136,  557, 1136,  557,  557,  557,
     1136, 1136, 1136,  557,  559,  559, 1136,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559, 1136,  559,  559,  559,  559,

      559,  559,  559,  318,  318, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136,  318,  318,  318,  318,  318,
      318,  318, 1136,  318,  318,  292,  292, 1136,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  295, 1136,  295,  295,  295, 1136,
     1136, 1136,  295,  563,  563, 1136, 1136,  563, 1136,  563,
      563,  563, 1136, 1136, 1136,  563,  296, 1136,  296,  296,
     1136,  296, 1136, 1136,  296,  296, 1136,  296,  296,  296,
      565, 1136, 1136,  565, 1136, 1136, 1136,  565, 1136,  565,

      565,  565,  571, 1136, 1136,  571, 1136,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  588, 1136,  588,  588,  588, 1136, 1136,  588,  329,
     1136,  329,  329, 1136,  329, 1136, 1136,  329,  329, 1136,
      329,  329,  329,  330, 1136, 1136,  330, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136,  330,  330,  330,  330,  330,  353,  353, 1136,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,

      353,  353,  353,  353,  353,  353,  355, 1136,  355,  355,
      355,  355,  355, 1136, 1136,  355,  355,  355,  355,  355,
     1136, 1136, 1136,  355,  618, 1136,  618, 1136,  618,  618,
      618, 1136, 1136,  618,  618,  618,  618,  618, 1136, 1136,
     1136,  618,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  365, 1136,  365,  365, 1136, 1136,  365, 1136,  365,
      365,  365, 1136, 1136, 1136,  365,  363, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  363,

     1136,  363,  363,  363, 1136, 1136, 1136,  363,  374,  374,
      374,  374, 1136, 1136,  374, 1136, 1136, 1136, 1136, 1136,
     1136,  374, 1136, 1136,  374, 1136, 1136,  374, 1136,  374,
      374,  374, 1136, 1136,  374,  374,  377,  377,  377,  377,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  377,
     1136,  377,  377, 1136, 1136,  377, 1136,  377,  377,  377,
     1136, 1136, 1136,  377,  383,  383,  383,  383, 1136, 1136,
      383, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136,  383, 1136,  383,  383,  383, 1136, 1136,
     1136,  383,  624, 1136, 1136, 1136,  624, 1136,  624,  624,

      624, 1136, 1136, 1136,  624,  384,  384, 1136,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  386, 1136,  386,  386,  386,  386,
      386, 1136, 1136,  386,  386,  386,  386,  386, 1136, 1136,
     1136,  386,  625, 1136,  625, 1136,  625,  625,  625, 1136,
     1136,  625,  625,  625,  625,  625, 1136, 1136, 1136,  625,
      392,  392, 1136,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  394,

      394, 1136,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  398, 1136,
     1136, 1136, 1136, 1136,  398, 1136,  398,  398,  398,  398,
      398,  398, 1136,  398,  398,  398,  398,  398, 1136, 1136,
     1136,  398,  630, 1136,  630, 1136,  630,  630,  630, 1136,
     1136,  630,  630,  630,  630,  630, 1136, 1136, 1136,  630,
      409,  409,  409,  409, 1136, 1136,  409, 1136, 1136, 1136,
     1136, 1136, 1136,  409, 1136, 1136,  409, 1136, 1136,  409,
     1136,  409,  409,  409, 1136, 1136,  409,  409,  414,  414,

      414,  414, 1136, 1136, 1136,  414, 1136, 1136, 1136, 1136,
     1136,  414, 1136,  414,  414, 1136, 1136,  414, 1136,  414,
      414,  414, 1136, 1136, 1136,  414,  417,  417,  417,  417,
     1136, 1136,  417, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136,  417, 1136,  417,  417,  417,
     1136, 1136, 1136,  417,  633,  633,  633,  633,  633,  633,
      633,  633,  633, 1136,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  635, 1136, 1136,  635, 1136, 1136, 1136,
      635, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  635, 1136,

     1136, 1136,  635, 1136,  635,  635,  635, 1136, 1136, 1136,
      635,  418, 1136, 1136,  418, 1136, 1136, 1136,  418, 1136,
      418,  418,  418, 1136, 1136, 1136,  418,  422,  422, 1136,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  427,  427, 1136,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  432,  432, 1136,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  434, 1136,  434,  434,  434,  434,
      434, 1136, 1136,  434,  434,  434,  434,  434, 1136, 1136,
     1136,  434,  639, 1136,  639, 1136,  639,  639,  639, 1136,
     1136,  639,  639,  639,  639,  639, 1136, 1136, 1136,  639,
      445,  445,  445,  445, 1136, 1136,  445, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136,  445,  445, 1136, 1136,  445,
     1136,  445,  445,  445, 1136, 1136, 1136,  445,  642, 1136,
      642,  642,  642, 1136, 1136, 1136,  642,  645,  645,  645,
      645, 1136, 1136,  645, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136,  645,  645, 1136, 1136,  645, 1136,  645,  645,
      645, 1136, 1136, 1136,  645,  453,  453,  453,  453, 1136,
     1136,  453, 1136, 1136, 1136, 1136, 1136, 1136,  453, 1136,
     1136,  453, 1136, 1136,  453, 1136,  453,  453,  453, 1136,
     1136,  453,  453,  456,  456,  456,  456, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136,  456, 1136,  456,  456,
     1136, 1136,  456, 1136,  456,  456,  456, 1136, 1136, 1136,
      456,  462,  462,  462,  462, 1136, 1136,  462, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
      462, 1136,  462,  462,  462, 1136, 1136, 1136,  462,  648,

     1136, 1136, 1136,  648, 1136,  648,  648,  648, 1136, 1136,
     1136,  648,  465, 1136,  465, 1136, 1136, 1136,  465, 1136,
      465,  465,  465, 1136, 1136, 1136,  465,  650, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
      650, 1136,  650,  650,  650, 1136, 1136, 1136,  650,  469,
      469, 1136,  469, 1136, 1136, 1136,  469, 1136,  469,  469,
      469, 1136, 1136, 1136,  469,  474,  474, 1136,  474,  474,
      474,  474,  474,  474,  474, 1136,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474, 1136,  474,  474,  474,
      474,  474,  474,  474,  478, 1136, 1136,  478, 1136, 1136,

     1136,  478, 1136,  478,  478,  478, 1136, 1136, 1136,  478,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480, 1136,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  482,
      482, 1136,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482, 1136,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  657, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136,  657, 1136,  657,  657,  657, 1136, 1136, 1136,  657,
      489, 1136, 1136,  489, 1136, 1136, 1136,  489, 1136,  489,

      489,  489, 1136, 1136, 1136,  489,  493,  493, 1136,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  496,  496, 1136,  496, 1136,
      496,  496,  496,  496,  496, 1136,  496,  496,  496,  496,
     1136,  496,  496,  496, 1136,  496, 1136,  496,  496,  496,
      496,  496,  496,  496,  504, 1136, 1136,  504, 1136, 1136,
     1136,  504, 1136,  504,  504,  504, 1136, 1136, 1136,  504,
      512,  512, 1136,  512, 1136,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512, 1136,

      512, 1136,  512,  512,  512,  512,  512,  512,  512,  516,
      516, 1136,  516, 1136,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516, 1136,  516,
     1136,  516,  516,  516,  516,  516,  516,  516,  525, 1136,
     1136,  525, 1136, 1136, 1136,  525, 1136,  525,  525,  525,
     1136, 1136, 1136,  525,  529,  529, 1136,  529,  529,  529,
      529,  529, 1136, 1136,  529,  529,  529,  529,  529,  529,
      529,  529,  529, 1136,  529, 1136,  529,  529,  529,  529,
      529,  529,  529,  538, 1136,  538,  538, 1136, 1136,  538,
     1136,  538,  538,  538, 1136, 1136, 1136,  538,  536, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136,  536, 1136,  536,  536,  536, 1136, 1136, 1136,  536,
      543, 1136,  543,  543, 1136, 1136,  543, 1136,  543,  543,
      543, 1136, 1136, 1136,  543,  541, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  541, 1136,
      541,  541,  541, 1136, 1136, 1136,  541,  546,  546, 1136,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546, 1136,  546, 1136,  546,
      546,  546,  546,  546,  546,  546,  549, 1136, 1136,  549,
     1136, 1136, 1136,  549, 1136,  549,  549,  549, 1136, 1136,

     1136,  549,  551,  551, 1136,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551, 1136,  551,  551,  551,  551,
      551,  551,  551, 1136,  551,  551,  551,  551,  551,  551,
      551,  554,  554, 1136,  554,  554,  554,  554,  554,  554,
      554, 1136,  554,  554,  554,  554,  554,  554,  554,  554,
     1136,  554, 1136,  554,  554,  554,  554,  554,  554,  554,
      557, 1136,  557,  557,  557, 1136, 1136,  557, 1136,  557,
      557,  557, 1136, 1136, 1136,  557,  559,  559, 1136,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559, 1136,  559,  559,

      559,  559,  559,  559,  559,  563,  563, 1136, 1136,  563,
     1136,  563,  563,  563, 1136, 1136, 1136,  563,  697,  697,
     1136,  697,  697,  697,  697, 1136,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  565,  565, 1136,
      565, 1136, 1136, 1136,  565, 1136,  565,  565,  565,  296,
     1136,  296,  296, 1136,  296, 1136, 1136,  296,  296, 1136,
      296,  296,  296,  571, 1136, 1136,  571, 1136,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,

      571,  571,  706,  706, 1136,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  588, 1136, 1136,  588, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
      588, 1136,  588,  588,  588,  318, 1136, 1136,  318, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136,  318, 1136,  318,  318,  318,  719,
      719, 1136,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719, 1136,  719,  719,  330, 1136,
     1136,  330, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136,  330,  330,  330,
      330,  330,  618, 1136,  618,  618,  618,  618,  618, 1136,
     1136,  618,  618,  618,  618,  618, 1136, 1136, 1136,  618,
      355, 1136,  355,  355,  355,  355,  355, 1136, 1136,  355,
      355,  355,  355,  355, 1136, 1136, 1136,  355,  363, 1136,
      363,  363,  363, 1136, 1136, 1136,  363,  624, 1136, 1136,
     1136,  624, 1136,  624,  624,  624, 1136, 1136, 1136,  624,
      625, 1136,  625,  625,  625,  625,  625, 1136, 1136,  625,

      625,  625,  625,  625, 1136, 1136, 1136,  625,  386, 1136,
      386,  386,  386,  386,  386, 1136, 1136,  386,  386,  386,
      386,  386, 1136, 1136, 1136,  386,  738,  738, 1136,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  630, 1136, 1136, 1136, 1136,
     1136,  630, 1136,  630,  630,  630,  630,  630,  630, 1136,
      630,  630,  630,  630,  630, 1136, 1136, 1136,  630,  398,
     1136, 1136, 1136, 1136, 1136,  398, 1136,  398,  398,  398,
      398,  398,  398, 1136,  398,  398,  398,  398,  398, 1136,

     1136, 1136,  398,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  635, 1136, 1136,  635, 1136, 1136, 1136,  635,
     1136, 1136, 1136, 1136, 1136, 1136, 1136,  635, 1136, 1136,
     1136,  635, 1136,  635,  635,  635, 1136, 1136, 1136,  635,
      639, 1136,  639,  639,  639,  639,  639, 1136, 1136,  639,
      639,  639,  639,  639, 1136, 1136, 1136,  639,  434, 1136,
      434,  434,  434,  434,  434, 1136, 1136,  434,  434,  434,
      434,  434, 1136, 1136, 1136,  434,  748,  748,  748,  748,

     1136, 1136,  748, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136,  748,  748, 1136, 1136,  748, 1136,  748,  748,  748,
     1136, 1136, 1136,  748,  642,  642,  642,  642, 1136, 1136,
      642, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
      642, 1136, 1136,  642, 1136,  642,  642,  642, 1136, 1136,
     1136,  642,  645,  645,  645,  645, 1136, 1136,  645, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136,  645,  645, 1136,
     1136,  645, 1136,  645,  645,  645, 1136, 1136, 1136,  645,
      648, 1136, 1136, 1136,  648, 1136,  648,  648,  648, 1136,
     1136, 1136,  648,  650, 1136,  650,  650,  650, 1136, 1136,

     1136,  650,  752, 1136,  752, 1136, 1136, 1136,  752, 1136,
      752,  752,  752, 1136, 1136, 1136,  752,  657, 1136,  657,
      657,  657, 1136, 1136, 1136,  657,  758, 1136, 1136, 1136,
      758, 1136,  758,  758,  758, 1136, 1136, 1136,  758,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769, 1136,  769,  769,  769, 1136,
      769, 1136, 1136,  769,  769,  769,  769,  769,  536, 1136,
      536,  536,  536, 1136, 1136, 1136,  536,  541, 1136,  541,
      541,  541, 1136, 1136, 1136,  541,  697,  697, 1136,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  793, 1136, 1136,  793, 1136,
     1136, 1136,  793, 1136,  793,  793,  793,  302, 1136,  302,
     1136,  302,  302, 1136,  302, 1136, 1136,  302,  302, 1136,
      302,  302,  302,  706,  706, 1136,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  318, 1136, 1136,  318, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136,  318, 1136,  318,  318,  318,  719,  719, 1136,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  723,  723,  723,  723,  723,
      330, 1136, 1136,  330, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  330,
      330,  330,  330,  330,  296,  296, 1136,  296, 1136, 1136,
     1136, 1136, 1136, 1136,  296, 1136,  296,  296, 1136,  296,
      296, 1136,  296,  296, 1136,  296,  296,  296,  296,  355,
     1136,  355,  355,  355,  355,  355, 1136, 1136,  355,  355,
      355,  355,  355, 1136, 1136, 1136,  355,  386, 1136,  386,

      386,  386,  386,  386, 1136, 1136,  386,  386,  386,  386,
      386, 1136, 1136, 1136,  386,  738,  738, 1136,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  398, 1136, 1136, 1136, 1136, 1136,
      398, 1136,  398,  398,  398,  398,  398,  398, 1136,  398,
      398,  398,  398,  398, 1136, 1136, 1136,  398,  434, 1136,
      434,  434,  434,  434,  434, 1136, 1136,  434,  434,  434,
      434,  434, 1136, 1136, 1136,  434,  826, 1136,  826,  826,
      826, 1136, 1136, 1136,  826,  748,  748,  748,  748, 1136,

     1136,  748, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
      748,  748, 1136, 1136,  748, 1136,  748,  748,  748, 1136,
     1136, 1136,  748,  642,  642,  642,  642, 1136, 1136,  642,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  642,
     1136, 1136,  642, 1136,  642,  642,  642, 1136, 1136, 1136,
      642,  871,  871, 1136,  871, 1136, 1136, 1136,  871, 1136,
      871,  871,  871,  877,  877, 1136,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  805,  805,  805,  805,  805,  805,  805,  805,

      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805, 1136,  805, 1136, 1136, 1136,  805,  805,  805,
      805,  899,  899,  899,  899, 1136, 1136,  899, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136,  899,  899, 1136, 1136,
      899, 1136,  899,  899,  899, 1136, 1136, 1136,  899,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923, 1136,  923,  923,  923, 1136,
      923, 1136,  923, 1136,  923,  923,  923,  923,  950,  950,
     1136,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,

      950,  950,  950,  950,  950,  950,  950,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992, 1136,  992,  992,  992, 1136,  992, 1136,
     1136, 1136,  992,  992,  992,  992,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993, 1136,  993,  993,  993, 1136,  993, 1136, 1136,
     1136,  993,  993,  993,  993, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1136, 1043, 1043, 1043, 1136, 1043, 1136, 1136, 1136,
     1043, 1043, 1043, 1043, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1136, 1053, 1053, 1053, 1136, 1053, 1136, 1136, 1136, 1053,
     1053, 1053, 1053,   83, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136

    } ;

static yyconst flex_int16_t yy_chk[8796] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,   21,   22,    4,   23,   21,   22,  513,   23,
      513,    4,    4,   24,    4,    4,   35,   24,    4,    4,
        4,   36,   39,   47,   40,   35,   48,   53,   91,   53,

       36,   39,   98,   40,  115,   98,  229,   91, 1130,  115,
      229,   21,   22,   39,   23,   40,   43,   43,   53,   43,
     1126,   43,   24,   44,   44,   35,   44,   57,   44,   58,
       36,   39,   47,   40,   63,   48,   53,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       54,    5,   54,    5,    5,   45,   43,   45,    5,    5,
        5,    5,   99,   44,   45,   99,   57,  204,   58,   45,
      204,   54,  204,   63,  278,  393,   45,  214,    5,    5,
        5,   46,  214,   46,   99,   51,   51,   64,   51,   54,
       46,  393, 1123, 1119,   45,   46,   52,   52,   81,   52,

      278,   55,   46,   55,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
       46,    6,   55,    6,    6,   51,   64,   75,    6,    6,
        6,    6,   56,   69,   56, 1116,   52,   81,  255,   75,
       55, 1115,   92,  255,   92,   92,   92,   92,    6,    6,
        6,  552,  260,   56,   69,   92,   95,  260,   95,   95,
      230,   95,   95,   95, 1114,  230,   75,   95,  552,  230,
     1113,   56,   69,   92,    6,    6,    6,    6,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   82,   13,   70,   13,   13,   61,   71,   76,
       13,   13,   13,   13,   61,   61,   62,  298,  312,  303,
      520,   76,  303,   62,   62,   70,  298,  324,   61,   71,
       13,   13,   13,   72,  520,  195,  324,   62,  312,   87,
       87,   82,   87,   70,  195, 1109,   61,   71,   76,  116,
      116, 1079,  116, 1079,   72,   62,   13,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   72,   14,  195,   14,   14,   77,   78,   87,
       14,   14,   14,   14,  317,   86,   77,   78,   86,  307,
      100,  116,  339,  100,  344,  339,  306,  344,   77,   78,
       14,   14,   14,  100,  317,  124,  124,   86,  124,  100,
      307,  102,  100,  102,  102,  102,   77,   78,  306,  102,
      151,  151,  578,  151, 1108,   86,   14,   14,   14,   14,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,  578,   15,  363,   15,   15,  124,  309,  363,
       15,   15,   15,   15,  101,  101,  100,  101,  548,  628,
     1097,  103,  151,  101,  103,  101,  101,  101,  101,  309,

       15,   15,   15, 1097,  103,  628,  101, 1121,  223,  223,
      103,  223,  155,  155,  548,  155,  107,  107,  108,  108,
      365,  107, 1121,  108,  101,  365,   15,   15,   15,   15,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,  107,   16,  108,   16,   16,  310,  223, 1106,
       16,   16,   16,   16,  155,  289,  289,  103,  289,  118,
      118,  118,  118,  119,  119,  119,  119,  313,  310,  305,
       16,   16,   16,  118, 1105,  536,  491,  119,  118,  491,
      536,  491,  119,  125,  125,  125,  125, 1104,  313,  538,
      125,  305,  305,  305,  538,  289,   16,   16,   16,   16,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  541,   25,  543,   25,   25,  541,
     1103,  543,   25,   25,   25,   25,  710,  123,  123,  123,
      123,  120,  120,  120,  120,  129,  129, 1102,  120, 1101,
      129,  123,   25,   25,   25,  120,  123,  710,  159,  159,
      120,  159, 1100,  147,  147,  147,  147,  480,  130,  130,

      147,  129, 1092,  130,  170,  170,  480,  170,   25,   25,
       25,   25,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  130,   26,  588,   26,   26,  588,
      159,  136,   26,   26,   26,   26,  480,  163,  163,  120,
      136,  136,  163,  575,  580,  136,  170,  136,  141,  141,
      141,  141,   26,   26,   26,  142,  142,  142,  142,  841,
     1091,  853,  141,  163,  580,  575,  136,  141,  853,  142,
      179,  179,  179,  179,  142,  841, 1089,  179,   26,   26,
       26,   26,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   93,  121,  121,  121,  121,  323,
     1088, 1087,  121,  109,  109,   93,  109,  164,  164,  121,
      341,  341,  164,  341,  121,   93,   93,  109,  109,  308,
       93,   93,  109,  579,   93,   93,  579,   93,   93,  178,
      178,  323,  178,  164,  584,   93,   93,  583,  308,  330,
       93,   93,  330,  109,  579,  109,   93,   93,   93,   93,
       93,   93,   94,   94,  584,  132,  132,  323,  132,  583,

      308,  184,  184,  121,  184,  585,   94,   94,   94,  132,
      132,  178, 1086,  137,  132,  187,  187,  349,  187,  330,
      349,  581,  137,  137,  581,  585,   94,  137, 1085,  137,
       94,  138,   94,   94,   94,  132,  857,  132, 1084,  349,
      138,  138,  581,  184, 1133,  138,   94,  138,  137,   94,
      857,   94, 1083,   94,   94,   96,   96,  187,  140,  140,
     1082,  140, 1133,  140,  190,  190,  138,  190, 1073,   96,
       96,   96,  140,  140, 1072,  347,  347,  140,  347,  140,
      143,  143,  143,  143, 1059,  217,  217,  143,  217,   96,
     1058,   96, 1056,   96,  143,   96,   96,   96,  140,  143,

      140,  144,  144,  144,  144, 1055,  190, 1049,  144,   96,
      221,  221,   96,  221,   96,  144,   96,   96,   97,  702,
      144,   97,  238,  238, 1048,  238,  705,  217,   97,   97,
      417,   97,   97,  417, 1111,   97,   97,   97,  417,  702,
       97,  146,  146,  146,  146, 1111,  705,  234,  143,  146,
      356,  234,  221,  591,  356,  146,  591,  234,   97,  234,
      146, 1047,  165,  165,  238,  165, 1128,  242,  242,  144,
      242,  290,  290, 1128,  290,  356,  165,  165,  695,  358,
      358,  165,  358, 1131,   97,  135,  135, 1131,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  708,  135,  387,

      135,  135,  165,  387,  165,  135,  135,  135,  135,  242,
      695,  290,  169,  169,  169,  169, 1046,  708,  802,  169,
      172,  172,  172,  172,  387,  135,  135,  135,  169,  169,
      169,  169,  248,  248,  172,  248,  695,  333,  802,  172,
      333,  173,  173,  173,  173, 1045,  592,  251,  251,  592,
      251,  135,  135,  135,  135,  173,  174,  174,  174,  174,
      173, 1044, 1017,  174,  175,  175,  175,  175, 1016, 1015,
      174,  175,  198,  198,  248,  174, 1014,  333,  175,  177,
      177,  177,  177,  175,  333,  235,  198,  198,  198,  251,
      235,  355,  355,  177,  235,  592,  355, 1013,  177, 1012,

      235, 1011,  235, 1010,  286,  331,  198,  286,  331,  329,
      311,  329,  329,  311,  329,  329,  329,  355,  611,  332,
      329,  611,  332, 1009,  174,  336,  286,  334,  336, 1008,
      334,  311,  175,  311,  198,  199,  199,  594,  199, 1007,
      594,  199,  199, 1006,  286,  331,  311,  335,  337,  617,
      335,  337,  617,  311,  335,  199,  199,  199,  331,  332,
      340,  367,  367,  340,  367,  336,  689,  334,  311,  689,
     1005,  343,  336,  340,  343,  199, 1004,  199, 1003,  340,
      332,  336,  334,  594,  343, 1002,  335,  335,  337,  342,
      343,  342,  342,  342,  345,  346,  346,  345,  346,  378,

      378, 1001,  378,  199,  287,  287,  337,  345,  346, 1000,
      357,  357,  335,  345,  346,  357,  999,  346,  287,  287,
      287,  350,  998,  350,  350,  350,  340,  997,  351,  350,
      352,  351,  598,  352,  995,  598,  357,  343,  287,  389,
      389,  351,  389,  352,  399,  287,  287,  351,  399,  352,
      360,  360,  994,  990,  989,  360,  370,  370,  370,  370,
      345,  346,  988,  287,  987,  287,  287,  288,  288,  399,
      370,  374,  374,  374,  374,  370,  360,  375,  375,  375,
      375,  288,  288,  288,  375,  374,  986,  985,  984,  360,
      374,  598,  402,  402,  351,  402,  352,  371,  371,  371,

      371,  288,  983,  982,  371,  386,  386,  981,  288,  288,
      386,  371,  381,  381,  381,  381,  371,  979,  978,  381,
      382,  382,  382,  382,  977,  976,  288,  382,  288,  288,
      301,  386,  975,  301,  974,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  973,  972,  971,
      301,  301,  301,  301,  419,  419,  970,  419,  968,  373,
      373,  373,  373,  388,  388,  371,  373,  967,  388,  966,
      301,  301,  301,  373,  376,  376,  376,  376,  373,  391,
      391,  376,  424,  424,  391,  424,  963,  599,  376,  388,
      599,  429,  429,  376,  429,  962,  301,  301,  301,  301,

      301,  318,  953,  700,  318,  391,  700,  318,  318,  952,
      377,  377,  377,  377,  437,  437,  398,  437,  391,  950,
      949,  318,  318,  318,  377,  398,  398,  373,  948,  377,
      398,  671,  398,  599,  671,  947,  400,  410,  410,  410,
      410,  318,  376,  946,  410,  400,  400,  404,  434,  434,
      400,  398,  400,  434,  435,  945,  404,  404,  435,  436,
      436,  404,  593,  404,  436,  593,  318,  944,  318,  318,
      338,  400,  943,  338,  434,  441,  441,  441,  441,  435,
      338,  338,  404,  338,  338,  436,  671,  338,  338,  338,
      446,  446,  338,  446,  441,  404,  942,  405,  405,  405,

      405,  406,  406,  406,  406,  941,  457,  457,  406,  457,
      338,  405,  940,  939,  600,  406,  405,  600,  938,  593,
      406,  415,  415,  415,  415,  439,  439,  937,  415,  936,
      439,  935,  416,  416,  416,  416,  338,  394,  394,  416,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  934,
      394,  439,  394,  394,  933,  932,  931,  394,  394,  394,
      394,  600,  929,  927,  439,  454,  454,  454,  454,  406,
      924,  922,  454,  408,  408,  408,  408,  394,  394,  394,
      408,  409,  409,  409,  409,  466,  466,  408,  466,  409,
      471,  471,  408,  471,  921,  409,  475,  475,  707,  475,

      409,  707,  920,  394,  394,  394,  394,  395,  395,  919,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  707,
      395,  709,  395,  395,  709,  918,  917,  395,  395,  395,
      395,  411,  411,  411,  411,  916,  486,  486,  411,  486,
      915,  408,  709,  501,  501,  411,  501,  395,  395,  395,
      411,  412,  412,  412,  412,  460,  460,  460,  460,  412,
      505,  505,  460,  505,  914,  412,  522,  522,  713,  522,
      412,  713,  913,  395,  395,  395,  395,  414,  414,  414,
      414,  449,  449,  449,  449,  414,  440,  440,  440,  440,
      912,  414,  911,  440,  721,  449,  414,  721,  604,  411,

      449,  604,  440,  440,  440,  440,  443,  443,  443,  443,
      910,  909,  908,  443,  445,  445,  445,  445,  907,  906,
      905,  445,  443,  443,  443,  443,  526,  526,  904,  526,
      445,  445,  445,  445,  450,  450,  450,  450,  604,  902,
      901,  450,  452,  452,  452,  452,  900,  604,  450,  452,
      721,  530,  530,  450,  530,  896,  452,  453,  453,  453,
      453,  452,  895,  455,  455,  455,  455,  894,  891,  890,
      455,  453,  456,  456,  456,  456,  453,  455,  461,  461,
      461,  461,  455,  880,  879,  461,  456,  508,  508,  877,
      508,  456,  533,  533,  589,  533,  612,  589,  612,  612,

      612,  589,  450,  618,  618,  874,  873,  871,  618,  603,
      452,  605,  603,  870,  605,  869,  606,  607,  608,  606,
      607,  608,  634,  609,  868,  634,  609,  508,  867,  618,
      634,  455,  570,  589,  866,  570,  865,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  603,
      864,  605,  570,  570,  570,  570,  606,  607,  608,  589,
      603,  863,  606,  609,  608,  862,  610,  610,  605,  610,
      609,  861,  570,  570,  570,  860,  607,  613,  613,  610,
      613,  619,  619,  620,  620,  610,  619,  859,  620,  858,
      613,  615,  615,  856,  615,  855,  613,  854,  570,  570,

      570,  570,  570,  852,  615,  616,  616,  619,  616,  620,
      615,  625,  625,  615,  626,  626,  625,  851,  616,  626,
      620,  627,  627,  850,  616,  630,  627,  786,  635,  849,
      786,  635,  610,  848,  630,  630,  635,  625,  847,  630,
      626,  630,  720,  613,  846,  720,  845,  627,  639,  639,
      844,  843,  718,  639,  631,  718,  806,  615,  627,  806,
      630,  842,  717,  631,  631,  717,  930,  840,  631,  930,
      631,  616,  629,  629,  639,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  839,  629,  838,  629,  629,  631,
      632,  837,  629,  629,  629,  629,  640,  640,  836,  632,

      632,  640,  720,  718,  632,  699,  632,  699,  810,  699,
      699,  810,  629,  629,  629,  835,  641,  641,  699,  834,
      717,  641,  640,  726,  833,  632,  726,  642,  642,  642,
      642,  832,  722,  831,  642,  722,  632,  830,  629,  629,
      629,  629,  641,  642,  642,  642,  642,  643,  643,  643,
      643,  829,  828,  641,  643,  644,  644,  644,  644,  810,
      827,  824,  644,  726,  799,  800,  643,  799,  800,  823,
      822,  644,  644,  644,  644,  645,  645,  645,  645,  819,
      722,  726,  645,  818, 1057,  799,  800, 1057,  809,  804,
      803,  645,  645,  645,  645,  716,  716,  716,  716,  716,

      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  724,  727,  875,  724,
      727,  875,  798,  807,  734,  734,  807,  797,  796,  734,
      731,  731,  793,  731, 1107,  732,  732, 1107,  732,  875,
      794,  791,  794,  731,  794,  794,  790,  789,  732,  731,

      734,  788,  808,  794,  732,  808,  724,  727,  728,  729,
      730,  728,  729,  730,  881,  734, 1077,  881,  727, 1077,
      807,  724,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  731,  787,  728,  729,
      730,  732,  878,  733,  733,  878,  733,  808,  730,  881,
      785,  784,  725,  725,  725,  729,  733,  740,  728,  737,
      737, 1077,  733,  878,  737,  733,  740,  740,  783,  951,
      782,  740,  951,  740,  882,  781,  780,  882,  725,  725,
      725,  725,  725,  779,  778,  737,  745,  745,  762,  762,

      951,  745,  740,  762,  777,  811,  762,  762,  811,  884,
      737,  762,  884,  817,  817,  762,  762,  740,  817,  733,
      738,  738,  745,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  776,  738,  775,  738,  738,  745,  774,  817,
      738,  738,  738,  738,  882,  811,  817,  747,  747,  747,
      747,  772,  811,  771,  747,  955, 1018,  770,  955, 1018,
      738,  738,  738,  747,  747,  747,  747,  813,  814,  884,
      813,  814,  768,  749,  749,  749,  749,  767, 1025, 1025,
      749,  885,  887, 1025,  885,  887,  738,  738,  738,  738,
      739,  739,  749,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  955,  739, 1025,  739,  739,  813,  814,  766,
      739,  739,  739,  739,  813,  765, 1018,  748,  748,  748,
      748,  885,  887,  814,  748,  885,  816,  816,  764,  816,
      739,  739,  739,  748,  748,  748,  748,  763, 1019,  816,
      956, 1019,  887,  956,  815,  816, 1118,  815,  886, 1118,
     1020,  886, 1120, 1020,  761, 1120,  739,  739,  739,  739,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  815,  820,  820,  956,  886,  821,
      820, 1124,  816,  886, 1124,  815, 1019,  760,  821,  821,

      812,  812,  812,  821, 1020,  821,  888,  825,  825,  888,
     1127,  820,  825, 1127,  759,  757, 1129,  954,  820, 1129,
      954,  756, 1110,  755,  821, 1110,  812,  812,  812,  812,
      812,  821,  754,  825,  826,  826,  826,  826,  889,  889,
      825,  826,  753,  889,  892,  892,  888,  893,  752,  892,
      826,  826,  826,  826,  897,  897,  893,  893,  751,  897,
      954,  893,  957,  893,  889,  957,  888,  750,  889,  959,
      892,  744,  959,  743,  892, 1110,  898,  898,  898,  898,
      897,  742,  893,  898,  897,  958,  893,  960,  958,  736,
      960,  735,  898,  898,  898,  898,  899,  899,  899,  899,

      961,  961,  957,  899,  723,  961,  964,  964,  965,  959,
      719,  964,  899,  899,  899,  899,  959,  965,  965,  712,
      957,  711,  965,  706,  965,  958,  961,  960,  958,  704,
      969,  969,  964,  703,  960,  969, 1021, 1021, 1022, 1021,
      697, 1022, 1023,  965,  961, 1023,  696,  694, 1024, 1076,
      964, 1024, 1076, 1028, 1028, 1029,  969,  693, 1028, 1078,
     1078,  965, 1078, 1080, 1029, 1029, 1080, 1033, 1033, 1029,
     1095, 1029, 1033, 1095,  969,  692, 1021, 1081, 1022, 1028,
     1081, 1096, 1023, 1098, 1096,  690, 1098,  688, 1024, 1132,
     1029, 1099, 1132, 1033, 1099,  687, 1076,  683, 1022, 1078,

     1023, 1112, 1024, 1080, 1112, 1122, 1135, 1135, 1122, 1135,
     1080, 1225,  681, 1225, 1225, 1225, 1095, 1081, 1287,  679,
      678, 1287, 1287, 1098, 1096,  677,  676,  675,  674, 1098,
      673, 1099, 1081, 1297, 1099, 1297, 1297, 1297,  672,  670,
     1300, 1112, 1300, 1300, 1300, 1122, 1135, 1301,  669, 1301,
     1301, 1301,  668,  667, 1112, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,

     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,

     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,

     1148, 1148, 1148, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159, 1159, 1159,

     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1160, 1160,  666, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1161, 1327,  665,  664, 1327, 1327, 1332,  663, 1332,
     1332, 1332,  662,  661, 1161,  660, 1161, 1161, 1161,  659,
      658,  655, 1161, 1162,  654, 1162, 1162,  653, 1162,  652,
      651, 1162, 1162,  650, 1162, 1162, 1162, 1163,  647, 1163,
     1163, 1163, 1163,  646, 1163,  638,  637, 1163, 1163, 1163,

     1163, 1163, 1163, 1164, 1164,  636,  633,  623,  622,  587,
      586,  577,  576,  574,  572, 1164, 1164, 1164, 1164, 1164,
     1164, 1164,  571, 1164, 1164, 1165,  569, 1165, 1165,  566,
     1165,  565,  563, 1165, 1165,  562, 1165, 1165, 1165, 1166,
     1166,  561,  560,  558,  556,  553,  550,  547,  545,  544,
      542, 1166, 1166, 1166, 1166, 1166, 1166, 1166,  540, 1166,
     1166, 1167, 1167,  539, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1168,  537, 1168, 1168, 1168, 1168, 1168,  535,  532, 1168,

     1168, 1168, 1168, 1168,  528,  524,  521, 1168, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170,  519, 1170,
     1170, 1170,  518,  517,  515, 1170, 1171,  514, 1171, 1171,
      511,  510, 1171,  507, 1171, 1171, 1171,  503,  500,  499,
     1171, 1172, 1172, 1172, 1172,  495,  493, 1172,  492,  490,
      488,  485,  483,  482, 1172,  479,  477, 1172,  473,  470,
     1172,  469, 1172, 1172, 1172,  468,  465, 1172, 1172, 1173,
     1173, 1173, 1173,  464,  463,  459,  451,  448,  444,  432,

      431,  427, 1173,  426, 1173, 1173,  422,  421, 1173,  407,
     1173, 1173, 1173,  401,  396,  392, 1173, 1174, 1174, 1174,
     1174,  384,  380, 1174,  372,  369,  366,  364,  361,  353,
      325,  322,  321,  320,  319,  315, 1174,  314, 1174, 1174,
     1174,  304,  302,  296, 1174, 1175, 1175,  295, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1176,  292, 1176, 1176, 1176, 1176,
     1176,  291,  285, 1176, 1176, 1176, 1176, 1176,  282,  277,
      273, 1176, 1177, 1177,  272, 1177, 1177, 1177, 1177, 1177,

     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1178,  269,  265,  264,  261,  256, 1178,  225, 1178,
     1178, 1178, 1178, 1178, 1178,  213, 1178, 1178, 1178, 1178,
     1178,  212,  211,  207, 1178, 1179, 1179, 1179, 1179,  206,
      202, 1179,  197,  194,  186,  183,  176,  162, 1179,  158,
      154, 1179,  145,  131, 1179,  128, 1179, 1179, 1179,  122,
      110, 1179, 1179, 1180, 1180, 1180, 1180,  106,   90,   89,
     1180,   88,   83,    8,    7,    0, 1180,    0, 1180, 1180,
        0,    0, 1180,    0, 1180, 1180, 1180,    0,    0,    0,

     1180, 1181, 1181, 1181, 1181,    0,    0, 1181,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1181,    0, 1181, 1181, 1181,    0,    0,    0, 1181, 1182,
        0,    0, 1182,    0,    0,    0, 1182,    0, 1182, 1182,
     1182,    0,    0,    0, 1182, 1183, 1183,    0, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1184, 1184,    0, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,

     1184, 1184, 1184, 1185, 1185,    0, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1186,    0, 1186, 1186, 1186, 1186, 1186,    0,
        0, 1186, 1186, 1186, 1186, 1186,    0,    0,    0, 1186,
     1187,    0, 1187, 1187, 1187,    0,    0,    0, 1187, 1188,
     1188, 1188, 1188,    0,    0, 1188,    0,    0,    0,    0,
        0,    0,    0,    0, 1188, 1188,    0,    0, 1188,    0,
     1188, 1188, 1188,    0,    0,    0, 1188, 1189, 1189, 1189,
     1189,    0,    0, 1189,    0,    0,    0,    0,    0,    0,

     1189,    0,    0, 1189,    0,    0, 1189,    0, 1189, 1189,
     1189,    0,    0, 1189, 1189, 1190, 1190, 1190, 1190,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1190,    0,
     1190, 1190,    0,    0, 1190,    0, 1190, 1190, 1190,    0,
        0,    0, 1190, 1191, 1191, 1191, 1191,    0,    0, 1191,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1191,    0, 1191, 1191, 1191,    0,    0,    0,
     1191, 1192,    0, 1192, 1192, 1192,    0,    0,    0, 1192,
     1193,    0, 1193,    0,    0,    0, 1193,    0, 1193, 1193,
     1193,    0,    0,    0, 1193, 1194, 1194,    0, 1194,    0,

        0,    0, 1194,    0, 1194, 1194, 1194,    0,    0,    0,
     1194, 1195, 1195,    0, 1195, 1195, 1195, 1195, 1195, 1195,
     1195,    0, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195,    0, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1196,    0,    0, 1196,    0,    0,    0, 1196,    0, 1196,
     1196, 1196,    0,    0,    0, 1196, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197,    0, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1198, 1198,    0, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,

     1198, 1198, 1198, 1198,    0, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1199,    0,    0, 1199,    0,    0,
        0, 1199,    0, 1199, 1199, 1199,    0,    0,    0, 1199,
     1200, 1200,    0, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1201,
     1201,    0, 1201,    0, 1201, 1201, 1201, 1201, 1201,    0,
     1201, 1201, 1201, 1201,    0, 1201, 1201, 1201,    0, 1201,
        0, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1202,    0,
        0, 1202,    0,    0,    0, 1202,    0, 1202, 1202, 1202,

        0,    0,    0, 1202, 1203, 1203,    0, 1203,    0, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203,    0, 1203,    0, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1204, 1204,    0, 1204,    0, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204,    0, 1204,    0, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1205,    0,    0, 1205,    0,    0,    0, 1205,
        0, 1205, 1205, 1205,    0,    0,    0, 1205, 1206, 1206,
        0, 1206, 1206, 1206, 1206, 1206,    0,    0, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206,    0, 1206,    0,

     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1207,    0, 1207,
     1207, 1207,    0,    0,    0, 1207, 1208,    0, 1208, 1208,
        0,    0, 1208,    0, 1208, 1208, 1208,    0,    0,    0,
     1208, 1209,    0, 1209, 1209, 1209,    0,    0,    0, 1209,
     1210,    0, 1210, 1210,    0,    0, 1210,    0, 1210, 1210,
     1210,    0,    0,    0, 1210, 1211, 1211,    0, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211,    0, 1211,    0, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1212,    0,    0, 1212,    0,    0,
        0, 1212,    0, 1212, 1212, 1212,    0,    0,    0, 1212,

     1213, 1213,    0, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213,    0, 1213, 1213, 1213, 1213, 1213, 1213,
     1213,    0, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214,
     1214,    0, 1214, 1214, 1214, 1214, 1214, 1214, 1214,    0,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,    0, 1214,
        0, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1215,    0,
     1215, 1215, 1215,    0,    0, 1215,    0, 1215, 1215, 1215,
        0,    0,    0, 1215, 1216, 1216,    0, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216,    0, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1217, 1217,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1217, 1217, 1217, 1217, 1217,
     1217, 1217,    0, 1217, 1217, 1218, 1218,    0, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1219,    0, 1219, 1219, 1219,    0,
        0,    0, 1219, 1220, 1220,    0,    0, 1220,    0, 1220,
     1220, 1220,    0,    0,    0, 1220, 1221,    0, 1221, 1221,
        0, 1221,    0,    0, 1221, 1221,    0, 1221, 1221, 1221,
     1222,    0,    0, 1222,    0,    0,    0, 1222,    0, 1222,

     1222, 1222, 1223,    0,    0, 1223,    0, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1224,    0, 1224, 1224, 1224,    0,    0, 1224, 1226,
        0, 1226, 1226,    0, 1226,    0,    0, 1226, 1226,    0,
     1226, 1226, 1226, 1227,    0,    0, 1227,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1227, 1227, 1227, 1227, 1227, 1228, 1228,    0,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,

     1228, 1228, 1228, 1228, 1228, 1228, 1229,    0, 1229, 1229,
     1229, 1229, 1229,    0,    0, 1229, 1229, 1229, 1229, 1229,
        0,    0,    0, 1229, 1230,    0, 1230,    0, 1230, 1230,
     1230,    0,    0, 1230, 1230, 1230, 1230, 1230,    0,    0,
        0, 1230, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1232,    0, 1232, 1232,    0,    0, 1232,    0, 1232,
     1232, 1232,    0,    0,    0, 1232, 1233,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1233,

        0, 1233, 1233, 1233,    0,    0,    0, 1233, 1234, 1234,
     1234, 1234,    0,    0, 1234,    0,    0,    0,    0,    0,
        0, 1234,    0,    0, 1234,    0,    0, 1234,    0, 1234,
     1234, 1234,    0,    0, 1234, 1234, 1235, 1235, 1235, 1235,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1235,
        0, 1235, 1235,    0,    0, 1235,    0, 1235, 1235, 1235,
        0,    0,    0, 1235, 1236, 1236, 1236, 1236,    0,    0,
     1236,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1236,    0, 1236, 1236, 1236,    0,    0,
        0, 1236, 1237,    0,    0,    0, 1237,    0, 1237, 1237,

     1237,    0,    0,    0, 1237, 1238, 1238,    0, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1239,    0, 1239, 1239, 1239, 1239,
     1239,    0,    0, 1239, 1239, 1239, 1239, 1239,    0,    0,
        0, 1239, 1240,    0, 1240,    0, 1240, 1240, 1240,    0,
        0, 1240, 1240, 1240, 1240, 1240,    0,    0,    0, 1240,
     1241, 1241,    0, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1242,

     1242,    0, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1243,    0,
        0,    0,    0,    0, 1243,    0, 1243, 1243, 1243, 1243,
     1243, 1243,    0, 1243, 1243, 1243, 1243, 1243,    0,    0,
        0, 1243, 1244,    0, 1244,    0, 1244, 1244, 1244,    0,
        0, 1244, 1244, 1244, 1244, 1244,    0,    0,    0, 1244,
     1245, 1245, 1245, 1245,    0,    0, 1245,    0,    0,    0,
        0,    0,    0, 1245,    0,    0, 1245,    0,    0, 1245,
        0, 1245, 1245, 1245,    0,    0, 1245, 1245, 1246, 1246,

     1246, 1246,    0,    0,    0, 1246,    0,    0,    0,    0,
        0, 1246,    0, 1246, 1246,    0,    0, 1246,    0, 1246,
     1246, 1246,    0,    0,    0, 1246, 1247, 1247, 1247, 1247,
        0,    0, 1247,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1247,    0, 1247, 1247, 1247,
        0,    0,    0, 1247, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248,    0, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1249,    0,    0, 1249,    0,    0,    0,
     1249,    0,    0,    0,    0,    0,    0,    0, 1249,    0,

        0,    0, 1249,    0, 1249, 1249, 1249,    0,    0,    0,
     1249, 1250,    0,    0, 1250,    0,    0,    0, 1250,    0,
     1250, 1250, 1250,    0,    0,    0, 1250, 1251, 1251,    0,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1252, 1252,    0, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1253, 1253,    0, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1254,    0, 1254, 1254, 1254, 1254,
     1254,    0,    0, 1254, 1254, 1254, 1254, 1254,    0,    0,
        0, 1254, 1255,    0, 1255,    0, 1255, 1255, 1255,    0,
        0, 1255, 1255, 1255, 1255, 1255,    0,    0,    0, 1255,
     1256, 1256, 1256, 1256,    0,    0, 1256,    0,    0,    0,
        0,    0,    0,    0,    0, 1256, 1256,    0,    0, 1256,
        0, 1256, 1256, 1256,    0,    0,    0, 1256, 1257,    0,
     1257, 1257, 1257,    0,    0,    0, 1257, 1258, 1258, 1258,
     1258,    0,    0, 1258,    0,    0,    0,    0,    0,    0,

        0,    0, 1258, 1258,    0,    0, 1258,    0, 1258, 1258,
     1258,    0,    0,    0, 1258, 1259, 1259, 1259, 1259,    0,
        0, 1259,    0,    0,    0,    0,    0,    0, 1259,    0,
        0, 1259,    0,    0, 1259,    0, 1259, 1259, 1259,    0,
        0, 1259, 1259, 1260, 1260, 1260, 1260,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1260,    0, 1260, 1260,
        0,    0, 1260,    0, 1260, 1260, 1260,    0,    0,    0,
     1260, 1261, 1261, 1261, 1261,    0,    0, 1261,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1261,    0, 1261, 1261, 1261,    0,    0,    0, 1261, 1262,

        0,    0,    0, 1262,    0, 1262, 1262, 1262,    0,    0,
        0, 1262, 1263,    0, 1263,    0,    0,    0, 1263,    0,
     1263, 1263, 1263,    0,    0,    0, 1263, 1264,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1264,    0, 1264, 1264, 1264,    0,    0,    0, 1264, 1265,
     1265,    0, 1265,    0,    0,    0, 1265,    0, 1265, 1265,
     1265,    0,    0,    0, 1265, 1266, 1266,    0, 1266, 1266,
     1266, 1266, 1266, 1266, 1266,    0, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266,    0, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1267,    0,    0, 1267,    0,    0,

        0, 1267,    0, 1267, 1267, 1267,    0,    0,    0, 1267,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,    0,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1269,
     1269,    0, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,    0, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1270,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1270,    0, 1270, 1270, 1270,    0,    0,    0, 1270,
     1271,    0,    0, 1271,    0,    0,    0, 1271,    0, 1271,

     1271, 1271,    0,    0,    0, 1271, 1272, 1272,    0, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1273, 1273,    0, 1273,    0,
     1273, 1273, 1273, 1273, 1273,    0, 1273, 1273, 1273, 1273,
        0, 1273, 1273, 1273,    0, 1273,    0, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1274,    0,    0, 1274,    0,    0,
        0, 1274,    0, 1274, 1274, 1274,    0,    0,    0, 1274,
     1275, 1275,    0, 1275,    0, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,    0,

     1275,    0, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1276,
     1276,    0, 1276,    0, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,    0, 1276,
        0, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1277,    0,
        0, 1277,    0,    0,    0, 1277,    0, 1277, 1277, 1277,
        0,    0,    0, 1277, 1278, 1278,    0, 1278, 1278, 1278,
     1278, 1278,    0,    0, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278,    0, 1278,    0, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1279,    0, 1279, 1279,    0,    0, 1279,
        0, 1279, 1279, 1279,    0,    0,    0, 1279, 1280,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1280,    0, 1280, 1280, 1280,    0,    0,    0, 1280,
     1281,    0, 1281, 1281,    0,    0, 1281,    0, 1281, 1281,
     1281,    0,    0,    0, 1281, 1282,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1282,    0,
     1282, 1282, 1282,    0,    0,    0, 1282, 1283, 1283,    0,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283,    0, 1283,    0, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1284,    0,    0, 1284,
        0,    0,    0, 1284,    0, 1284, 1284, 1284,    0,    0,

        0, 1284, 1285, 1285,    0, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285,    0, 1285, 1285, 1285, 1285,
     1285, 1285, 1285,    0, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1286, 1286,    0, 1286, 1286, 1286, 1286, 1286, 1286,
     1286,    0, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
        0, 1286,    0, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1288,    0, 1288, 1288, 1288,    0,    0, 1288,    0, 1288,
     1288, 1288,    0,    0,    0, 1288, 1289, 1289,    0, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289,    0, 1289, 1289,

     1289, 1289, 1289, 1289, 1289, 1290, 1290,    0,    0, 1290,
        0, 1290, 1290, 1290,    0,    0,    0, 1290, 1291, 1291,
        0, 1291, 1291, 1291, 1291,    0, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1292, 1292,    0,
     1292,    0,    0,    0, 1292,    0, 1292, 1292, 1292, 1293,
        0, 1293, 1293,    0, 1293,    0,    0, 1293, 1293,    0,
     1293, 1293, 1293, 1294,    0,    0, 1294,    0, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,

     1294, 1294, 1295, 1295,    0, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1296,    0,    0, 1296,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1296,    0, 1296, 1296, 1296, 1298,    0,    0, 1298,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1298,    0, 1298, 1298, 1298, 1299,
     1299,    0, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,

     1299, 1299, 1299, 1299, 1299,    0, 1299, 1299, 1302,    0,
        0, 1302,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1302, 1302, 1302,
     1302, 1302, 1303,    0, 1303, 1303, 1303, 1303, 1303,    0,
        0, 1303, 1303, 1303, 1303, 1303,    0,    0,    0, 1303,
     1304,    0, 1304, 1304, 1304, 1304, 1304,    0,    0, 1304,
     1304, 1304, 1304, 1304,    0,    0,    0, 1304, 1305,    0,
     1305, 1305, 1305,    0,    0,    0, 1305, 1306,    0,    0,
        0, 1306,    0, 1306, 1306, 1306,    0,    0,    0, 1306,
     1307,    0, 1307, 1307, 1307, 1307, 1307,    0,    0, 1307,

     1307, 1307, 1307, 1307,    0,    0,    0, 1307, 1308,    0,
     1308, 1308, 1308, 1308, 1308,    0,    0, 1308, 1308, 1308,
     1308, 1308,    0,    0,    0, 1308, 1309, 1309,    0, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1310,    0,    0,    0,    0,
        0, 1310,    0, 1310, 1310, 1310, 1310, 1310, 1310,    0,
     1310, 1310, 1310, 1310, 1310,    0,    0,    0, 1310, 1311,
        0,    0,    0,    0,    0, 1311,    0, 1311, 1311, 1311,
     1311, 1311, 1311,    0, 1311, 1311, 1311, 1311, 1311,    0,

        0,    0, 1311, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1313,    0,    0, 1313,    0,    0,    0, 1313,
        0,    0,    0,    0,    0,    0,    0, 1313,    0,    0,
        0, 1313,    0, 1313, 1313, 1313,    0,    0,    0, 1313,
     1314,    0, 1314, 1314, 1314, 1314, 1314,    0,    0, 1314,
     1314, 1314, 1314, 1314,    0,    0,    0, 1314, 1315,    0,
     1315, 1315, 1315, 1315, 1315,    0,    0, 1315, 1315, 1315,
     1315, 1315,    0,    0,    0, 1315, 1316, 1316, 1316, 1316,

        0,    0, 1316,    0,    0,    0,    0,    0,    0,    0,
        0, 1316, 1316,    0,    0, 1316,    0, 1316, 1316, 1316,
        0,    0,    0, 1316, 1317, 1317, 1317, 1317,    0,    0,
     1317,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1317,    0,    0, 1317,    0, 1317, 1317, 1317,    0,    0,
        0, 1317, 1318, 1318, 1318, 1318,    0,    0, 1318,    0,
        0,    0,    0,    0,    0,    0,    0, 1318, 1318,    0,
        0, 1318,    0, 1318, 1318, 1318,    0,    0,    0, 1318,
     1319,    0,    0,    0, 1319,    0, 1319, 1319, 1319,    0,
        0,    0, 1319, 1320,    0, 1320, 1320, 1320,    0,    0,

        0, 1320, 1321,    0, 1321,    0,    0,    0, 1321,    0,
     1321, 1321, 1321,    0,    0,    0, 1321, 1322,    0, 1322,
     1322, 1322,    0,    0,    0, 1322, 1323,    0,    0,    0,
     1323,    0, 1323, 1323, 1323,    0,    0,    0, 1323, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324,    0, 1324, 1324, 1324,    0,
     1324,    0,    0, 1324, 1324, 1324, 1324, 1324, 1325,    0,
     1325, 1325, 1325,    0,    0,    0, 1325, 1326,    0, 1326,
     1326, 1326,    0,    0,    0, 1326, 1328, 1328,    0, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,

     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1329,    0,    0, 1329,    0,
        0,    0, 1329,    0, 1329, 1329, 1329, 1330,    0, 1330,
        0, 1330, 1330,    0, 1330,    0,    0, 1330, 1330,    0,
     1330, 1330, 1330, 1331, 1331,    0, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1333,    0,    0, 1333,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1333,    0, 1333, 1333, 1333, 1334, 1334,    0, 1334,

     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1335, 1335, 1335, 1335, 1335,
     1336,    0,    0, 1336,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1336,
     1336, 1336, 1336, 1336, 1337, 1337,    0, 1337,    0,    0,
        0,    0,    0,    0, 1337,    0, 1337, 1337,    0, 1337,
     1337,    0, 1337, 1337,    0, 1337, 1337, 1337, 1337, 1338,
        0, 1338, 1338, 1338, 1338, 1338,    0,    0, 1338, 1338,
     1338, 1338, 1338,    0,    0,    0, 1338, 1339,    0, 1339,

     1339, 1339, 1339, 1339,    0,    0, 1339, 1339, 1339, 1339,
     1339,    0,    0,    0, 1339, 1340, 1340,    0, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1341,    0,    0,    0,    0,    0,
     1341,    0, 1341, 1341, 1341, 1341, 1341, 1341,    0, 1341,
     1341, 1341, 1341, 1341,    0,    0,    0, 1341, 1342,    0,
     1342, 1342, 1342, 1342, 1342,    0,    0, 1342, 1342, 1342,
     1342, 1342,    0,    0,    0, 1342, 1343,    0, 1343, 1343,
     1343,    0,    0,    0, 1343, 1344, 1344, 1344, 1344,    0,

        0, 1344,    0,    0,    0,    0,    0,    0,    0,    0,
     1344, 1344,    0,    0, 1344,    0, 1344, 1344, 1344,    0,
        0,    0, 1344, 1345, 1345, 1345, 1345,    0,    0, 1345,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1345,
        0,    0, 1345,    0, 1345, 1345, 1345,    0,    0,    0,
     1345, 1346, 1346,    0, 1346,    0,    0,    0, 1346,    0,
     1346, 1346, 1346, 1347, 1347,    0, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348,    0, 1348,    0,    0,    0, 1348, 1348, 1348,
     1348, 1349, 1349, 1349, 1349,    0,    0, 1349,    0,    0,
        0,    0,    0,    0,    0,    0, 1349, 1349,    0,    0,
     1349,    0, 1349, 1349, 1349,    0,    0,    0, 1349, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350,    0, 1350, 1350, 1350,    0,
     1350,    0, 1350,    0, 1350, 1350, 1350, 1350, 1351, 1351,
        0, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,

     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352,    0, 1352, 1352, 1352,    0, 1352,    0,
        0,    0, 1352, 1352, 1352, 1352, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353,    0, 1353, 1353, 1353,    0, 1353,    0,    0,
        0, 1353, 1353, 1353, 1353, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354,    0, 1354, 1354, 1354,    0, 1354,    0,    0,    0,
     1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355, 1355, 1355,

     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
        0, 1355, 1355, 1355,    0, 1355,    0,    0,    0, 1355,
     1355, 1355, 1355, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136

    } ;

extern int commentScanYY_flex_debug;
int commentScanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentScanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2012 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"
#include "markdown.h"

#define YY_NO_INPUT 1

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleToc(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);
static bool handleCopyDoc(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             TRUE  },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "tableofcontents", &handleToc,              FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         &handleCopyDoc,          TRUE  },
  { "copybrief",       0,                       FALSE },
  { "copydetails",     0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  printf("Error: DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         g_sectionLabel;
static QCString		g_sectionTitle;
static int              g_sectionLevel;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static bool             g_spaceBeforeCmd;
static bool             g_spaceBeforeIf;
static QCString         g_copyDocArg;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  g_sectionLabel.resize(0);
  g_sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
}

//-----------------------------------------------------------------------------

static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default: 
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (getDocSectionName(current->section))
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentScanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (strcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    if (Doxygen::markdownSupport)
    {
      item->text += processMarkdown(yyFileName,current,outputXRef);
    }
    else
    {
      item->text += outputXRef;
    }
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    if (Doxygen::markdownSupport)
    {
      item->text = processMarkdown(yyFileName,current,outputXRef);
    }
    else
    {
      item->text = outputXRef;
    }
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si=new SectionInfo(listName,anchorLabel,
	                            g_sectionTitle,SectionInfo::Anchor,
                                    g_sectionLevel);
    Doxygen::sectionDict.append(anchorLabel,si);
    docEntry->anchors->append(si);
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict[fText])==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList.append(f);
    Doxygen::formulaDict.insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict.insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings 
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionInfo::SectionType)level;
  return SectionInfo::Anchor;
}

static void addSection()
{
  // create a new section element
  g_sectionTitle+=commentScanYYtext;
  g_sectionTitle=g_sectionTitle.stripWhiteSpace();
  SectionInfo *si = new SectionInfo(yyFileName,g_sectionLabel,
                          g_sectionTitle,sectionLevelToType(g_sectionLevel),g_sectionLevel);

  // add section to this entry
  current->anchors->append(si);

  // add section to the global dictionary
  Doxygen::sectionDict.append(g_sectionLabel,si);

}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentScanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string upto and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  //printf("addOutput(%s)\n",s);
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentScanYYtext);
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */








































#line 3803 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentScanYYlex_destroy (void );

int commentScanYYget_debug (void );

void commentScanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentScanYYget_extra (void );

void commentScanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentScanYYget_in (void );

void commentScanYYset_in  (FILE * in_str  );

FILE *commentScanYYget_out (void );

void commentScanYYset_out  (FILE * out_str  );

yy_size_t commentScanYYget_leng (void );

char *commentScanYYget_text (void );

int commentScanYYget_lineno (void );

void commentScanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentScanYYwrap (void );
#else
extern int commentScanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( commentScanYYtext, commentScanYYleng, 1, commentScanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentScanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentScanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentScanYYin))==0 && ferror(commentScanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentScanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentScanYYlex (void);

#define YY_DECL int commentScanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentScanYYtext and commentScanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentScanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentScanYYtext[commentScanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 920 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail adress (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4048 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentScanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentScanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentScanYYin )
			commentScanYYin = stdin;

		if ( ! commentScanYYout )
			commentScanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentScanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
		}

		commentScanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentScanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1137 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8724 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 939 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 942 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 945 "commentscan.l"
{ // mail adress
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 948 "commentscan.l"
{ // quoted text
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 951 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 954 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 971 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 976 "commentscan.l"
{ // HTML command that ends a brief description
					  if (current->lang==SrcLangExt_CSharp)
                                          {
                                            setOutput(OutputDoc);
                                          }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 984 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 988 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 992 "commentscan.l"
{ // start of a .NET XML style detailed description
                                          addOutput(commentScanYYtext);
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 996 "commentscan.l"
{ // end of a brief or detailed description
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 999 "commentscan.l"
{
                                          insidePre=TRUE;
                                          addOutput(commentScanYYtext);
                                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1003 "commentscan.l"
{
                                          insidePre=FALSE;
                                          addOutput(commentScanYYtext);
                                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1007 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1011 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1014 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: found \\endinternal without matching \\internal"
                                              );
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1019 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentScanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  g_spaceBeforeCmd = commentScanYYtext[0]==' ' || commentScanYYtext[0]=='\t';
					  if (cmdPtr) // special action is required
					  {
					    if (cmdPtr->endsBrief)
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
                                            int i=0;
                                            while (commentScanYYtext[i]==' ' || commentScanYYtext[i]=='\t') i++;
                                            if (i>0) addOutput(QCString(commentScanYYtext).left(i));
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
#else
					      inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf;
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentScanYYtext+i);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentScanYYtext);
					  }
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1065 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1068 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentScanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1076 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentScanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1088 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1093 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1098 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1102 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
				          inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + strlen(commentScanYYtext);
#else
				          inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf + strlen(commentScanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1115 "commentscan.l"
{ // escaped character
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1118 "commentscan.l"
{ // normal word
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1121 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentScanYYtext); 
					}
	YY_BREAK
case 29:
#line 1125 "commentscan.l"
case 30:
YY_RULE_SETUP
#line 1125 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (inContext!=OutputXRef) 
                                            {
                                              briefEndsAtDot=FALSE;
                                              setOutput(OutputDoc);
                                            }
                                            addOutput(commentScanYYtext); 
                                          }
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1140 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentScanYYtext); 
  					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1148 "commentscan.l"
{ // horizontal line (dashed)
  				          addOutput(commentScanYYtext); 
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1151 "commentscan.l"
{ // mdash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentScanYYtext : "&mdash;");
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1154 "commentscan.l"
{ // ndash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentScanYYtext : "&ndash;");
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1157 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1160 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentScanYYtext[0]);
  					  addOutput(commentScanYYtext[2]);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1164 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1167 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1170 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 1173 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    setOutput(OutputDoc);
  					    addOutput("\n\n");
					  }
					  else if (inContext!=OutputBrief)
					  {
  					    addOutput("\n\n");
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1192 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentScanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 1200 "commentscan.l"
{ // newline
  					  addOutput(*commentScanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1204 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 44:
YY_RULE_SETUP
#line 1211 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1212 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1215 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1217 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 48:
YY_RULE_SETUP
#line 1222 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1227 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1232 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1238 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentScanYYtext; 
 					} 
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 1241 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentScanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1246 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentScanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1252 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1256 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1260 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1268 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1273 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1277 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1281 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1290 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 62:
YY_RULE_SETUP
#line 1295 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1299 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1303 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1312 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1317 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1326 "commentscan.l"
{
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1330 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1334 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1343 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1346 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentScanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1350 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1354 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1359 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1362 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentScanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1366 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1370 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1374 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 79:
YY_RULE_SETUP
#line 1379 "commentscan.l"
{ // group name
  					  current->name = commentScanYYtext;
					  //lastDefGroup.groupname = commentScanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1391 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1395 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1404 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1408 "commentscan.l"
{ // title (stored in type)
					  current->type += commentScanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1412 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "warning: missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 85:
YY_RULE_SETUP
#line 1429 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1433 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1436 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\page."
                                              );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1445 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1447 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentScanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1456 "commentscan.l"
{ // no file name specfied
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1461 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1465 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1468 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 94:
YY_RULE_SETUP
#line 1473 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentScanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1478 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1482 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "warning: Missing first argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1491 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1494 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentScanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1498 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1502 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing second argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1511 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1514 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentScanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1519 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1523 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing third argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1532 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 106:
YY_RULE_SETUP
#line 1538 "commentscan.l"
{ // argument
  					  current->relates = commentScanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentScanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1546 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1550 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1558 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 1564 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1569 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1573 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 113:
YY_RULE_SETUP
#line 1579 "commentscan.l"
{ // first argyment
  					  g_sectionLabel=commentScanYYtext;
                                          addOutput(commentScanYYtext);
					  g_sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1585 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\section command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1593 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1599 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 117:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1604 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1609 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1613 "commentscan.l"
{ // any character without special meaning
  					  g_sectionTitle+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1617 "commentscan.l"
{ // unescape escaped command
  					  g_sectionTitle+=&commentScanYYtext[1];
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1621 "commentscan.l"
{ // unescape escaped character
  					  g_sectionTitle+=commentScanYYtext[1];
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1625 "commentscan.l"
{ // anything else
  					  g_sectionTitle+=commentScanYYtext;
					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 123:
YY_RULE_SETUP
#line 1632 "commentscan.l"
{ // first argument
                                          addOutput(commentScanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentScanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1639 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\subpage command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1647 "commentscan.l"
{ // no title, end command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1651 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1655 "commentscan.l"
{ // no title, end of command
  					  unput(*commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 128:
YY_RULE_SETUP
#line 1662 "commentscan.l"
{ // found argument
                                          SectionInfo  *si = new SectionInfo(yyFileName,commentScanYYtext,0,SectionInfo::Anchor,0);
                                          Doxygen::sectionDict.append(commentScanYYtext,si);
  					  current->anchors->append(si);
					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1669 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\anchor command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1677 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 131:
/* rule 131 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1687 "commentscan.l"
{ // possible ends
  					  addOutput(commentScanYYtext);
					  if (&commentScanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1694 "commentscan.l"
{ // some word
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1697 "commentscan.l"
{ // new line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1701 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1705 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentScanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "warning: found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1714 "commentscan.l"
{
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1717 "commentscan.l"
{
                                          warn(yyFileName,yyLineNr,
	                                    "warning: reached end of comment while inside a @%s block; check for missing @end%s tag!",
	                                    blockName.data(),blockName.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 137:
YY_RULE_SETUP
#line 1727 "commentscan.l"
{ // parameter of if/ifnot guard
                                          bool sectionEnabled = Config_getList("ENABLED_SECTIONS").find(commentScanYYtext)!=-1;
					  bool parentEnabled = TRUE;
					  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
					  if (parentEnabled)
					  {
					    if (
						(sectionEnabled && guardType==Guard_If) ||  
						(!sectionEnabled && guardType==Guard_IfNot)
					       ) // section is visible
					    {
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					    else // section is invisible
					    {
					      if (guardType!=Guard_Skip)
					      {
					      	guards.push(new GuardedSection(FALSE,TRUE));
					      }
					      BEGIN( SkipGuardedSection );
					    }
					  }
					  else // invisible because of parent
					  {
					    guards.push(new GuardedSection(FALSE,FALSE));
					    BEGIN( SkipGuardedSection );
					  }
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1757 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1763 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1767 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1770 "commentscan.l"
{
  					  g_spaceBeforeIf=FALSE;
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1774 "commentscan.l"
{
  					  if (g_spaceBeforeIf) // needed for 665313 in combation with bug620924
					  {
					    addOutput(" ");
					  }
  					  g_spaceBeforeIf=FALSE;
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1782 "commentscan.l"
{
  					  unput(*commentScanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 144:
/* rule 144 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1789 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 145:
/* rule 145 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1793 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 146:
/* rule 146 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1797 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @endif without matching start command");
					  }
					  else
					  {
					    delete guards.pop();
					    BEGIN( GuardParamEnd );
					  }
  					}
	YY_BREAK
case 147:
/* rule 147 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1809 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1826 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 1841 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1845 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1847 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1853 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 153:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1857 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 154:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1860 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 155:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1863 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 156:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1871 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 157:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1878 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 158:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1885 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 159:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1892 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1899 "commentscan.l"
{
					  BEGIN(Comment);
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1902 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1904 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 1910 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 1915 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1920 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentScanYYtext;
					  current->name+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 166:
YY_RULE_SETUP
#line 1927 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentScanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 1933 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "warning: Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 1944 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1948 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 1954 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentScanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 1963 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1967 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentScanYYtext;
  					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1970 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1974 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1978 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 1986 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 2000 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2004 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 179:
YY_RULE_SETUP
#line 2010 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 2016 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\inherit command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2024 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 182:
YY_RULE_SETUP
#line 2033 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 2039 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\extends or \\implements command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2047 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 185:
YY_RULE_SETUP
#line 2052 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentScanYYtext[2];
				     if (langId.isEmpty() ||
					 stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2060 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 2062 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentScanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2065 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 189:
YY_RULE_SETUP
#line 2070 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentScanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 2075 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\cite command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 2083 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2092 "commentscan.l"
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 2093 "commentscan.l"
{
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  setOutput(OutputDoc);
                                          addOutput("\\copydetails ");
					  addOutput(g_copyDocArg);
					  addOutput("\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 2102 "commentscan.l"
{
  					  g_copyDocArg+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2106 "commentscan.l"
{
  					  g_copyDocArg+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2112 "commentscan.l"
ECHO;
	YY_BREAK
#line 6177 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentScanYYin at a new source and called
			 * commentScanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentScanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentScanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentScanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentScanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentScanYYrestart(commentScanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentScanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1137 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1137 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1136);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentScanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentScanYYrestart(commentScanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentScanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentScanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentScanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentScanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
	}

	commentScanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentScanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentScanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentScanYYpop_buffer_state();
	 *		commentScanYYpush_buffer_state(new_buffer);
     */
	commentScanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentScanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentScanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentScanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentScanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentScanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentScanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentScanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentScanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentScanYY_create_buffer()
 * 
 */
    void commentScanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentScanYYfree((void *) b->yy_ch_buf  );

	commentScanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentScanYYrestart() or at EOF.
 */
    static void commentScanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentScanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentScanYY_init_buffer was _probably_
     * called from commentScanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentScanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentScanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentScanYYensure_buffer_stack();

	/* This block is copied from commentScanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentScanYY_switch_to_buffer. */
	commentScanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentScanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentScanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentScanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentScanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentScanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentScanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentScanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentScanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char * yystr )
{
    
	return commentScanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentScanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentScanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentScanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentScanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentScanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentScanYYtext[commentScanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentScanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentScanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentScanYYget_lineno  (void)
{
        
    return commentScanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentScanYYget_in  (void)
{
        return commentScanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentScanYYget_out  (void)
{
        return commentScanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentScanYYget_leng  (void)
{
        return commentScanYYleng;
}

/** Get the current token.
 * 
 */

char *commentScanYYget_text  (void)
{
        return commentScanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentScanYYset_lineno (int  line_number )
{
    
    commentScanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentScanYY_switch_to_buffer
 */
void commentScanYYset_in (FILE *  in_str )
{
        commentScanYYin = in_str ;
}

void commentScanYYset_out (FILE *  out_str )
{
        commentScanYYout = out_str ;
}

int commentScanYYget_debug  (void)
{
        return commentScanYY_flex_debug;
}

void commentScanYYset_debug (int  bdebug )
{
        commentScanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentScanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentScanYYin = stdin;
    commentScanYYout = stdout;
#else
    commentScanYYin = (FILE *) 0;
    commentScanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentScanYYlex_init()
     */
    return 0;
}

/* commentScanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentScanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentScanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentScanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentScanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentScanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentScanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentScanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentScanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentScanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentScanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2112 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  newXRefKind = XRef_Item;
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\subpage command in a comment block that is not marked as a page!");
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleToc(const QCString &)
{
  if (current->section==Entry::PAGEDOC_SEC || 
      current->section==Entry::MAINPAGEDOC_SEC)
  {
    current->stat=TRUE;  // we 'abuse' stat to pass whether or the TOC is enabled
  }
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyDoc(const QCString &)
{
  setOutput(OutputBrief);
  addOutput("\\copybrief ");
  g_copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"warning: End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;
  g_spaceBeforeCmd = FALSE;
  g_spaceBeforeIf  = FALSE;

  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentScanYYrestart( commentScanYYin );
  BEGIN( Comment );
  commentScanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc,current->docLine);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  if (Doxygen::markdownSupport)
  {
    current->brief      = processMarkdown(fileName,current,current->brief);
    current->doc        = processMarkdown(fileName,current,current->doc);
    current->inbodyDocs = processMarkdown(fileName,current,current->inbodyDocs);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
	       current->briefLine,current->brief.data(),
               current->docLine,current->doc.data(),
               current->inbodyLine,current->inbodyDocs.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d\n",position,parseMore);

  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"warning: end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"warning: try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	stricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc,e->docLine);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}


#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentScanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


