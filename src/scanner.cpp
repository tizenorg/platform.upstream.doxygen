
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scanYY_create_buffer
#define yy_delete_buffer scanYY_delete_buffer
#define yy_flex_debug scanYY_flex_debug
#define yy_init_buffer scanYY_init_buffer
#define yy_flush_buffer scanYY_flush_buffer
#define yy_load_buffer_state scanYY_load_buffer_state
#define yy_switch_to_buffer scanYY_switch_to_buffer
#define yyin scanYYin
#define yyleng scanYYleng
#define yylex scanYYlex
#define yylineno scanYYlineno
#define yyout scanYYout
#define yyrestart scanYYrestart
#define yytext scanYYtext
#define yywrap scanYYwrap
#define yyalloc scanYYalloc
#define yyrealloc scanYYrealloc
#define yyfree scanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scanYYrestart(scanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t scanYYleng;

extern FILE *scanYYin, *scanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scanYYrestart()), so that the user can continue scanning by
	 * just pointing scanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t scanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scanYYwrap()'s to do buffer switches
 * instead of setting up a fresh scanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scanYYrestart (FILE *input_file  );
void scanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scanYY_create_buffer (FILE *file,int size  );
void scanYY_delete_buffer (YY_BUFFER_STATE b  );
void scanYY_flush_buffer (YY_BUFFER_STATE b  );
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scanYYpop_buffer_state (void );

static void scanYYensure_buffer_stack (void );
static void scanYY_load_buffer_state (void );
static void scanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *scanYYalloc (yy_size_t  );
void *scanYYrealloc (void *,yy_size_t  );
void scanYYfree (void *  );

#define yy_new_buffer scanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scanYYin = (FILE *) 0, *scanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int scanYYlineno;

int scanYYlineno = 1;

extern char *scanYYtext;
#define yytext_ptr scanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scanYYleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 680
#define YY_END_OF_BUFFER 681
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[5037] =
    {   0,
       40,   40,  353,  353,  353,  353,  353,  353,  350,  350,
       51,   51,   57,   57,  410,  410,  410,  410,  681,  675,
      680,  670,  680,  671,  674,  675,  680,  672,  675,  680,
      673,  675,  680,  675,  680,  675,  680,  221,  675,  680,
      227,  675,  680,  227,  675,  680,  222,  670,  680,  226,
      227,  671,  674,  675,  680,  227,  672,  675,  680,  227,
      673,  675,  680,  227,  675,  680,  227,  675,  680,  675,
      680,  670,  680,  675,  680,  675,  680,  675,  680,  675,
      680,  527,  675,  680,  528,  675,  680,  538,  539,  675,
      680,16920,16921,  567,  675,  680,  675,  680,  675,  680,

      670,  680,  675,  680,  675,  680,  675,  680,  561,  675,
      680,  544,  675,  680,  566,  675,  680,  541,  675,  680,
      675,  680,  560,  675,  680,  580,  675,  680,  675,  680,
      543,  675,  680,  543,  675,  680,  543,  675,  680,  555,
      675,  680,  554,  670,  680,  555,  671,  674,  675,  680,
      547,  555,  672,  675,  680,  555,  675,  680,  555,  673,
      675,  680,  555,  675,  680,  550,  555,  675,  680,  549,
      555,  675,  680,  551,  555,  675,  680,  555,  675,  680,
      553,  555,  675,  680,  553,  555,  675,  680,  548,  555,
      675,  680,  675,  680,  675,  680,  559,  675,  680,  556,

      675,  680,  534,  675,  680,  534,  671,  674,  675,  680,
      534,  672,  675,  680,  534,  673,  675,  680,  159,  534,
      675,  680,  160,  534,  675,  680,  534,  675,  680,  533,
      534,  675,  680,  532,  534,  675,  680,   41,  675,  680,
       40,   41,  675,  680,   39,  670,  680,   41,  671,  674,
      675,  680,   41,  672,  675,  680,   41,  675,  680,   41,
      673,  675,  680,   41,  675,  680,   38,   41,  675,  680,
       35,   41,  675,  680,   36,   41,  675,  680,   37,   41,
      675,  680,   43,  675,  680,   43,  671,  674,  675,  680,
       43,  672,  675,  680,   43,  673,  675,  680,   43,  675,

      680,   42,   43,  675,  680,  470,  675,  680,  469,  670,
      680,  470,  671,  674,  675,  680,  470,  672,  675,  680,
      470,  675,  680,  470,  673,  675,  680,  470,  675,  680,
      467,  470,  675,  680,  468,  470,  675,  680,  675,  680,
      670,  680,  675,  680,  675,  680,  597,  675,  680,  675,
      680,  581,  675,  680,  597,  675,  680,  575,  576,  577,
      675,  680,  675,  680,  598,  675,  680,  574,  675,  680,
      573,  574,  675,  680,  573,  670,  680,  574,  671,  674,
      675,  680,  574,  672,  675,  680,  574,  673,  675,  680,
      574,  675,  680,  574,  675,  680,  574,  675,  680,  574,

      675,  680,    9,  671,  674,  675,  680,    7,  673,  675,
      680,    2,  675,  680,   10,  675,  680,   10,  675,  680,
        1,  675,  680,  315,  675,  680,  315,  671,  674,  675,
      680,  315,  672,  675,  680,  315,  673,  675,  680,   11,
      315,  675,  680,  315,  675,  680,   11,  315,  675,  680,
      316,  675,  680,  317,  670,  680,  316,  671,  674,  675,
      680,  316,  672,  675,  680,  316,  673,  675,  680,   12,
      316,  675,  680,  316,  675,  680,   12,  316,  675,  680,
       12,  316,  675,  680,   61,  675,  680,   61,  670,  680,
       61,  675,  680,  675,  680,  211,  672,  675,  680,  675,

      680,  229,  675,  680,  230,  675,  680,  406,  675,  680,
       47,  675,  680,  318,  675,  680,  197,  675,  680,  675,
      680,  675,  680,  314,  675,  680,  318,  675,  680,  340,
      675,  680,  236,  675,  680,  675,  680,  675,  680,  188,
      675,  680,  188,  675,  680,  319,  675,  680,  229,  675,
      680,  188,  675,  680,  188,  675,  680,  188,  675,  680,
      188,  675,  680,  188,  675,  680,  188,  675,  680,  188,
      675,  680,  188,  675,  680,  188,  675,  680,  188,  675,
      680,  188,  675,  680,  188,  675,  680,  188,  675,  680,
      188,  675,  680,  188,  675,  680,  188,  675,  680,  188,

      675,  680,  188,  675,  680,  616,  675,  680,   16,   18,
      675,  680,   17,  670,  680,   16,   18,  671,  674,  675,
      680,   16,   18,  672,  675,  680,   16,   18,  673,  675,
      680,   16,   18,  675,  680,   18,  675,  680,  675,  680,
      670,  680,  675,  680,  675,  680,  675,  680,  188,  675,
      680,  675,  680,  670,  680,  675,  680,  211,  672,  675,
      680,  675,  680,  346,  675,  680,  351,  675,  680,  675,
      680,  348,  675,  680,  347,  675,  680,  345,  675,  680,
      352,  675,  680,  675,  680,  465,  672,  675,  680,  496,
      675,  680,  498,  675,  680,  497,  675,  680,  498,  675,

      680,  483,  675,  680,  464,  483,  675,  680,  464,  670,
      680,  483,  671,  674,  675,  680,  465,  483,  672,  675,
      680,  483,  673,  675,  680,  445,  483,  675,  680,  446,
      483,  675,  680,  463,  483,  675,  680,  483,  675,  680,
      491,  675,  680,  491,  671,  674,  675,  680,  491,  672,
      675,  680,  491,  673,  675,  680,  489,  491,  675,  680,
      490,  491,  675,  680,  491,  675,  680,  495,  675,  680,
      494,  670,  680,  495,  671,  674,  675,  680,  495,  672,
      675,  680,  495,  673,  675,  680,  495,  675,  680,  493,
      495,  675,  680,  492,  495,  675,  680,  464,  483,  675,

      680,  464,  670,  680,  483,  675,  680,  447,  483,  675,
      680,  483,  675,  680,  483,  675,  680,  466,  483,  675,
      680,  478,  483,  675,  680,  478,  483,  675,  680,  478,
      483,  675,  680,  478,  483,  675,  680,  478,  483,  675,
      680,  478,  483,  675,  680,  478,  483,  675,  680,  478,
      483,  675,  680,  478,  483,  675,  680,  478,  483,  675,
      680,  461,  675,  680,  461,  675,  680,  462,  670,  680,
      461,  671,  674,  675,  680,  461,  672,  675,  680,  461,
      673,  675,  680,  461,  675,  680,  460,  461,  675,  680,
      461,  675,  680,  461,  675,  680,  461,  675,  680,  124,

      675,  680,  124,  670,  680,  124,  671,  674,  675,  680,
      124,  672,  675,  680,  124,  673,  675,  680,  126,  675,
      680,  124,  675,  680,  123,  124,  675,  680,  124,  675,
      680,  335,  675,  680,  335,  671,  674,  675,  680,  335,
      672,  675,  680,  335,  673,  675,  680,  335,  675,  680,
      334,  335,  675,  680,  332,  335,  675,  680,  353,  378,
      675,  680,  353,  376,  378,  675,  680,  376,  670,  680,
      376,  378,  675,  680,  358,  378,  671,  674,  675,  680,
      355,  378,  672,  675,  680,  361,  378,  673,  675,  680,
      378,  675,  680,  378,  675,  680,  378,  675,  680,  363,

      378,  675,  680,  365,  378,  675,  680,  365,  378,  675,
      680,  378,  675,  680,  364,  378,  675,  680,  675,  680,
      147,  675,  680,  142,  675,  680,  141,  675,  680,  141,
      675,  680,  144,  675,  680,  145,  670,  680,  144,  671,
      674,  675,  680,  144,  672,  675,  680,  144,  673,  675,
      680,  144,  675,  680,  143,  144,  675,  680,  675,  680,
      670,  680,  675,  680,  675,  680,  675,  680,  146,  675,
      680,  509,  520,  675,  680,  509,  520,  675,  680,  507,
      670,  680,  505,  520,  671,  674,  675,  680,  516,  520,
      672,  675,  680,  519,  520,  673,  675,  680,  520,  675,

      680,  520,  675,  680,  520,  675,  680,  520,  675,  680,
      500,  520,  675,  680,  501,  520,  675,  680,  509,  520,
      675,  680,  506,  516,  520,  672,  675,  680,  510,  670,
      680,  520,  671,  674,  675,  680,  520,  675,  680,  520,
      675,  680,  504,  675,  680,  526,  675,  680,  525,  670,
      680,  522,  526,  671,  674,  675,  680,  526,  672,  675,
      680,  526,  673,  675,  680,  526,  675,  680,  526,  675,
      680,  526,  675,  680,  526,  671,  674,  675,  680,  523,
      526,  673,  675,  680,  514,  520,  671,  674,  675,  680,
      516,  520,  672,  675,  680,  520,  675,  680,  515,  520,

      675,  680,  499,  520,  675,  680,  217,  675,  680,  219,
      670,  680,  217,  675,  680,  217,  671,  674,  675,  680,
      217,  672,  675,  680,  217,  673,  675,  680,  217,  675,
      680,  217,  675,  680,  669,  675,  680,  669,  675,  680,
      669,  671,  674,  675,  680,  669,  672,  675,  680,  669,
      673,  675,  680,  675,  680,  669,  675,  680,  675,  680,
      668,  670,  680,  671,  674,  675,  680,  672,  675,  680,
      673,  675,  680,  675,  680,  675,  680,    5,  675,  680,
        6,  675,  680,    3,  675,  680,    4,  675,  680,  344,
      675,  680,  343,  344,  675,  680,  343,  670,  680,  344,

      671,  674,  675,  680,  344,  672,  675,  680,  344,  673,
      675,  680,  344,  675,  680,  342,  344,  675,  680,  341,
      344,  675,  680,  592,  675,  680,  593,  675,  680,  596,
      671,  674,  675,  680,  594,  675,  680,  595,  675,  680,
      339,  675,  680,  338,  671,  674,  675,  680,  339,  672,
      675,  680,  339,  673,  675,  680,  339,  675,  680,  336,
      675,  680,  337,  675,  680,  350,  675,  680,  349,  670,
      680,  350,  671,  674,  675,  680,  350,  672,  675,  680,
      350,  673,  675,  680,  350,  675,  680,  191,  675,  680,
      190,  191,  675,  680,  190,  670,  680,  191,  671,  674,

      675,  680,  191,  672,  675,  680,  191,  673,  675,  680,
      189,  191,  675,  680,  191,  675,  680,  194,  675,  680,
      193,  194,  675,  680,  193,  670,  680,  194,  671,  674,
      675,  680,  194,  672,  675,  680,  194,  673,  675,  680,
      192,  194,  675,  680,  194,  675,  680,  675,  680,  369,
      675,  680,  368,  675,  680,  368,  675,  680,  368,  675,
      680,  206,  675,  680,  204,  670,  680,  206,  671,  674,
      675,  680,  206,  672,  675,  680,  206,  673,  675,  680,
      206,  675,  680,  205,  206,  675,  680,  209,  675,  680,
      209,  675,  680,  208,  670,  680,  209,  671,  674,  675,

      680,  209,  672,  675,  680,  209,  673,  675,  680,  209,
      675,  680,  209,  675,  680,  608,  610,  675,  680,  603,
      610,  675,  680,  603,  670,  680,  608,  610,  671,  674,
      675,  680,  608,  610,  672,  675,  680,  608,  610,  673,
      675,  680,  610,  675,  680,  610,  675,  680,  610,  675,
      680,  608,  610,  675,  680,  675,  680,   78,  675,  680,
       77,  675,  680,   79,  675,  680,  675,  680,  675,  680,
      675,  680,  136,  675,  680,  133,  675,  680,16516,  675,
      680,  670,  680,  675,  680,  135,  675,  680,  624,  675,
      680,  625,  670,  680,  624,  671,  674,  675,  680,  624,

      672,  675,  680,  624,  673,  675,  680,  624,  675,  680,
      624,  675,  680,  624,  675,  680,  624,  675,  680,  624,
      675,  680,  617,  624,  675,  680,  618,  624,  675,  680,
      530,  675,  680,  215,  675,  680,  216,  670,  680,  215,
      671,  674,  675,  680,  215,  672,  675,  680,  215,  673,
      675,  680,  215,  675,  680,  675,  680,  675,  680,  224,
      675,  680,  224,  671,  674,  675,  680,  224,  672,  675,
      680,  224,  673,  675,  680,  224,  675,  680,  223,  224,
      675,  680,  482,  675,  680,  482,  675,  680,  482,  671,
      674,  675,  680,  482,  672,  675,  680,  482,  675,  680,

      482,  673,  675,  680,  479,  482,  675,  680,  482,  675,
      680,  479,  482,  675,  680,  480,  482,  675,  680,  481,
      482,  675,  680,  259,  263,  675,  680,  262,  670,  680,
      261,  263,  671,  674,  675,  680,  259,  263,  672,  675,
      680,  259,  263,  673,  675,  680,  259,  263,  675,  680,
      675,  680,   48,  675,  680,   50,  675,  680,   59,  675,
      680,   49,  675,  680,   60,  675,  680,   51,  675,  680,
       51,  670,  680,   51,  671,  674,  675,  680,   51,  672,
      675,  680,   51,  673,  675,  680,   52,  675,  680,   51,
      675,  680,  675,  680,   56,  675,  680,  675,  680,   53,

      675,  680,   54,  675,  680,   57,  675,  680,   57,  670,
      680,   57,  671,  674,  675,  680,   57,  672,  675,  680,
       57,  673,  675,  680,   58,  675,  680,   57,  675,  680,
      531,  675,  680,   74,  675,  680,  675,  680,  675,  680,
      675,  680,  675,  680,  675,  680,  675,  680,  675,  680,
      675,  680,   76,  675,  680,  177,  675,  680,  675,  680,
      174,  675,  680,  178,  675,  680,  178,  675,  680,  178,
      675,  680,  675,  680,  179,  675,  680,  175,  675,  680,
      675,  680,  675,  680,  675,  680,  675,  680,  675,  680,
      185,  675,  680,  675,  680,  186,  675,  680,  265,  675,

      680,  265,  675,  680,  257,  670,  680,  249,  265,  671,
      674,  675,  680,  265,  672,  675,  680,  255,  265,  673,
      675,  680,  237,  253,  265,  675,  680,  254,  265,  675,
      680,  239,  265,  675,  680,  265,  675,  680,  265,  675,
      680,  239,  265,  675,  680,  253,  265,  675,  680,  254,
      265,  675,  680,  265,  675,  680,  265,  675,  680,  265,
      675,  680,  265,  675,  680,  253,  265,  675,  680,  265,
      675,  680,  238,  253,  265,  675,  680,  675,  680,  670,
      680,  675,  680,  675,  680,  675,  680,  210,  675,  680,
      675,  680,  670,  680,  675,  680,  675,  680,  371,  675,

      680,  372,  675,  680,  675,  680,  372,  675,  680,  373,
      675,  680,  370,  675,  680,  374,  675,  680,  375,  675,
      680,  161,  675,  680,  161,  671,  674,  675,  680,  161,
      672,  675,  680,  161,  673,  675,  680,  159,  161,  675,
      680,  160,  161,  675,  680,  161,  675,  680,  153,  161,
      675,  680,  155,  161,  675,  680,16541,  382,  675,  680,
      382,  675,  680,  670,  680,  382,  675,  680,  382,  671,
      674,  675,  680,  382,  672,  675,  680,  382,  675,  680,
      382,  673,  675,  680,  382,  675,  680,  382,  675,  680,
      381,  382,  675,  680,  386,  675,  680,  384,  670,  680,

      386,  671,  674,  675,  680,  386,  672,  675,  680,  386,
      673,  675,  680,  385,  386,  675,  680,  386,  675,  680,
      390,  675,  680,  392,  675,  680,  675,  680,  407,  444,
      675,  680,  410,  444,  675,  680,  410,  443,  670,  680,
      412,  444,  671,  674,  675,  680,  444,  672,  675,  680,
      442,  444,  673,  675,  680,  413,  444,  675,  680,  414,
      444,  675,  680,  444,  675,  680,  407,  444,  675,  680,
      407,  444,  675,  680,  407,  444,  675,  680,  444,  675,
      680,  432,  444,  675,  680,  433,  444,  675,  680,  444,
      675,  680,  444,  675,  680,  444,  675,  680,  203,  675,

      680,  202,  670,  680,  203,  671,  674,  675,  680,  203,
      672,  675,  680,  203,  673,  675,  680,  203,  675,  680,
      201,  203,  675,  680,  675,  680,  129,  675,  680,  675,
      680,  131,  675,  680,  130,  675,  680,  271,  675,  680,
      270,  670,  680,  267,  271,  671,  674,  675,  680,  271,
      672,  675,  680,  271,  673,  675,  680,  271,  675,  680,
      271,  675,  680,  271,  675,  680,  271,  671,  674,  675,
      680,  268,  271,  673,  675,  680,  277,  675,  680,  276,
      670,  680,  273,  277,  671,  674,  675,  680,  277,  672,
      675,  680,  277,  673,  675,  680,  277,  675,  680,  277,

      675,  680,  277,  675,  680,  277,  671,  674,  675,  680,
      274,  277,  673,  675,  680,  284,  285,  675,  680,  281,
      670,  680,  278,  285,  671,  674,  675,  680,  284,  285,
      672,  675,  680,  282,  285,  673,  675,  680,  279,  285,
      675,  680,  280,  285,  675,  680,  284,  285,  675,  680,
      299,  302,  675,  680,  301,  670,  680,  294,  302,  671,
      674,  675,  680,  299,  302,  672,  675,  680,  295,  302,
      673,  675,  680,  300,  302,  675,  680,  296,  302,  675,
      680,  297,  302,  675,  680,  292,  293,  675,  680,  289,
      670,  680,  286,  293,  671,  674,  675,  680,  292,  293,

      672,  675,  680,  290,  293,  673,  675,  680,  287,  293,
      675,  680,  288,  293,  675,  680,  293,  675,  680,  310,
      313,  675,  680,  312,  670,  680,  305,  313,  671,  674,
      675,  680,  310,  313,  672,  675,  680,  306,  313,  673,
      675,  680,  311,  313,  675,  680,  307,  313,  675,  680,
      308,  313,  675,  680,  310,  313,  672,  675,  680,  602,
      675,  680,  602,  675,  680,  601,  670,  680,  602,  671,
      674,  675,  680,  602,  672,  675,  680,  602,  673,  675,
      680,  599,  602,  675,  680,  600,  602,  675,  680,  602,
      675,  680,  591,  675,  680,  584,  591,  675,  680,  584,

      670,  680,  591,  671,  674,  675,  680,  591,  672,  675,
      680,  591,  673,  675,  680,  589,  591,  675,  680,  590,
      591,  675,  680,  591,  675,  680,  582,  591,  675,  680,
      583,  591,  675,  680,  591,  675,  680,  476,  675,  680,
      477,  670,  680,  472,  476,  671,  674,  675,  680,  476,
      672,  675,  680,  476,  675,  680,  473,  476,  673,  675,
      680,  476,  675,  680,  471,  476,  675,  680,  475,  476,
      675,  680,  393,  483,  675,  680,  394,  483,  675,  680,
      398,  675,  680,  398,  671,  674,  675,  680,  398,  672,
      675,  680,  398,  673,  675,  680,  398,  675,  680,  398,

      675,  680,  403,  675,  680,  402,  403,  675,  680,  402,
      670,  680,  403,  671,  674,  675,  680,  403,  672,  675,
      680,  403,  673,  675,  680,  399,  403,  675,  680,  400,
      403,  675,  680,  401,  403,  675,  680,  403,  675,  680,
      333,  335,  675,  680,  408,  444,  675,  680,  443,  670,
      680,  439,  444,  671,  674,  675,  680,  408,  444,  672,
      675,  680,  444,  673,  675,  680,  408,  444,  675,  680,
      444,  675,  680,  444,  671,  674,  675,  680,  440,  444,
      673,  675,  680,  409,  444,  675,  680,  409,  444,  672,
      675,  680,  434,  444,  675,  680,  435,  444,  675,  680,

      444,  675,  680,  409,  444,  675,  680,  409,  444,  675,
      680,  409,  444,  675,  680,  436,  444,  675,  680,  437,
      444,  675,  680,  421,  430,  675,  680,  429,  670,  680,
      421,  430,  671,  674,  675,  680,  421,  430,  672,  675,
      680,  421,  430,  673,  675,  680,  430,  675,  680,  421,
      430,  675,  680,  430,  675,  680,  421,  430,  675,  680,
      430,  675,  680,16804,  427,  428,  675,  680,  423,  670,
      680,  427,  428,  671,  674,  675,  680,  427,  428,  672,
      675,  680,  427,  428,  673,  675,  680,  427,  428,  675,
      680,  428,  675,  680,  430,  675,  680,  430,  671,  674,

      675,  680,  430,  672,  675,  680,  430,  673,  675,  680,
      430,  675,  680,  430,  675,  680,  675,  680,  673,  675,
      680,  165,  675,  680,  168,  675,  680,  168,  671,  674,
      675,  680,  168,  672,  675,  680,  168,  673,  675,  680,
      168,  675,  680,  168,  675,  680,  167,  168,  675,  680,
      675,  680,  673,  675,  680,  163,  675,  680,  171,  675,
      680,  170,  670,  680,  171,  671,  674,  675,  680,  171,
      672,  675,  680,  171,  673,  675,  680,  171,  675,  680,
      171,  675,  680,  169,  171,  675,  680,  246,  247,  675,
      680,  246,  248,  670,  680,  246,  247,  671,  674,  675,

      680,  246,  247,  672,  675,  680,  246,  247,  673,  675,
      680,  247,  675,  680,  246,  247,  675,  680,  242,  243,
      675,  680,  242,  244,  670,  680,  242,  243,  671,  674,
      675,  680,  242,  243,  672,  675,  680,  242,  243,  673,
      675,  680,  243,  675,  680,  242,  243,  675,  680,  323,
      675,  680,  323,  671,  674,  675,  680,  323,  672,  675,
      680,  323,  673,  675,  680,  323,  675,  680,  320,  323,
      675,  680,  323,  675,  680,  331,  675,  680,  331,  675,
      680,  670,  680,  331,  671,  674,  675,  680,  331,  672,
      675,  680,  331,  675,  680,  331,  673,  675,  680,  331,

      675,  680,  330,  331,  675,  680,  327,  331,  675,  680,
      331,  675,  680,  675,  680,  670,  680,  675,  680,  324,
      675,  680,  665,  675,  680,  665,  671,  674,  675,  680,
      665,  672,  675,  680,  665,  673,  675,  680,  651,  665,
      675,  680,  665,  675,  680,  665,  675,  680,  656,  675,
      680,  656,  675,  680,  670,  680,  656,  675,  680,  656,
      671,  674,  675,  680,  656,  672,  675,  680,  656,  675,
      680,  656,  673,  675,  680,  654,  656,  675,  680,  655,
      656,  675,  680,  656,  675,  680,  656,  675,  680,  653,
      656,  675,  680,  664,  675,  680,  664,  675,  680,  664,

      671,  674,  675,  680,  664,  672,  675,  680,  664,  673,
      675,  680,  664,  675,  680,  664,  675,  680,  664,  675,
      680,  664,  675,  680,  664,  675,  680,  657,  664,  675,
      680,  663,  675,  680,  663,  671,  674,  675,  680,  663,
      672,  675,  680,  663,  673,  675,  680,  662,  663,  675,
      680,  663,  675,  680,  666,  675,  680,  666,  671,  674,
      675,  680,  666,  672,  675,  680,  666,  673,  675,  680,
      666,  675,  680,  675,  680,  627,  670,  680,  671,  674,
      675,  680,  672,  675,  680,  673,  675,  680,  675,  680,
      638,  640,  675,  680,  638,  640,  675,  680,  639,  670,

      680,  638,  640,  671,  674,  675,  680,  638,  640,  672,
      675,  680,  638,  640,  673,  675,  680,  640,  675,  680,
      640,  675,  680,  638,  640,  675,  680,  640,  675,  680,
      640,  675,  680,  638,  640,  675,  680,  640,  675,  680,
      640,  675,  680,  646,  649,  675,  680,  648,  670,  680,
      646,  649,  671,  674,  675,  680,  646,  649,  672,  675,
      680,  649,  675,  680,  646,  649,  673,  675,  680,  649,
      675,  680,  649,  675,  680,  649,  675,  680,  649,  675,
      680,  646,  649,  675,  680,  649,  675,  680,17029,  677,
      679,  221,  220,  221,  677,  679,  225,  567,  538,16920,

    16921,  538,  539,16920,16921,  539, 8728, 8729,  538,  539,
    16920,16921,  535,  529,  567,  538,  539,16920,16921,  578,
      578,  578,  543,  566,  677,  679,  540,  543,  543,  543,
      551,  677,  679,  551,  553,  553,  553,  195,  556,  558,
      557,  556,  152,  154,   40,   35,   35,  467,  467,  576,
      577,  576,  577,  598,  578,  578,  576,  577,  578,  576,
      577,  578,  575,  576,  577,  597,  575,  576,  577,  575,
      598,   61,   61,  211,  188,  188,   21,   22,  230,  380,
       47,  677,  679,  196,  198,   19,   75,   75,   75,   75,
       75,   75,  188,  149,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,   16,   16,  677,   16,
      679,   14,  188,  188,  188,  150,  211,  345,  677,  679,
      345,  464,  463,  463,  464,  478,  459,  677,  679,  456,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  125,  353,  353,  376,  376,  355,  355,  359,
      677,  354,  679,  356,  141,  141,  141,  141,  146,  146,
      146,  509,  509,  512,  677,  513,  679,  517,  509,  506,
      512,  677,  513,  679,  511,  524,  524,  677,  524,  679,

      521,  513,  679,  219,  219,  218,  669,  669,  678,  676,
      677,  669,  676,  679,  668,  677,  679,  667,  668,  343,
      339,  339,  677,  339,  679,  350,  350,  677,  350,  679,
      190,  193,  368,  368,  368,  368,  608,  603,  609,  604,
      677,  605,  679,  608,  608,  608,   77,   77,  133,16516,
      133,16516,  135,  135,  214,  480,  677,  679,  480,  259,
      260,  259,  677,  259,  679,   49,   50,   49,   51,   51,
      677,   51,  679,   54,   54,   54,   53,   57,   58,   57,
      677,   57,  679,  177,  178,  178,  178,  178,  179,  179,
      185,  185,  186,  186,  250,  677,  679,  251,  252,  264,

      258,  405,  199,  370,  370,  370,  152,16541,  156,  381,
      381,  381,  388,  387,  389,  391,  407,  410,  417,  677,
      418,  679,  407,  407,  200,  129,  129,  130,  130,  269,
      269,  677,  269,  679,  266,  275,  275,  677,  275,  679,
      272,  284,  284,  677,  284,  679,  299,  292,  310,  310,
      599,  584,  585,  587,  475,  475,  395,  396,  397,  402,
      401,  401,  408,  408,  677,  408,  679,  438,  409,  409,
      409,  421,  422,  421,  679,  421,16804, 8612,  427,  427,
      677,  427,  679,  165,  165,  167,  167,  163,  163,  169,
      169,  246,  245,  246,  677,  246,  679,  242,  241,  242,

      677,  242,  679,  327,  329,  328,  327,  326,  324,  324,
      324,  325,  324,  652,  653,  653,  653,  660,  627,  677,
      679,  638,  638,  638,  628,  632,  677,  631,  679,  638,
      638,  638,  629,  630,  631,  679,  646,  647,  647,  677,
      647,  679,  646,17029, 8837,  538,16920,16921,  538,16920,
    16921,  539,  539,  538,  539,16920,16921,  564,  611,  565,
      613,  543,  543,  546,  546,  553,  553,  576,  577,  576,
      577,  576,  577,  575,    8,   61,   61,  188,   21,  380,
      611,  613,  196,   62,   75,   75,   75,   75,   75,   75,
       75,   75,  148,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  611,  613,  459,
      611,  613,  456,  478,  478,  478,  452,  478,  478,  478,
      478,  478,  478,  478,  478,  122,  353,  376,  376,  355,
      362,  359,  360,  354,  357,  141,  141,  146,  518,  508,
      511,  218,  368,  368,  608,  608,  608,   77,  137,  138,
      621,  620,  619,  228,  611,  613,   60,  178,  178,  178,
      256,  240,  370,  151, 8349,  158,  381,  383,  441,  415,

      415,  411,  283,  298,  291,  309,  310,  474,  425,  166,
      164,  245,  241,  329,  326,  324,  324,  653,  660,  638,
      638,  634,  630,  630,  643,  233,  538,16920,16921,  539,
      563,  612,  562,  614,  562,  614,  579,  543,  543,  546,
      545,  553,  553,  532,  576,  577,  576,  577,    8,   61,
       61,  379,  612,  612,  612,  234,  614,  614,  614,  614,
      235,   75,   75,   75,   75,   75,   75,   75,   75,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  233,  612,  233,  614,  452,  478,  478,  478,
      452,  478,  478,  478,  478,  478,  485,  484,  478,  353,
      376,  376,  355,  362,  141,  141,  518,  368,  368,  608,
      608,  608,   77,  138, 8324,  134,  228,   55,   70,   71,
      178,  178,  180,  256, 8349,  441,  415,  416,  283,  298,
      291,  309,  310,  586,  474,  426,  245,  241,  626,  638,
      638,  633,  633,  543,  543,  552,  553,  532,  532,  576,
      577,  232,  231,   61,   61,  213,  404,  235,   13,   75,
       75,   75,   75,   75,   75,   75,   75,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,   20,   20,   20,
       20,  149,   20,  188,  120,  119,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,   14,  478,
      453,  478,  450,  478,  478,  478,  478,  478,  478,  478,
      450,  121,  353,  376,  376,  213,  355,  377,  141,  502,
      503,  368,  368,  207,  606,  608,  608,  608,  608,  623,
      176,  178,  178,  181,  419,  424,  245,  241,  658,  635,
      638,  638,  636,  543,  543,16926,  532,  576,  577,   61,

       61,  120,  235,   75,   99,   75,   75,   75,   75,   75,
       75,   75,   75,  188,  188,  188,  188,  188,  101,  100,
      188,  188,  188,   33,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,16494,  188,
      188,  188,  118,  117,  139,  188,  188,  188,  453,  478,
      453,  450,  478,  478,  478,  451,  478,  486,  478,  478,
      353,  376,  376,  141,  367,  368,  608,  608,  608,  622,
       67,   69,   72,  178,  245,  241,  658,  661,  637,  638,
      641,  543, 8734, 8734,  576,  577,  569,   61,   61,  101,

       33,16494,  118,  212,   75,   75,   75,   75,   75,   75,
       75,   75,  188,  188,  188,  188,  188,  188,  188,  188,
      188,   82,  188,  188,  188,   85,  188,  188,   24,  188,
      188,   92,  188,  188,  188,  188,  188,   29,  188,  188,
      188,  188,   81, 8302,  109,  188,  188,  188,  188,  188,
      188,  451,  457,  478,  478,  478,  487,  451,  488,  478,
      353,  376,  376,  141,  368,  608,  608,  608,  178,  182,
      431,  245,  241,  322,  321,  642,  576,  577,  572,  568,
       61,   61,   82,   85,   24,   92,   29,   81, 8302,   75,
       75,   75,   75,   75,   75,   46,   75,  172,  188,  188,

      188,  188,  188,  108,  162,  188,  188,  188, 8319,  149,
    16511,  188,  188,  188,  188,   24,   93,   86,  188,   32,
      188,  188,  188,  188,  188,   29,  188,  188,  188,   25,
      188,  188,   83,  458,  457,  448,  478,  455,  478,  449,
      478,  454,  478,  449,  353,  376,  376,  141,  607,  608,
      608,  608,   63,   65,   64,  182,  245,  241,  659,  644,
      576,  577,  571,   61,   61,   46,  108,   93,   86,   32,
       25,   83,   75,   75,   75,   44,   75,   75,   75,  188,
      188,   84,  188,  188,   87,  615, 8319,  148,  188,   80,
      188,   30,  188,   32,  188,  188,  188,   34,  188,  188,

      188,  188,   25,   90,  188,  448,  455,  454,  458,  448,
      455,  449,  454,  353,  376,  376,  141,  608,   63,   73,
       66,   64,  303,  304,  588,  245,  241,  659,  576,  577,
      570,   61,   61,   44,   84,   87,   80,   30,   34,   90,
       75,   75,   89,   75,   97,   88,  173,  188,  188,  188,
       98,  615,  615,  188,   94,   94,   30,   91,   91,16512,
       91,   91,  149,   91,  188,  188,  188,  188,   31,  188,
      188,  188,  188,  105,  104,  188,  353,  376,  376,  366,
      140,  141,  608,  303,  303,  304,  304,  245,  241,  650,
      576,  577,  597,   61,   61,   89,   97,   88,   98,   94,

       94,   91,   31,   75,   96,   45,  188,  120,  188,   91,
       91,  188,  188,   23,   31,  188,  188,  188,  188,  114,
      113,  188,  353,  376,  376,  608,  245,  241,  597,   61,
       61,   96,   45,   23,   75,  188, 8320,  188,  188,   23,
      188,  188,  188,   26,  103,  102,  353,  376,  376,  184,
      183,  245,  241,   61,   61,   26,   75,  187,  188,   28,
      188,  188,   26,  112,  111,  353,  376,  376,  184,  183,
      245,  241,   61,   61,   28,   75,   28,  188,  188,  353,
      376,  376,  245,  241,   61,   61,   75,  188,   27,  353,
      376,  376,  245,  241,   61,   61,   27,   95,  107,  106,

       27,  353,  376,  376,  245,  241,   61,   61,   95,  116,
      115,  353,  376,  376,   68,  245,  241,   61,   61,  353,
      376,  376,  245,  241,   61,   61,  353,  376,  376,   61,
       61,  353,  376,  376,   61,   61,   15,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,

       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,

       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,

       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,   61,   61,  353,  376,  376,
       61,   61,  353,  376,  376,  353
    } ;

static yyconst flex_int16_t yy_accept[4193] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    6,    7,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   13,   13,   13,   14,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   20,   22,   24,   28,   31,
       34,   36,   38,   41,   44,   47,   50,   56,   60,   64,
       67,   70,   72,   74,   76,   78,   80,   82,   85,   88,

       94,   97,   99,  101,  103,  105,  107,  109,  112,  115,
      118,  121,  123,  126,  129,  131,  134,  137,  140,  143,
      146,  151,  156,  159,  163,  166,  170,  174,  178,  181,
      185,  189,  193,  195,  197,  200,  203,  206,  211,  215,
      219,  223,  227,  230,  234,  238,  241,  245,  248,  253,
      257,  260,  264,  267,  271,  275,  279,  283,  286,  291,
      295,  299,  302,  306,  309,  312,  317,  321,  324,  328,
      331,  335,  339,  341,  343,  345,  347,  350,  352,  355,
      358,  363,  365,  368,  371,  375,  378,  383,  387,  391,
      394,  397,  400,  403,  408,  412,  415,  418,  421,  424,

      427,  432,  436,  440,  444,  447,  451,  454,  457,  462,
      466,  470,  474,  477,  481,  485,  488,  491,  494,  496,
      500,  502,  505,  508,  511,  514,  517,  520,  522,  524,
      527,  530,  533,  536,  538,  540,  543,  546,  549,  552,
      555,  558,  561,  564,  567,  570,  573,  576,  579,  582,
      585,  588,  591,  594,  597,  600,  603,  606,  609,  613,
      616,  622,  627,  632,  636,  639,  641,  643,  645,  647,
      649,  652,  654,  656,  658,  662,  664,  667,  670,  672,
      675,  678,  681,  684,  686,  690,  693,  696,  699,  702,
      705,  709,  712,  717,  722,  726,  730,  734,  738,  741,

      744,  749,  753,  757,  761,  765,  768,  771,  774,  779,
      783,  787,  790,  794,  798,  802,  805,  808,  812,  815,
      818,  822,  826,  830,  834,  838,  842,  846,  850,  854,
      858,  862,  865,  868,  871,  876,  880,  884,  887,  891,
      894,  897,  900,  903,  906,  911,  915,  919,  922,  925,
      929,  932,  935,  940,  944,  948,  951,  955,  959,  963,
      968,  971,  975,  981,  986,  991,  994,  997, 1000, 1004,
     1008, 1012, 1015, 1019, 1021, 1024, 1027, 1030, 1033, 1036,
     1039, 1044, 1048, 1052, 1055, 1059, 1061, 1063, 1065, 1067,
     1069, 1072, 1076, 1080, 1083, 1089, 1094, 1099, 1102, 1105,

     1108, 1111, 1115, 1119, 1123, 1129, 1132, 1137, 1140, 1143,
     1146, 1149, 1152, 1158, 1162, 1166, 1169, 1172, 1175, 1180,
     1185, 1191, 1196, 1199, 1203, 1207, 1210, 1213, 1216, 1221,
     1225, 1229, 1232, 1235, 1238, 1241, 1246, 1250, 1254, 1256,
     1259, 1261, 1264, 1268, 1271, 1274, 1276, 1278, 1281, 1284,
     1287, 1290, 1293, 1297, 1300, 1305, 1309, 1313, 1316, 1320,
     1324, 1327, 1330, 1335, 1338, 1341, 1344, 1349, 1353, 1357,
     1360, 1363, 1366, 1369, 1372, 1377, 1381, 1385, 1388, 1391,
     1395, 1398, 1403, 1407, 1411, 1415, 1418, 1421, 1425, 1428,
     1433, 1437, 1441, 1445, 1448, 1450, 1453, 1456, 1459, 1462,

     1465, 1468, 1473, 1477, 1481, 1484, 1488, 1491, 1494, 1497,
     1502, 1506, 1510, 1513, 1516, 1520, 1524, 1527, 1533, 1538,
     1543, 1546, 1549, 1552, 1556, 1558, 1561, 1564, 1567, 1569,
     1571, 1573, 1576, 1580, 1582, 1584, 1586, 1589, 1592, 1595,
     1600, 1604, 1608, 1611, 1614, 1617, 1620, 1623, 1627, 1631,
     1634, 1637, 1640, 1645, 1649, 1653, 1656, 1658, 1660, 1663,
     1668, 1672, 1676, 1679, 1683, 1686, 1689, 1694, 1698, 1701,
     1705, 1709, 1712, 1716, 1720, 1724, 1728, 1731, 1737, 1742,
     1747, 1751, 1753, 1756, 1759, 1762, 1765, 1768, 1771, 1774,
     1779, 1783, 1787, 1790, 1793, 1795, 1798, 1800, 1803, 1806,

     1809, 1812, 1817, 1821, 1825, 1828, 1831, 1834, 1837, 1839,
     1841, 1843, 1845, 1847, 1849, 1851, 1853, 1856, 1859, 1861,
     1864, 1867, 1870, 1873, 1875, 1878, 1881, 1883, 1885, 1887,
     1889, 1891, 1894, 1896, 1899, 1902, 1905, 1908, 1914, 1918,
     1923, 1928, 1932, 1936, 1939, 1942, 1946, 1950, 1954, 1957,
     1960, 1963, 1966, 1970, 1973, 1978, 1980, 1982, 1984, 1986,
     1988, 1991, 1993, 1995, 1997, 1999, 2002, 2005, 2007, 2010,
     2013, 2016, 2019, 2022, 2025, 2030, 2034, 2038, 2042, 2046,
     2049, 2053, 2058, 2061, 2064, 2066, 2069, 2074, 2078, 2081,
     2085, 2088, 2091, 2095, 2098, 2101, 2106, 2110, 2114, 2118,

     2121, 2124, 2127, 2129, 2133, 2137, 2141, 2147, 2151, 2156,
     2160, 2164, 2167, 2171, 2175, 2179, 2182, 2186, 2190, 2193,
     2196, 2199, 2202, 2205, 2210, 2214, 2218, 2221, 2225, 2227,
     2230, 2232, 2235, 2238, 2241, 2244, 2250, 2254, 2258, 2261,
     2264, 2267, 2272, 2277, 2280, 2283, 2289, 2293, 2297, 2300,
     2303, 2306, 2311, 2316, 2320, 2323, 2329, 2334, 2339, 2343,
     2347, 2351, 2355, 2358, 2364, 2369, 2374, 2378, 2382, 2386,
     2390, 2393, 2399, 2404, 2409, 2413, 2417, 2420, 2424, 2427,
     2433, 2438, 2443, 2447, 2451, 2455, 2460, 2463, 2466, 2469,
     2474, 2478, 2482, 2486, 2490, 2493, 2496, 2500, 2503, 2508,

     2512, 2516, 2520, 2524, 2527, 2531, 2535, 2538, 2541, 2544,
     2550, 2554, 2557, 2562, 2565, 2569, 2573, 2577, 2581, 2584,
     2589, 2593, 2597, 2600, 2603, 2606, 2610, 2613, 2618, 2622,
     2626, 2630, 2634, 2638, 2641, 2645, 2649, 2652, 2658, 2663,
     2667, 2671, 2674, 2679, 2684, 2688, 2693, 2697, 2701, 2704,
     2708, 2712, 2716, 2720, 2724, 2728, 2731, 2737, 2742, 2747,
     2750, 2754, 2757, 2761, 2765, 2769, 2772, 2778, 2783, 2788,
     2792, 2795, 2798, 2803, 2807, 2811, 2814, 2817, 2819, 2822,
     2825, 2828, 2833, 2837, 2841, 2844, 2847, 2851, 2853, 2856,
     2859, 2862, 2865, 2870, 2874, 2878, 2881, 2884, 2888, 2892,

     2896, 2902, 2907, 2912, 2915, 2919, 2923, 2927, 2933, 2938,
     2943, 2946, 2950, 2953, 2958, 2962, 2966, 2969, 2973, 2976,
     2979, 2982, 2984, 2989, 2993, 2996, 3000, 3003, 3007, 3011,
     3014, 3016, 3018, 3020, 3023, 3026, 3031, 3035, 3039, 3043,
     3046, 3049, 3052, 3055, 3057, 3060, 3065, 3069, 3072, 3076,
     3080, 3084, 3087, 3090, 3094, 3097, 3100, 3105, 3109, 3113,
     3116, 3119, 3122, 3125, 3128, 3132, 3135, 3140, 3144, 3148,
     3152, 3155, 3158, 3163, 3167, 3171, 3174, 3176, 3179, 3183,
     3186, 3189, 3191, 3195, 3199, 3202, 3208, 3213, 3218, 3221,
     3224, 3228, 3231, 3234, 3238, 3241, 3244, 3248, 3251, 3257,

     3262, 3265, 3270, 3273, 3276, 3279, 3282, 3286, 3290, 3291,
     3292, 3293, 3293, 3294, 3295, 3295, 3295, 3296, 3297, 3298,
     3298, 3298, 3298, 3298, 3298, 3299, 3299, 3299, 3302, 3302,
     3302, 3302, 3306, 3306, 3306, 3307, 3307, 3307, 3307, 3308,
     3309, 3313, 3314, 3315, 3316, 3316, 3316, 3320, 3320, 3320,
     3320, 3321, 3321, 3322, 3323, 3323, 3323, 3323, 3323, 3323,
     3324, 3325, 3326, 3327, 3327, 3327, 3327, 3328, 3329, 3330,
     3331, 3332, 3333, 3334, 3335, 3336, 3336, 3336, 3337, 3337,
     3338, 3338, 3339, 3340, 3340, 3341, 3342, 3343, 3344, 3344,
     3344, 3345, 3346, 3347, 3348, 3349, 3350, 3350, 3350, 3350,

     3352, 3354, 3355, 3355, 3356, 3357, 3360, 3363, 3366, 3366,
     3366, 3367, 3367, 3367, 3370, 3370, 3370, 3370, 3371, 3372,
     3372, 3372, 3372, 3372, 3372, 3372, 3372, 3372, 3372, 3372,
     3373, 3374, 3375, 3375, 3375, 3375, 3375, 3375, 3375, 3375,
     3375, 3375, 3375, 3375, 3375, 3375, 3375, 3375, 3375, 3375,
     3375, 3375, 3375, 3375, 3375, 3376, 3376, 3376, 3376, 3376,
     3376, 3376, 3377, 3378, 3379, 3380, 3380, 3380, 3381, 3381,
     3381, 3382, 3383, 3384, 3384, 3385, 3386, 3386, 3386, 3387,
     3387, 3388, 3389, 3390, 3391, 3392, 3393, 3393, 3394, 3395,
     3396, 3396, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403,

     3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413,
     3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423,
     3424, 3425, 3426, 3427, 3428, 3430, 3432, 3433, 3433, 3433,
     3433, 3433, 3433, 3434, 3434, 3434, 3435, 3435, 3435, 3436,
     3437, 3437, 3438, 3438, 3439, 3440, 3441, 3442, 3443, 3444,
     3445, 3446, 3446, 3446, 3446, 3446, 3446, 3446, 3446, 3446,
     3446, 3446, 3446, 3447, 3448, 3449, 3450, 3450, 3451, 3451,
     3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461,
     3462, 3463, 3463, 3463, 3463, 3463, 3463, 3464, 3465, 3467,
     3468, 3468, 3469, 3470, 3470, 3470, 3472, 3474, 3474, 3475,

     3475, 3475, 3476, 3477, 3477, 3478, 3478, 3479, 3479, 3479,
     3479, 3479, 3480, 3480, 3480, 3481, 3481, 3482, 3483, 3484,
     3484, 3484, 3484, 3486, 3488, 3488, 3489, 3489, 3489, 3490,
     3491, 3493, 3495, 3496, 3496, 3496, 3496, 3497, 3499, 3501,
     3502, 3504, 3505, 3506, 3506, 3507, 3507, 3508, 3509, 3509,
     3510, 3512, 3515, 3515, 3516, 3516, 3517, 3518, 3520, 3521,
     3522, 3524, 3526, 3527, 3529, 3531, 3532, 3533, 3534, 3535,
     3536, 3537, 3537, 3537, 3537, 3538, 3539, 3540, 3542, 3544,
     3545, 3546, 3547, 3548, 3548, 3549, 3549, 3549, 3549, 3549,
     3551, 3551, 3553, 3553, 3553, 3553, 3554, 3555, 3555, 3555,

     3555, 3555, 3555, 3555, 3556, 3556, 3556, 3556, 3557, 3558,
     3559, 3560, 3561, 3562, 3564, 3566, 3567, 3568, 3568, 3569,
     3570, 3572, 3574, 3575, 3575, 3575, 3576, 3577, 3578, 3579,
     3580, 3582, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584,
     3584, 3584, 3585, 3586, 3587, 3587, 3587, 3588, 3589, 3590,
     3591, 3591, 3591, 3591, 3591, 3592, 3593, 3594, 3595, 3595,
     3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3602, 3602,
     3602, 3602, 3602, 3602, 3602, 3603, 3603, 3603, 3604, 3604,
     3604, 3604, 3605, 3606, 3607, 3607, 3608, 3609, 3610, 3610,
     3610, 3610, 3610, 3610, 3611, 3611, 3611, 3612, 3612, 3613,

     3613, 3613, 3613, 3614, 3615, 3616, 3616, 3617, 3618, 3619,
     3619, 3619, 3619, 3619, 3621, 3623, 3624, 3624, 3625, 3625,
     3625, 3626, 3627, 3628, 3629, 3630, 3630, 3631, 3633, 3635,
     3636, 3637, 3639, 3641, 3642, 3643, 3643, 3643, 3645, 3647,
     3648, 3648, 3648, 3649, 3649, 3649, 3650, 3650, 3650, 3651,
     3651, 3652, 3653, 3654, 3655, 3655, 3656, 3656, 3656, 3657,
     3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3666, 3668,
     3669, 3670, 3671, 3672, 3673, 3674, 3676, 3676, 3676, 3677,
     3678, 3679, 3680, 3682, 3684, 3684, 3684, 3684, 3684, 3684,
     3684, 3684, 3684, 3684, 3684, 3685, 3685, 3685, 3686, 3687,

     3688, 3689, 3689, 3689, 3690, 3691, 3692, 3693, 3693, 3694,
     3696, 3698, 3699, 3699, 3700, 3702, 3704, 3704, 3704, 3704,
     3704, 3704, 3705, 3705, 3706, 3707, 3708, 3708, 3709, 3709,
     3709, 3710, 3711, 3712, 3713, 3714, 3714, 3714, 3715, 3715,
     3715, 3715, 3715, 3715, 3715, 3716, 3716, 3716, 3717, 3717,
     3718, 3718, 3718, 3718, 3718, 3718, 3719, 3719, 3719, 3719,
     3719, 3720, 3720, 3720, 3721, 3722, 3723, 3724, 3725, 3725,
     3726, 3728, 3730, 3731, 3732, 3732, 3732, 3732, 3732, 3732,
     3732, 3732, 3732, 3732, 3733, 3733, 3733, 3734, 3734, 3737,
     3738, 3739, 3741, 3743, 3743, 3743, 3743, 3744, 3745, 3746,

     3746, 3746, 3746, 3746, 3749, 3752, 3752, 3753, 3753, 3753,
     3754, 3754, 3758, 3758, 3758, 3758, 3760, 3760, 3760, 3762,
     3762, 3762, 3762, 3763, 3764, 3765, 3766, 3767, 3767, 3767,
     3767, 3768, 3768, 3770, 3772, 3772, 3772, 3773, 3773, 3774,
     3774, 3775, 3775, 3775, 3775, 3775, 3775, 3775, 3776, 3776,
     3776, 3776, 3776, 3776, 3776, 3777, 3778, 3778, 3778, 3778,
     3778, 3778, 3778, 3778, 3778, 3778, 3778, 3778, 3778, 3778,
     3778, 3778, 3778, 3778, 3778, 3778, 3778, 3778, 3778, 3778,
     3778, 3778, 3778, 3778, 3778, 3778, 3778, 3778, 3778, 3779,
     3779, 3779, 3779, 3780, 3781, 3781, 3781, 3781, 3781, 3781,

     3781, 3781, 3781, 3781, 3782, 3782, 3782, 3782, 3783, 3783,
     3783, 3784, 3784, 3784, 3784, 3784, 3785, 3785, 3786, 3787,
     3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797,
     3797, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805,
     3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815,
     3816, 3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825,
     3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835,
     3836, 3837, 3837, 3837, 3837, 3838, 3838, 3839, 3839, 3840,
     3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840,
     3841, 3842, 3842, 3842, 3843, 3843, 3844, 3844, 3845, 3846,

     3847, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3856,
     3856, 3856, 3857, 3857, 3859, 3860, 3861, 3861, 3862, 3862,
     3862, 3863, 3864, 3864, 3865, 3866, 3866, 3866, 3866, 3866,
     3867, 3868, 3869, 3869, 3869, 3870, 3870, 3870, 3871, 3871,
     3871, 3872, 3872, 3872, 3872, 3873, 3874, 3875, 3875, 3876,
     3877, 3878, 3878, 3879, 3879, 3879, 3880, 3881, 3881, 3881,
     3881, 3881, 3882, 3883, 3883, 3883, 3884, 3884, 3885, 3886,
     3886, 3887, 3887, 3888, 3888, 3888, 3888, 3888, 3888, 3888,
     3888, 3888, 3888, 3888, 3888, 3888, 3888, 3889, 3890, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3892, 3892, 3892, 3892,

     3892, 3892, 3892, 3892, 3892, 3892, 3893, 3893, 3894, 3895,
     3895, 3895, 3896, 3896, 3897, 3898, 3898, 3898, 3899, 3899,
     3900, 3900, 3900, 3900, 3900, 3901, 3902, 3902, 3903, 3903,
     3903, 3904, 3904, 3904, 3904, 3905, 3905, 3905, 3905, 3906,
     3906, 3906, 3906, 3907, 3907, 3907, 3908, 3908, 3908, 3908,
     3908, 3909, 3909, 3909, 3909, 3909, 3909, 3909, 3910, 3910,
     3910, 3910, 3910, 3910, 3910, 3910, 3911, 3911, 3912, 3912,
     3912, 3913, 3913, 3914, 3914, 3914, 3915, 3916, 3917, 3918,
     3918, 3918, 3918, 3919, 3919, 3920, 3920, 3920, 3920, 3920,
     3921, 3922, 3922, 3922, 3922, 3922, 3923, 3923, 3923, 3923,

     3923, 3923, 3924, 3925, 3925, 3925, 3925, 3926, 3927, 3927,
     3930, 3931, 3931, 3933, 3933, 3935, 3937, 3938, 3939, 3940,
     3941, 3942, 3942, 3943, 3944, 3944, 3944, 3944, 3944, 3945,
     3947, 3948, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949,
     3950, 3950, 3950, 3950, 3951, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3952, 3952, 3952, 3953, 3953, 3953, 3953,

     3953, 3953, 3953, 3953, 3954, 3955, 3956, 3957, 3957, 3957,
     3958, 3959, 3960, 3961, 3962, 3962, 3962, 3962, 3962, 3963,
     3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973,
     3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982, 3983,
     3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993,
     3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4002,
     4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012,
     4013, 4013, 4013, 4015, 4017, 4017, 4017, 4018, 4018, 4018,
     4018, 4018, 4018, 4018, 4018, 4018, 4019, 4020, 4021, 4022,
     4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4030, 4030,

     4030, 4030, 4032, 4033, 4034, 4034, 4035, 4035, 4035, 4035,
     4035, 4036, 4037, 4037, 4038, 4038, 4038, 4038, 4038, 4039,
     4040, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047, 4047,
     4047, 4048, 4049, 4049, 4050, 4050, 4050, 4050, 4050, 4050,
     4050, 4050, 4051, 4051, 4052, 4053, 4053, 4054, 4054, 4054,
     4054, 4054, 4055, 4055, 4055, 4056, 4056, 4056, 4056, 4056,
     4057, 4057, 4057, 4058, 4059, 4059, 4059, 4059, 4060, 4060,
     4060, 4061, 4061, 4061, 4062, 4062, 4062, 4063, 4063, 4064,
     4065, 4065, 4065, 4066, 4066, 4066, 4066, 4066, 4066, 4066,
     4066, 4066, 4066, 4066, 4066, 4067, 4067, 4068, 4068, 4069,

     4069, 4069, 4069, 4069, 4069, 4069, 4070, 4071, 4072, 4073,
     4073, 4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074,
     4074, 4074, 4074, 4075, 4076, 4078, 4078, 4078, 4079, 4079,
     4079, 4079, 4080, 4082, 4082, 4082, 4082, 4082, 4082, 4082,
     4082, 4083, 4084, 4085, 4086, 4086, 4086, 4086, 4086, 4086,
     4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086,
     4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086,
     4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086,
     4086, 4086, 4086, 4086, 4086, 4086, 4087, 4087, 4087, 4087,
     4087, 4087, 4087, 4087, 4087, 4087, 4088, 4088, 4088, 4088,

     4088, 4089, 4089, 4090, 4090, 4091, 4092, 4093, 4094, 4095,
     4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105,
     4106, 4107, 4108, 4109, 4110, 4111, 4113, 4115, 4116, 4117,
     4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127,
     4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137,
     4137, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145,
     4146, 4147, 4148, 4149, 4150, 4150, 4150, 4150, 4150, 4150,
     4150, 4150, 4150, 4150, 4150, 4151, 4153, 4155, 4156, 4157,
     4158, 4159, 4160, 4161, 4162, 4162, 4162, 4163, 4165, 4166,
     4168, 4168, 4168, 4168, 4169, 4170, 4170, 4170, 4171, 4172,

     4173, 4174, 4175, 4177, 4178, 4179, 4180, 4181, 4181, 4181,
     4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4183, 4184,
     4184, 4184, 4184, 4185, 4185, 4185, 4185, 4185, 4185, 4185,
     4186, 4186, 4186, 4186, 4186, 4186, 4186, 4186, 4186, 4186,
     4186, 4186, 4186, 4186, 4186, 4186, 4187, 4187, 4187, 4187,
     4187, 4187, 4187, 4187, 4187, 4187, 4187, 4187, 4187, 4187,
     4188, 4188, 4189, 4189, 4189, 4189, 4190, 4190, 4190, 4192,
     4193, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194,
     4194, 4194, 4194, 4194, 4194, 4194, 4195, 4197, 4198, 4198,
     4200, 4200, 4200, 4200, 4200, 4200, 4201, 4202, 4202, 4202,

     4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202,
     4202, 4202, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4204, 4204, 4206, 4207, 4208,
     4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218,
     4219, 4220, 4221, 4222, 4222, 4223, 4224, 4224, 4224, 4225,
     4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235,
     4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245,
     4245, 4245, 4246, 4247, 4248, 4250, 4251, 4252, 4253, 4254,

     4255, 4256, 4256, 4257, 4258, 4259, 4259, 4259, 4260, 4260,
     4260, 4260, 4260, 4260, 4260, 4260, 4261, 4262, 4263, 4264,
     4265, 4266, 4268, 4268, 4269, 4270, 4271, 4271, 4273, 4274,
     4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4282,
     4282, 4282, 4282, 4283, 4283, 4284, 4284, 4285, 4285, 4285,
     4285, 4285, 4285, 4285, 4285, 4285, 4285, 4285, 4285, 4285,
     4285, 4285, 4285, 4285, 4285, 4285, 4285, 4285, 4285, 4286,
     4286, 4287, 4287, 4287, 4287, 4288, 4288, 4289, 4289, 4291,
     4291, 4291, 4291, 4291, 4291, 4291, 4292, 4292, 4292, 4292,
     4292, 4292, 4292, 4292, 4293, 4293, 4294, 4295, 4297, 4297,

     4297, 4297, 4298, 4298, 4299, 4300, 4300, 4300, 4300, 4300,
     4300, 4300, 4300, 4300, 4300, 4300, 4300, 4301, 4301, 4301,
     4301, 4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302,
     4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302, 4302,
     4302, 4303, 4303, 4303, 4304, 4304, 4304, 4304, 4304, 4305,
     4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314,
     4315, 4316, 4317, 4318, 4319, 4319, 4319, 4319, 4319, 4320,
     4320, 4320, 4321, 4322, 4323, 4323, 4323, 4324, 4325, 4326,
     4327, 4328, 4329, 4329, 4330, 4331, 4332, 4333, 4334, 4335,
     4336, 4337, 4338, 4338, 4339, 4340, 4341, 4341, 4341, 4342,

     4343, 4344, 4345, 4346, 4347, 4348, 4349, 4349, 4349, 4350,
     4351, 4352, 4352, 4352, 4352, 4352, 4353, 4353, 4353, 4353,
     4354, 4355, 4356, 4357, 4357, 4358, 4359, 4360, 4361, 4361,
     4363, 4364, 4364, 4365, 4366, 4367, 4368, 4369, 4369, 4369,
     4369, 4369, 4369, 4369, 4370, 4370, 4370, 4371, 4371, 4371,
     4371, 4371, 4371, 4372, 4372, 4372, 4372, 4372, 4372, 4372,
     4372, 4372, 4372, 4372, 4372, 4372, 4373, 4373, 4374, 4375,
     4376, 4376, 4376, 4376, 4376, 4376, 4376, 4376, 4377, 4377,
     4377, 4377, 4377, 4377, 4377, 4377, 4379, 4379, 4380, 4380,
     4381, 4382, 4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383,

     4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383, 4384, 4384,
     4385, 4385, 4385, 4385, 4386, 4386, 4386, 4387, 4387, 4387,
     4387, 4387, 4387, 4387, 4388, 4388, 4388, 4388, 4389, 4390,
     4390, 4390, 4390, 4390, 4390, 4390, 4391, 4392, 4393, 4394,
     4395, 4396, 4397, 4398, 4400, 4401, 4402, 4403, 4404, 4405,
     4405, 4405, 4406, 4407, 4407, 4407, 4408, 4409, 4409, 4409,
     4409, 4409, 4409, 4412, 4413, 4414, 4415, 4416, 4417, 4418,
     4418, 4419, 4420, 4420, 4421, 4422, 4423, 4424, 4425, 4426,
     4427, 4428, 4429, 4429, 4429, 4430, 4430, 4431, 4431, 4432,
     4432, 4432, 4433, 4434, 4434, 4434, 4434, 4434, 4435, 4436,

     4438, 4440, 4442, 4444, 4445, 4447, 4448, 4448, 4449, 4451,
     4452, 4453, 4453, 4454, 4454, 4455, 4455, 4455, 4456, 4456,
     4456, 4457, 4457, 4457, 4457, 4457, 4457, 4457, 4457, 4457,
     4457, 4457, 4457, 4457, 4457, 4457, 4458, 4458, 4459, 4459,
     4460, 4460, 4460, 4460, 4461, 4461, 4461, 4461, 4461, 4461,
     4463, 4464, 4464, 4465, 4466, 4466, 4466, 4466, 4466, 4466,
     4466, 4467, 4467, 4467, 4467, 4467, 4468, 4468, 4468, 4468,
     4468, 4468, 4468, 4469, 4469, 4470, 4470, 4470, 4471, 4471,
     4471, 4471, 4471, 4471, 4471, 4471, 4471, 4472, 4472, 4472,
     4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481,

     4482, 4483, 4484, 4484, 4484, 4485, 4486, 4487, 4487, 4487,
     4487, 4487, 4489, 4490, 4491, 4492, 4492, 4493, 4494, 4495,
     4496, 4497, 4498, 4499, 4500, 4501, 4502, 4502, 4502, 4503,
     4504, 4504, 4504, 4505, 4505, 4505, 4506, 4506, 4507, 4508,
     4509, 4510, 4511, 4512, 4513, 4514, 4516, 4517, 4517, 4518,
     4519, 4520, 4521, 4522, 4523, 4523, 4523, 4523, 4523, 4523,
     4524, 4525, 4526, 4526, 4526, 4526, 4526, 4526, 4526, 4526,
     4527, 4527, 4528, 4528, 4528, 4529, 4529, 4529, 4529, 4529,
     4529, 4529, 4531, 4532, 4533, 4534, 4534, 4534, 4534, 4535,
     4535, 4535, 4535, 4535, 4536, 4536, 4536, 4537, 4538, 4538,

     4538, 4539, 4539, 4539, 4539, 4539, 4540, 4540, 4540, 4540,
     4541, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4549, 4550,
     4551, 4551, 4551, 4552, 4553, 4554, 4554, 4554, 4554, 4554,
     4555, 4556, 4557, 4558, 4559, 4561, 4562, 4564, 4566, 4567,
     4568, 4569, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576,
     4576, 4577, 4577, 4577, 4577, 4577, 4579, 4580, 4581, 4583,
     4584, 4584, 4584, 4584, 4584, 4584, 4585, 4586, 4587, 4588,
     4588, 4588, 4588, 4588, 4588, 4588, 4589, 4589, 4590, 4590,
     4591, 4591, 4591, 4591, 4591, 4591, 4594, 4595, 4596, 4596,
     4596, 4597, 4597, 4598, 4599, 4599, 4599, 4600, 4601, 4602,

     4603, 4603, 4603, 4603, 4603, 4604, 4604, 4604, 4604, 4604,
     4605, 4606, 4607, 4608, 4609, 4609, 4609, 4609, 4610, 4610,
     4610, 4611, 4611, 4612, 4613, 4614, 4614, 4615, 4616, 4617,
     4618, 4619, 4620, 4621, 4622, 4623, 4623, 4623, 4623, 4625,
     4626, 4627, 4627, 4627, 4627, 4627, 4627, 4627, 4627, 4627,
     4627, 4628, 4628, 4629, 4629, 4629, 4629, 4630, 4631, 4632,
     4632, 4633, 4634, 4634, 4634, 4634, 4634, 4635, 4635, 4635,
     4635, 4635, 4636, 4637, 4637, 4637, 4637, 4637, 4637, 4637,
     4638, 4639, 4640, 4641, 4642, 4643, 4644, 4644, 4645, 4646,
     4647, 4647, 4647, 4649, 4650, 4650, 4650, 4651, 4651, 4652,

     4652, 4652, 4652, 4652, 4653, 4653, 4654, 4654, 4655, 4656,
     4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656, 4657, 4658,
     4659, 4659, 4659, 4660, 4660, 4661, 4662, 4663, 4664, 4665,
     4666, 4666, 4668, 4669, 4669, 4670, 4671, 4671, 4671, 4671,
     4672, 4672, 4673, 4674, 4675, 4675, 4675, 4675, 4676, 4676,
     4676, 4677, 4677, 4677, 4678, 4679, 4680, 4680, 4682, 4683,
     4683, 4683, 4683, 4683, 4684, 4684, 4685, 4686, 4687, 4687,
     4687, 4687, 4688, 4688, 4688, 4689, 4689, 4690, 4690, 4692,
     4693, 4693, 4693, 4693, 4693, 4694, 4694, 4695, 4696, 4697,
     4697, 4697, 4697, 4698, 4699, 4700, 4701, 4701, 4702, 4702,

     4704, 4705, 4705, 4705, 4705, 4705, 4706, 4706, 4707, 4708,
     4709, 4710, 4711, 4712, 4712, 4712, 4714, 4715, 4716, 4716,
     4716, 4716, 4717, 4717, 4718, 4719, 4720, 4720, 4720, 4720,
     4722, 4723, 4723, 4723, 4724, 4725, 4726, 4727, 4727, 4729,
     4730, 4731, 4732, 4732, 4734, 4735, 4736, 4737, 4737, 4737,
     4738, 4740, 4741, 4742, 4743, 4745, 4746, 4747, 4748, 4750,
     4751, 4752, 4753, 4755, 4756, 4757, 4758, 4760, 4761, 4762,
     4763, 4765, 4766, 4767, 4768, 4770, 4771, 4772, 4773, 4775,
     4776, 4777, 4778, 4780, 4781, 4782, 4783, 4785, 4786, 4787,
     4788, 4790, 4791, 4792, 4793, 4795, 4796, 4797, 4798, 4800,

     4801, 4802, 4803, 4805, 4806, 4807, 4808, 4810, 4811, 4812,
     4813, 4815, 4816, 4817, 4818, 4820, 4821, 4822, 4823, 4825,
     4826, 4827, 4828, 4830, 4831, 4832, 4833, 4835, 4836, 4837,
     4838, 4840, 4841, 4842, 4843, 4845, 4846, 4847, 4848, 4850,
     4851, 4852, 4853, 4855, 4856, 4857, 4858, 4860, 4861, 4862,
     4863, 4865, 4866, 4867, 4868, 4870, 4871, 4872, 4873, 4875,
     4876, 4877, 4878, 4880, 4881, 4882, 4883, 4885, 4886, 4887,
     4888, 4890, 4891, 4892, 4893, 4895, 4896, 4897, 4898, 4900,
     4901, 4902, 4903, 4905, 4906, 4907, 4908, 4910, 4911, 4912,
     4913, 4915, 4916, 4917, 4918, 4920, 4921, 4922, 4923, 4925,

     4926, 4927, 4928, 4930, 4931, 4932, 4933, 4935, 4936, 4937,
     4938, 4940, 4941, 4942, 4943, 4945, 4946, 4947, 4948, 4950,
     4951, 4952, 4953, 4955, 4956, 4957, 4958, 4960, 4961, 4962,
     4963, 4965, 4966, 4967, 4968, 4970, 4971, 4972, 4973, 4975,
     4976, 4977, 4978, 4980, 4981, 4982, 4983, 4985, 4986, 4987,
     4988, 4990, 4991, 4992, 4993, 4995, 4996, 4997, 4998, 5000,
     5001, 5002, 5003, 5005, 5006, 5007, 5008, 5010, 5011, 5012,
     5013, 5015, 5016, 5017, 5018, 5020, 5021, 5022, 5023, 5025,
     5026, 5027, 5028, 5030, 5031, 5032, 5033, 5035, 5036, 5036,
     5037, 5037

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   24,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   39,   41,   42,   39,   43,   39,   44,   45,   46,
       47,   48,   49,   50,   51,   39,   52,   39,   53,   39,
       54,   55,   56,   57,   58,    1,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   39,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   39,   83,    1,   84,   85,    1,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86
    } ;

static yyconst flex_int32_t yy_meta[87] =
    {   0,
        1,    2,    3,    4,    2,    5,    6,    7,    8,    1,
        9,   10,   11,   12,   13,    1,   14,    1,   15,   16,
       17,   17,   17,   17,   17,   17,   18,   19,   20,   21,
       22,    1,   23,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   25,   26,   27,   28,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   29,   30,   31,   32
    } ;

static yyconst flex_int32_t yy_base[4821] =
    {   0,
        0,    2,   22,    0,  107,  118,  173,    0,  259,    0,
      345,    0,  431,    0,  515,  517,  571,    0,  121,  141,
      657,    0,  741,  743,  799,    0,  885,    0,  970,  981,
      991, 1010,  139,  531, 1033, 1039, 1122,    0,  533,  757,
     1208,    0, 1294,    0,  768, 1061, 1378, 1380, 1075, 1094,
      771, 1406, 1409, 1420, 1503,    0, 1588, 1670, 1431, 1442,
     1591, 1594, 1620, 1634, 1681, 1704, 1718, 1764, 1848,    0,
     1461, 1471, 1934,    0, 2019, 2030, 2053, 2064, 1724, 1738,
     1770, 1791, 2080, 2103, 2113, 2131, 2149, 2163, 1013, 1097,
     1811, 1825, 2142, 2165, 2179, 2181, 2033, 2195, 2219, 2239,

     2225, 2264, 2266, 2284, 2282, 2298, 1623, 1797, 2309, 2337,
     2356, 2370, 2390,    0, 2474, 2476, 2323, 2495, 2506, 2525,
     2580,    0, 2666,    0, 2752,    0, 2838,    0, 2922, 2924,
     2359, 2535, 2312, 2559, 3008,    0, 2938, 2940, 3094,    0,
     2962, 2964, 3180,    0, 3264, 3267, 3287,    0, 3371, 3374,
     3389, 3392, 3419, 3497, 3395, 3417, 3577,    0, 3663,    0,
     3439, 3500, 3749,    0, 3835,    0, 3920, 4003, 4087,    0,
     2983, 3449, 3463, 3515, 4173,    0, 3533, 3938, 3970, 4035,
     4259,    0, 3518, 3923, 4343, 4346, 4399, 4476, 4553, 4630,
     3539, 4006, 4708,    0, 4794,    0, 4361, 4367, 4417, 4431,

     4437, 4451, 4453, 4490, 4055, 4508, 4492, 4506, 4522, 4580,
     4599, 4602, 4644, 4685, 4879, 4955, 5032,    0, 4899, 4918,
     4560, 4609, 4975, 4994, 5116, 5119, 4921, 5122, 5137, 5140,
     5151, 5171, 5197, 5203, 5235, 5254, 5264, 5288, 5291, 5298,
     5353,    0, 4053, 5439, 5525,    0, 4633, 5611, 4660, 4941,
     5009, 5213, 5695, 5697, 5770,    0, 5856,    0, 5940, 5942,
     6014,    0, 6099, 6110, 5320, 5330, 5711, 5713, 5727, 5729,
     5956, 6129, 6139, 6194,12190,32864,32864,32864,32864,32864,
        1,    0,  155,32864, 1482, 2076,32864,32864,32864,   98,
       14, 4391,  528, 2546,  561, 4535, 6161,12159,32864, 5975,

      134, 1491, 1692,  754, 1653, 1752, 6213,32864,32864,  161,
    32864,  117,12158,32864,12115, 2951, 5275, 6208,32864,32864,
    32864,32864,    0,32864,  125,32864,32864,    0,    0,  531,
      968,32864,12120,    0, 2487,    0,32864,32864,32864,32864,
    32864,32864,  506,12145, 5970,32864,  544,32864,32864,32864,
        0,32864,  537,32864,    0,32864,32864,32864,32864,32864,
    32864,  541,32864,32864,32864,32864,32864,    0,32864,  732,
        0,32864, 4381, 6298, 6383,    0,32864,12146,32864, 1399,
     4025,12151,  785,32864,32864,32864,32864,32864,32864,  747,
    12087,  714,12081,32864,12091,32864, 2124, 3992,32864,32864,

    32864,32864,32864, 4544,  778, 5310,32864,32864,32864,32864,
    32864, 5708,  976, 5740,32864, 6465, 2208, 2935, 3983, 1010,
     6391,   33,    0, 6227, 1116, 5979,32864,  980,12135,12115,
     6123,  111,32864,12109, 4010, 6253, 6399,12082,32864, 6403,
     6411, 6417, 6450, 6478, 6431, 6491, 6543, 6548, 6558, 6563,
     6578, 6591, 6595, 6607, 6625, 6641, 6646,32864,    0,32864,
        0,    0,    0,  987,  948, 5185, 6258, 4698, 6658,12103,
     6262, 6270, 6407, 6599, 1024,    0,32864, 6674,  990,32864,
    32864,    0,32864,  994,32864,32864,32864,32864, 6678,32864,
     4622, 4892,32864,32864,32864,32864,32864, 1839, 1024,32864,

    32864,32864,32864,32864,32864, 1037,32864,32864,32864,32864,
    32864, 1055,32864,32864, 6742,    0,    0,32864,12097, 1095,
     4969,    0,12067,12054,12045,  456,12025,12043,12038,  492,
    12026,32864, 6697, 6706,32864,32864,32864, 1369,32864, 6717,
    12029,12016,32864,32864,32864,32864,32864, 2176, 1379,32864,
    12062,32864,32864,32864,32864, 1395,32864,32864,    0, 3957,
     2572, 4548,32864,  974,12036, 1410,12052,12073,32864, 5022,
    32864,  999,32864,    0,32864,32864, 6687, 6721,32864,32864,
    32864,32864,32864, 1416,32864, 6460, 6498, 5752, 6726,12052,
     6747,    0, 1602,32864,32864, 1026,12022, 1426,12047,12063,

    32864,32864, 6753, 1607, 1030,32864,32864, 1427,  791, 6761,
    32864,32864,32864,32864,32864,12049, 1437,    0,32864,32864,
    32864,32864, 1438,32864,32864,32864,12051, 1087,32864,32864,
    32864, 1452, 1109,    0, 1475,    0,    0,    0,12033, 1614,
     1421,32864, 1610, 1614, 1658, 2331, 1673,32864,32864,32864,
    32864,32864, 5164, 5760,32864,32864,32864, 1644,32864,32864,
    32864,32864,32864,32864,32864,    0,32864,    0,    0, 1672,
    32864,32864,    0,32864,    0,    0,    0, 1720,32864, 6003,
     6290,32864,32864,32864,32864, 1728,32864, 6506, 6780,32864,
    32864,32864,32864, 1759,    0,32864,    0,11977,11967,32864,

    32864,32864,32864,32864, 1766,32864,32864, 6784, 6788,32864,
    32864,32864, 1776,11978,    0, 6792, 6805,    0,    0,    0,
    11998,32864, 1792, 2028,    0,32864, 1039,32864,    0, 6820,
        0,32864, 6824, 6828, 6832,    0,    0,32864,32864,32864,
    32864,32864, 1795,11946,11943, 1438,11931,32864,32864,32864,
    32864,32864,11982,32864,32864, 1809,    0, 1827,32864,32864,
    32864,32864, 2008,32864,32864, 6838,32864,32864,    0,32864,
     6848, 2010, 6852,    0,32864,    0,32864,11970,    0,    0,
     2014,    0,32864, 1697, 6857,    0,32864,    0,    0,    0,
        0,    0,32864, 2029,    0,32864, 6861,32864, 6871,    0,

        0,    0,    0,    0, 1747, 2042,32864,32864,11892,11887,
    11895,11884,11888,  491,11878,11885,32864, 1757,    0,32864,
      142, 2147, 2209,    0,    0,32864,11909,11897,11897,11884,
        0,    0,    0,    0,32864, 6879, 6890,32864,32864,11872,
    32864,32864, 6898,11878, 2055, 6902,11872,11869,11866,11884,
    11836,11876,32864,  720,32864, 6910, 6921, 6929, 6937, 2158,
    32864, 6942, 6956, 6970, 6984,32864, 6998, 2079, 7002,32864,
     7006,32864,32864,32864,32864,32864,32864,32864,32864, 2089,
    11853, 7010,32864, 7022, 7026, 7030,32864,32864, 7041,32864,
     2097,11843, 7052,32864,32864,32864,32864,32864, 7059, 2180,

    32864, 7067,11805,    0, 7072, 7079,32864,32864,11796,32864,
     7083, 2210,11797,11828, 1408,32864,32864,32864,11786,11826,
     1440,32864,32864,32864,32864,32864, 2214,11800,    0,    0,
        0,32864,11799,32864,32864,32864,32864,32864,11795, 2237,
        0,32864,32864,32864,32864,32864,32864,32864,11794, 2238,
        0,32864,32864,    0,32864,32864,    0,11758,32864,32864,
     2240,    0,32864,32864,    0,11751, 2246,32864,32864,    0,
    32864,32864,    0,11750,32864,32864, 2262,    0,32864,32864,
        0,11748, 2268,32864,32864, 1758,32864, 2499,32864,32864,
    32864,32864,32864,32864, 2288,32864, 7087, 7094,32864,32864,

    32864,32864,32864, 2333,11772,11769,11709,32864,32864,32864,
    32864,    0,11734, 2350,32864,    0,32864,32864,32864,32864,
    32864,32864, 7102, 2365,32864, 7106, 7114,32864,32864,32864,
    32864,32864, 7130, 2465,32864,    0,32864,32864,    0,32864,
     2502,    0,32864,32864,    0,    0,32864,32864, 2504,11740,
    11780, 1450,32864,32864,    0,32864,    0,    0,    0,11664,
     2516,  706, 2049, 7134,    0,32864,    0,    0,    0, 2526,
     7081,32864,32864,32864,32864, 2548, 1556,    0,11674,    0,
    32864,32864,32864,32864, 2913,    0,    0,    0,11673,    0,
    32864,32864,32864,32864,32864, 2960,    0,    0,    0,    0,

        0,    0,    0,11672, 2973,    0,    0,    0,    0,    0,
    11671, 3253,32864,32864,32864,32864, 3262,32864,11602,32864,
     7161, 7169,32864,32864,    0,32864, 3265,32864, 7177,11614,
     7184, 7193,    0, 7201,32864,32864,32864,32864, 3439, 3360,
    11596,32864, 7205, 7214, 7222,32864,32864, 7231,32864,32864,
    32864, 3369,11637, 7240,32864, 3406,32864,32864,32864, 3390,
     3385,11586,11591,11572,32864,32864,32864,32864,32864,32864,
     3399,32864,32864,32864,32864, 3415,11630, 3438,11628,11627,
    11626, 3478,    0, 3463,32864,    0,    0,    0, 3440, 3459,
     2432, 7187, 7208, 3952, 3481, 3495,    0,32864,    0,    0,

    32864,    0,11606, 3504,11601, 1757, 3552, 7277,32864,32864,
     3558, 4375,32864, 4428, 7281, 3513, 1664, 1376,32864,11614,
     7291, 7300, 7304,11589, 1778, 7326, 7334, 7342, 7346, 7358,
        0, 7373, 7378, 7401, 7257, 7409, 7419, 7428,32864,32864,
     7447,32864,32864, 1787, 7433, 7468, 7477, 7493, 7497,11579,
    32864, 7505, 7509,11569, 7513, 7524, 7535, 7540,    0, 7548,
     7391, 2062, 4403, 7553,11523, 7561,32864, 7565, 7580, 7592,
        0, 2116, 1685,    0, 2111,11578,11580, 2944,11578, 4641,
    11529,32864,    0, 7596,32864,32864,    0,32864, 7606,11556,
    32864, 1833,    0,    0,    0,    0, 7611, 7619, 7627, 7638,

     7642, 2096, 7712,    0, 7797, 7668, 7805, 7809, 7650, 7813,
    32864, 7672,11570, 7818,11550,11566,11556,11486, 2518,11459,
     3467,11474,11456,11518, 7659, 7686, 3549, 7836, 3550, 7895,
     7844, 3411,11499, 4604,11467,11455,11451,11446, 2500,11437,
     2228,11431,11442,11431, 4289,11435, 2926,11400, 1662,11379,
    11384, 3897, 7848, 7856, 7864, 7883,11383,11386, 7874, 7908,
        0, 7887,    0,32864, 1651, 7921, 7977, 7992,11418, 7996,
     7879, 7309, 6915,    0,    0, 8010,11366,11352,32864,    0,
     7916, 8025, 8037, 8049, 8056, 8061, 8043, 8074,11393, 8083,
    11367, 8079, 8087, 8094, 8134, 8142, 8146, 8150, 8154, 8162,

     8182, 8192, 8196, 8202, 8230, 8212, 8273, 8277, 8281, 8285,
     8290, 8318, 8322, 8332, 8326, 8336, 8365, 8370, 8374, 8405,
     8410, 8415, 8419,    0,    0,    0,11348,11359, 8244,11383,
     8384, 8424, 8447, 8451,    0, 8460, 8464, 8478, 8490,32864,
     7935, 4932, 5136,    0, 8469, 7352,    0, 8494, 8115, 8510,
     8548,11377, 8518,11343,11329,11332, 2177,11319,11336,11329,
     2281,11306,    0, 8523, 2920, 4593, 8527, 8531,11304,    0,
    11289,11292,11287,11276,11283,11273,11251,11257,11240,11227,
    11238, 8538,11226,11228, 8542, 8556,32864,    0, 8568, 8560,
     3281,    0, 8572,11261, 8560, 8601,    0,11242,32864, 8611,

    11199, 8626, 8630, 8634, 8656,11242, 8660, 8664,11240, 8668,
     8690,    0, 8698,    0, 8706, 8710, 8718,    0, 4934, 8726,
    11232, 8703, 2979, 4945,11213,32864, 8736, 3924, 4938, 3484,
    32864,32864,11233, 2202, 8755, 3927,32864,32864,32864,32864,
     4020,11227,11226, 2213,11215, 2531,    0, 4412,11190,32864,
    32864,    0, 2087,32864, 2334, 3373, 3461,32864, 8759,    0,
        0,    0,    0,    0,    0, 8763, 8767,    0,    0,11137,
    11128, 8774,11127,11107,    0, 8778,32864,32864,32864,11107,
    11107,11110, 4343,11160, 4373, 8782, 8786, 8794, 8808, 8812,
     8816, 8821, 8827, 8835,11091,    0,    0,11099,11082,11088,

    11081,11072,11124,32864, 3963, 8839, 4038,    0, 3974, 4998,
        0,    0,32864,    0,    0,    0, 4074, 8843,    0,    0,
        0,    0, 8847, 8858,11098, 8876, 8880,32864,    0, 4465,
        0,    0,11039,11039,11031,11034, 1574,11016,11001,10999,
    10995, 4480, 2165, 2525,11017,11011, 5153, 4362,    0,    0,
    10986, 2943,10986,10992,    0,    0,    0,    0,11019, 8865,
    32864, 8585, 7584,32864,32864,32864,32864,11007,11000,10963,
     8888, 8896, 8906, 8910,32864, 8914, 4689,32864, 8928, 8942,
     8956, 8970, 8974, 8978,10949,10975, 8982, 8987,10973, 8995,
    10961, 9001, 9009,    0, 9031,    0, 9039, 9043, 9051, 9055,

     9059, 9071,32864,32864,32864,10931,32864,    0, 9077,10973,
     9064, 9087, 4406, 3985, 3443,10976,10969,10915,10955,10912,
    32864,    0,    0,10925,10924,10923,32864,32864,32864,32864,
    32864,32864,32864,32864,    0,10928, 9072,    0,    0,    0,
    10926, 9079,    0,10914, 9087,    0,10910, 9091, 9114, 5017,
    32864, 9118,32864, 4576,10848,    0,10907, 9108,    0, 9139,
    32864,32864,32864, 9143, 9151, 9159,    0,    0,    0,32864,
        0,10911,10867,    0,32864,    0,10839,10846, 4613, 9166,
     9170,    0,    0,    0,10838,10837, 3970,10827,10833,10832,
    10822,10814,10811, 5147,    0,    0,10869,    0,    0,    0,

        0,    0,10868,    0,    0,    0,    0,10858,10855,    0,
        0,    0,10854,10852,    0,    0,10783, 9174, 9182, 9192,
    10796, 9196, 9200, 9216,32864, 9221,10791, 9227, 9237, 9245,
     9253, 9257, 9261,32864, 9273, 5334,    0, 5985,10818,10778,
     9277,10809, 9285, 9293,    0, 9303,    0, 9311, 9315, 9323,
     6586, 5130,10757,10754, 5239, 4489,10751,10745,10748,10808,
     4664, 5008,10790,10801,10791,    0, 4660,10732, 4571,32864,
    32864,32864, 1028,10720,10771,10706,10695, 5153,10689,10705,
    10704,10699,10579, 6470,10632,10614,32864, 4870, 4912,    0,
    32864,32864,32864, 5140,10562, 5209, 5268, 9328, 9332, 3987,

     4064,10592, 9342, 9349, 9370, 9377, 9386, 9399, 9407,    0,
     9415, 9423, 9428, 9441, 9445,32864,    0, 5284,32864,10596,
     9457,10544, 9466, 9472,10576, 4433,32864,    0,    0,10570,
     4504, 9485, 9478, 9499, 9504, 9512, 9520,    0,10571, 9525,
    10522,10508,10473,10474,10481,10468,10511,32864,10497, 9527,
     4883, 4449, 4939, 4481, 9571, 9533, 9550, 3473,10412, 4840,
    10421,10434,10398,10385,10401, 2262,10383,10378,10384, 5060,
     2882,10384,10364,10346,10340,10323,10321, 4833,10327,10311,
    10282, 1546,10255,10260,10247,10239,10244, 9559, 9563, 9584,
    10240,10219,    0, 9580, 9649, 9618, 9597, 9664, 9669, 9682,

    10255,10225, 6119, 6553, 6961, 4264, 7120, 7122, 8933, 4288,
        0, 9686,10194,10186, 9697,32864,10242, 9712, 9716, 9734,
     9738, 9757, 9761, 9779, 9783,32864, 9808, 9815, 9819, 9390,
    10161, 9827, 9847, 9862, 9866, 9875, 9879, 9883, 9894, 9912,
     9923, 9928, 9940, 9956, 9960, 9968, 9972, 9976,10008,10013,
    10022,10041,10052,10057,10061,10069,10090,10097,10102,10107,
    10135,10139,10146,10150,10154,10182,10187,10191,10195,10202,
    10231,10164,10151,10235,10239,10244, 7988, 8649, 9626,10252,
    10145,10148,10135,10149,10141,10144,10127,10106,10113, 9611,
    32864,    0, 5993,32864,10163, 9801, 4951,10099,10091,10104,

    10272,10080,10085,10071,10077,10073,10284,10071,10069,10052,
    10289,32864,10072,10293,10301,10310,10079,32864,10075,10298,
    10321,32864,10335,    0,32864,10003,10018,10339,10347,10355,
    10359,    0,10363,10066,32864,10055,10371,32864, 5140, 4565,
    10048, 5224, 4624,10033,10029, 9953, 9961, 9945, 9942, 9940,
     9911,    0, 4380,10394,10402,32864,10410, 9878,10416,10428,
    10436,32864,32864, 9877, 9877,32864,10440,10447, 9918, 9907,
     9905, 4937,32864, 9901, 9852, 9836, 9836, 9848, 9828, 9816,
     9796, 9800, 9803, 9793, 9850, 9827, 9828, 5672, 5293, 9800,
     9803, 9798, 9786, 9776, 9804,32864, 9802,10441, 7486, 9744,

     9711, 8311,10453, 9707, 9777,32864, 9733, 9725,32864,10464,
    10472,10486,10490,32864,    0,10494,10502,32864, 9766,32864,
     9760,10490, 5301, 4985, 9740, 5297, 9755,32864, 9758, 9743,
    32864, 9742,10504, 9733,32864, 9721,10508, 9716,32864, 9715,
    10512, 9711,32864, 9696,10525,10517, 5964, 9680, 9642, 9691,
    32864, 9686,10532, 9627, 9621, 9620, 9603,32864, 9609, 9598,
     9592, 9586, 9587, 9581,    0,32864, 9624,32864, 9614, 9612,
     9610, 9596, 9590, 9523,10555,10559,10563,10571,10578, 9567,
     9563, 9512,    0,10582, 5148, 9505, 9508, 9519, 5702, 1732,
     9509,    0,10667, 9507, 9481,32864, 9487, 9469, 9474, 9469,

     9464, 6118, 6183, 2060, 4428, 9469,32864,32864,10590,10595,
        0,10623,32864, 9505,32864, 5723,32864,10752,10756,32864,
    32864, 9479, 9485, 6162,10768,10611,10782, 9469,10627,10794,
    10635, 9476,10639, 9417, 9414, 9404, 9388, 9361, 9426,32864,
    10634, 9406, 9405,10866,10798, 9340, 9329, 9309, 5186, 9325,
     9310, 9328, 9289, 9288, 9288, 9294, 9284, 9285, 9270, 9268,
     9266, 9254, 9247, 9216, 9225, 9220, 9212, 9196, 9202, 9189,
     9175, 9170, 9133, 3361, 9142, 9184, 9078, 9057, 9055, 9064,
     9052, 9039, 9027, 9024, 6103, 9009, 9004,10803,10829, 9041,
    10846,10874,10885,10903,10898,32864,10944,10952, 9054,10950,

    10975,  127,10989,32864, 8901, 4448,32864,  527, 9267,32864,
     9792, 5744, 4486,    0,  679,  723,    0,10993,11005,11017,
    11024,11036,11043,11048,11055,11075,11068,11087,11080,11125,
    11131,11135,11139,11143,11172,11178,11245,11185,11189,11277,
    11281,11285,11290,11318,11322,11330,11335,11339,11350,11367,
    11378,11382,11386,11414,11425,11429,11433,11462,11466,11470,
    11474,11478,11483,11511,11519,11547,11555,11559,11564,11568,
      919,  988,32864,32864, 1007, 1335,10661, 1341, 1359, 1397,
     1572,11096, 1609, 1622, 1652, 1761, 1966, 2086,10893, 2214,
     2225, 2292, 2318, 2307,10965,32864, 2410, 2426, 2431, 2522,

    11219,11061,11223, 6148, 2548,32864,11217, 2505,    0,11596,
    11600,11605, 2949,32864,11496, 2950, 2973, 5752, 3192, 3316,
     3351, 3369, 4498, 3422, 4488,11609,32864,11231, 3439, 3427,
    11371,32864, 3448,32864, 3469, 3478, 5885, 3507, 3513, 3858,
     3973,32864,    0, 5208, 6199, 3999,32864, 3991, 4026, 4036,
     4066,32864,11613, 4352,11636,11551,11644, 4351, 4403,32864,
    11631, 4407,32864,32864, 4462,    0, 4585,32864,11638, 4596,
    32864,11644, 4636,32864,11651, 4643,32864,11664, 6232,32864,
     4604, 4683,32864,11668, 4643, 4813, 4901,    0, 4901, 4918,
     4913, 4949, 5048,11134,32864, 5154, 5174, 5186, 5189, 6096,

     7696, 5149, 5175, 5183, 5187,32864, 5251, 5229,32864,11692,
        0, 5262,    0, 5260, 5278, 5275, 5288, 5279, 5690, 6076,
    11378, 6171,11777,11781, 6154,11793,11807,    0,11815,    0,
    11819,11827,11836, 5635, 5647, 5665, 5679, 5687, 5754, 5757,
    32864,32864,11903,11845, 5875, 5883, 5884, 5877, 5890, 5901,
     5908, 5953, 5949, 5935, 6027, 6050, 6039, 6068,11854, 6061,
     6072, 6089, 6082, 6107, 6119, 6117, 6128, 6145, 6133, 6138,
     6148, 6144, 6165, 6170, 6178, 6176, 6183, 6186, 6180, 6187,
     6206, 6180, 6189, 6175, 6192,32864, 6207, 6208,11862,11871,
    11883, 6254, 6252,11876,11911,32864,11920,11974, 6271, 6267,

        0, 6221,32864,11950,11988,12000,12007,12012,12019,12031,
    12038,12043,11890,12025,12056,12063,12070,12084,12104,12112,
    12116,12120,32864,12132, 6269, 6266,12148,12160,32864,12166,
    12179,12196,12200,12208,12212,12240,12245,12249,12256,12260,
    12288,12292,12296,12301,12305,12333,12337,12342,12346, 6246,
     6304,12353,12382,12386,12390,12394,12427,12432,12436,12441,
    12469,12473,12477,32864, 6316, 6315, 6314, 6337, 6336, 6354,
     6343, 6347, 6347, 6352, 6372,11918,11982, 6374, 6372, 6365,
     6380,12481, 6376,12152, 6378,12505,32864,12509,12228,    0,
     6435, 6436, 6386,32864,12518, 6439, 6444,32864,32864,12422,

    12522,32864,    0, 6387, 6411, 6419,32864, 6421, 6417, 6416,
     6425, 6433, 6439, 6444, 6441, 6456, 6459, 6502, 6586, 6486,
     6569, 6487,32864, 6544, 6552, 6556,12526, 6561, 6564,32864,
     6565, 6567, 6572, 6577, 6605, 6609, 6611, 6619, 6620,    0,
     6574, 6626, 6627, 6576, 6565,32864, 6583, 6575, 6586, 6600,
     6600, 6600, 6614, 6610, 6634, 6636, 6633, 6627, 6696, 6697,
     6708, 6709, 6670, 6656, 6660, 6737, 6865, 6674,    0, 6723,
    32864, 6687, 6681, 6696, 6709, 6700, 6737, 6745, 6705, 6726,
     6722, 6743, 6745, 6742, 6742,12545,12549,    0,12561,12575,
     6756, 6753, 6743,12579, 6769,12645,12593, 6781, 6771, 6775,

     6789, 6814, 6802, 6804, 6841, 6819, 6830,12605, 6814,12609,
     6825,12613,12619, 6820, 6847, 6838, 6840, 6853, 6865, 6854,
     6853, 6875, 6880, 6880, 6877, 6877, 6880, 6895, 6901, 6895,
     6907, 6892, 6913, 6918,12626, 6975, 6919, 6915, 6921, 6921,
    12631,12653, 6959,12639,32864, 6918,12681,12723,12727,12745,
    12749,12767,12771,12792,12796,12815,12819,12831,12835,12864,
    12870,32864,12874,12878,12882,12911, 6923, 6919,12915,12919,
    12924,12955,12963,12967,12971,12975,13003,13008,13012,13016,
    13020,13048,13052,13056,13061,13089,13094,13101,13106, 6938,
     6923,13110,13138,13143,13152,13156,13172,13184,13188,32864,

    13192,13200,13205,13220,13235, 6940, 6960,12693, 6957, 6945,
     6974,13239, 6971, 6971, 6979, 6987,12931,13253, 6978, 6996,
    13264,13268,13277,32864,13281, 6990, 7003,13289,13296, 7004,
    13303,32864,13307, 7005, 7003, 7016,32864,32864, 7064, 7030,
     7032, 7035,32864, 7082,32864, 7055, 7130, 7080, 7139, 7086,
     7115, 7116, 7139, 7082, 7156, 7096, 7096, 7100, 7099, 7114,
     7122, 7113, 7122, 7123, 7130, 7136, 7143, 7206, 7214, 7215,
     7221, 7152, 7153, 7166, 7245, 7286,32864, 7170,    0, 7175,
     7180, 7185, 7178, 7195, 7234,32864, 7209, 7196, 7205, 7213,
     7227, 7225, 7243,13314,13321, 7290,32864,13333, 7251,13340,

     7258,13351,13361,13365,13370, 7252, 7261, 7255, 7255, 7272,
     7273, 7279, 7266, 7318, 7286, 7295,13375, 7289,13379, 7289,
    13383, 7301, 7302,13390, 7310,13396, 7325, 7329,13403, 7309,
     7322,13407, 7336, 7349, 7346, 7338, 7339,13411, 7341,13415,
    13419, 7355, 7356,13423, 7368, 7345, 7365, 7370,32864, 7363,
    13432,13457,13461,13479,13486,13504,13508,13526,13444,13530,
    13544,13548,13563,13577, 7374, 7371,13581,13593,13609, 7394,
     7379,13614,13618,13623, 7422,13629,13658,13707,13662,13671,
    13726,13677,13745,13666,13754,13773,13792,13801,13805,13809,
    13813,13820,13841,13848,13855,13860, 7383, 7383, 7404,13869,

    13874,13889,32864,13903,13907,13917, 7396, 7390,13921,13935,
    13949,13764, 7407, 7396,13954,13966,13970, 7409, 7406,13979,
     7407, 7408, 7424,13983,32864,13987,13995, 7426, 7429,13999,
    14006, 7430,14011,14015, 7440, 7461, 7456, 7516, 7463, 7449,
     7457, 7526, 7468, 7621, 7512, 7658,    0, 7519, 7547, 7558,
     7601, 7509, 7632, 7504, 7506, 7497, 7514, 7505, 7528, 7533,
     7549, 7546, 7566, 7555, 7628, 7642, 7651, 7655,32864,32864,
     7589, 7603, 7599, 7614, 7610, 7626, 7614,32864, 7634,    0,
     7631, 7640, 7632, 7648, 7637,14020,14024,14029, 7667,14038,
    14046,14050, 7732, 7744, 7745, 7742, 7742, 7753,14054, 7763,

     7784, 7753, 7753,14058, 7768, 7761, 7757,14062, 7753,14066,
     7781, 7774,14071,14077,14081,14085,14090,14097, 7783,14101,
     7788, 7791,14105,14111, 7804, 7794,14115,14119,14131,14135,
     7809, 7801,14141, 7823, 7856,14151,14155,14180,14184,14202,
    14206,14224,14228,14240,14249,14253,14257,14268,14289, 7819,
    14301,32864,14307, 7819, 7824,14317,14322, 7934, 7846, 7850,
     7860,14326, 7902,14335,14354,14363,14367,14371,14375,14382,
    14395,14410,14414,14425,14429,14442,14462,14472,14476,14446,
    14480,14490, 7858, 7885,14510,14518,14528,14538,14546, 7888,
     7876,14556,14566,14574, 7875, 7882, 7897,14584,14600,14604,

    14608,14618,14622,14626,14630,14637, 7897,14642,    0, 7908,
     7899, 7966,    0, 7915,32864, 7914, 7974,    0, 7913, 7942,
        0, 7944, 7976, 7978, 8104,14646, 7920, 7937, 7938, 7937,
     7937, 7949, 7963, 7953, 8019, 8024, 8025, 8026, 8100, 8128,
     7953, 7967, 7985,32864, 7985, 7986, 8000, 8014, 8022,14651,
    14655,14660,14669,14677, 8029, 8043, 8042,14681, 8052, 8056,
    14685, 8073, 8091, 8075,14689,14693, 8068, 8091,14697,14704,
     8105,14708,14712,14716,14720, 8109,14727,14734, 8116, 8107,
     8115,14742, 8118, 8133, 8116,14746,14753,14757,14761, 8127,
    14765,14773,14777,14795,14802,14819,14824,14842,14849,14855,

    14860,14864, 8116, 8141,14868,14896,14901, 8192, 8153, 8143,
     8155,32864,14905,14909,14917,14937,14945,14984,14949,14978,
    15016,15020,15026,15030,15058,15070,14953, 8147,15078,14957,
     8158, 8156,15087, 8160, 8159,15106, 8179,14965,15115,15119,
    15123,15127,15134,15138,15148,15152,15159,15163,15167, 8165,
        0,32864,32864,    0, 8168, 8206, 8212, 8238, 8239, 8253,
     8259,15171, 8172, 8189, 8194, 8198, 8191, 8201, 8265, 8289,
     8291, 8294, 8639, 8504, 8313, 8221, 8234, 8237, 8242, 8255,
     8273,15176,15180,15185,15194, 8269, 8285,15202,15206, 8288,
    15210,15214, 8289,15220, 8292,15224,15228,15232,15236,15240,

    15244,15251, 8308, 8286, 8288,15255,15259, 8328, 8303,15266,
    15270,15274,15278,15296,15300,15312,15318,15324,15334,15338,
    15342, 8304,15352,15366,32864, 8376, 8308, 8320, 8328,15371,
    15380,15384,15388,32864,15460, 8375, 8373,15399,15412,15545,
    15417,15549,15431,15553,15557,15561,15565,15448,32864,15595,
    15600, 8334, 8340, 8364, 8359,15605,15479,15612,15616, 8364,
     8373, 8456, 8498, 8425, 8427, 8552,32864, 8645,32864, 8376,
     8376, 8375, 8392, 8395, 8471, 8478, 8479, 8494, 8684,32864,
     8435, 8437, 8428, 8449, 8455,15628,15634,15646, 8479,15654,
    15660,15664,15672,15677, 8505, 8516,15681,15685,15689,15693,

     8536, 8509,15697,15701,15705, 8530, 8523, 8554, 8525,15710,
    15714,15728,15732,15740, 8532, 8550, 8546,15749, 8552, 8545,
        0,15753,15764,15768,15777,15787,15796,15805,15815,15822,
    15827,15831,15835,32864,15843,15863, 8549, 8577,15871,15878,
     8576, 8578, 8727, 8863, 8643, 8661, 8594, 8611, 8611, 8677,
     8678, 8683, 8689, 8615, 8636, 8636,15882,15886,15893, 8640,
    15897,15908, 8657, 8689, 8659,15912,15919, 8693, 8671, 8694,
    15923,15928,15933,15940, 8669, 8694, 8679,15949,15953,32864,
    15961,15965,15969,15973,16001,16005,16010,16015,15982,32864,
    16019, 8677,16041,16048, 8714, 8864,    0, 8918,    0, 8761,

     8779, 8711, 8787, 8793, 8795, 8797, 8724,16053,16057, 8740,
     8745, 8772,16061, 8785, 8756, 8785,16065,16069,16077,16095,
     8777, 8776,16101,16105,16109,16113,16117,16121,16149,32864,
     8796,16157,16164, 8790,    0,    0, 8845, 8846, 8857, 8863,
     8888, 8889,16168,16172, 8830, 8855,16176,16180, 8877, 8848,
    16185, 8852, 8875,16192,16203,16207, 8875,16211,16218, 8870,
     8929, 8936, 8943, 8945, 8947, 8948,16222,16235, 8891, 8913,
    16239,16244,16256, 8887,16265,16269,16273, 8905,16277,16284,
     8906, 8957, 8980, 8987, 8994, 9000, 9001,16299,16303,16307,
     8966,16313,16317,16321,16333,32864,16339,16343,16347,16351,

    16358, 8954, 9004, 9006, 9013, 9014, 9016, 9018,16362,16366,
    16370,16376,32864,16380,16384,16395,16402,32864, 9013, 9014,
     9022, 9023, 9024, 9030,16409,16413,16421, 8965, 8973,16427,
    16434, 9037, 9038,32864,32864,16439,16443, 8992,16447,16456,
    16460,16464,16469,16475,16482,16493,16499,16503,16507,32864,
    16511,16518,16525,16537,16541,16548,16552,16556,16563,16570,
    16574,16582,16586,16593,16597,16601,16608,16615,16619,16627,
    16631,16638,16642,16646,16653,16660,16664,16672,16676,16683,
    16687,16691,16698,16705,16709,16717,16721,16728,16732,16736,
    16743,16750,16754,16762,16766,16773,16777,16781,16788,16795,

    16799,16807,16811,16818,16822,16826,16833,16840,16844,16852,
    16856,16863,16867,16871,16878,16885,16889,16897,16901,16908,
    16912,16916,16923,16930,16934,16942,16946,16953,16957,16961,
    16968,16975,16979,16987,16991,16998,17002,17006,17013,17020,
    17024,17032,17036,17043,17047,17051,17058,17065,17069,17077,
    17081,17088,17092,17096,17103,17110,17114,17122,17126,17133,
    17137,17141,17148,17155,17159,17167,17171,17178,17182,17186,
    17193,17200,17204,17212,17216,17223,17227,17231,17238,17245,
    17249,17257,17261,17268,17272,17276,17283,17290,17294,17302,
    17306,17313,17317,17321,17328,17335,17339,17347,17351,17358,

    17362,17366,17373,17380,17384,17392,17396,17403,17407,17411,
    17418,17425,17429,17437,17441,17448,17452,17456,17463,17470,
    17474,17482,17486,17493,17497,17501,17508,17515,17519,17527,
    17531,17538,17542,17546,17553,17560,17564,17572,17576,17583,
    17587,17591,17598,17605,17609,17617,17621,17628,17632,17636,
    17643,17650,17654,17662,17666,17673,17677,17681,17688,17695,
    17699,17707,17711,17718,17722,17726,17733,17740,17744,17752,
    17756,17763,17767,17771,17778,17785,17789,17797,17801,17808,
    17812,17816,17823,17830,17834,17842,17846,32864,17853,17857,
    32864,17869,17901,17933,17965,17997,18029,18061,18093,18125,

    18157,18189,18221,18253,18285,18317,18349,18381,18413,18445,
    18477,18509,18541,18573,18605,18637,18669,18701,18733,18765,
    18797,18829,18861,18893,18925,18957,18989,19021,19053,19085,
    19117,19149,19181,19213,19245,19277,19309,19341,19373,19405,
    19437,19469,19501,19533,19565,19597,19629,19661,19693,19725,
    19757,19789,19821,19853,19885,19917,19949,19981,20013,20045,
    20077,20109, 9073,20140,20171,20202,20233,20264,20295,20327,
    20358,20389,20420, 9074, 9133, 9094,20442,20474, 9127, 9220,
     9134, 9267, 9156, 9324,20505, 9158,20536, 9184,20568,20599,
    20630,20661, 9219, 9277,20692,20724,20756,20787,20818,20849,

     9183, 9344, 9221, 9390,20881,20913,20945, 9279,20976,21007,
    21038,21069,21101,21133,21165,21197,21229,21261,21293, 9325,
     9776,21325, 9391,21343, 9405,21374, 9432,21405, 9433, 9821,
    21437, 9454,21464, 9487, 9877,21496, 9508, 9905,21528, 9633,
    21559,21591, 9638,21607, 9680, 9976, 9698, 9990, 9700,10004,
    21639,21670,21701,21732,21763,21794,21825,21856,21888,21920,
    21952, 9702,10015, 9720,10248,21984,22016,22048,22080,22112,
    22144,22176,22208,22240,22272, 9724,22304,10065,22336,22368,
    22400,22432,22464, 9726, 9960,10091, 9777,10148, 9868,10026,
    10246, 9879,10353,22496,22528,22560,22592,22623, 9916,22654,

    22686,22717, 9964,22748,22779,22810,22841,22872,22904,22936,
    22968,23000,23031,23062,23093,23124, 9966,23155,23186,23217,
    23248,23279,23311,23342,23373,10006,23404,10356,23426,10193,
    10276,23458,10384,10572,10628,23489,23520,23551,23582,10322,
    10347,10811,23614,23646,23678,23709,23740,10045,23771,23803,
    23834,23865,10089,10758,10090,23896,23928,23959,23990,10101,
    24021,10822,10840,24053,24085,24117,24149,24181,24212,24243,
    24274,10899,10237,24305,24337,24369,24401,24433,24465,24497,
    24529,11087,24561,24579,10402,24610,24641,24672,24703,11089,
    24735,24762,11133,24794,11139,24826,24857,24889,24905,24936,

    11185,11279,11281,24960,24992,25024,25055,25086,25117,25148,
    25180,25211,25242,11380,10285,25273,25305,25337,25369,25401,
    25433,11511,11775,25465,25497,25529,25561,25593,25625,25657,
    25689,25721,25753,25785,25817,11515,25849,25881,25913,25945,
    25977,26009,11820,10321,12256,11836,11845,10352,13016,11907,
    26041,26073,26105,26137,26168,26199,26231,26262,26293,26324,
    26355,10357,12202,26386,11943,10403,26417,26449,26481,10446,
    26513,26545,26576,26607,26638,26669,12294,26700,26731,26762,
    26793,26825,26857,26888,26919,10404,10448,12384,26941,26972,
    27003,27034,27065,10486,12637,12471,27097,27128,27159,27191,

    27222,27253,27284,27315,27346,27370,27402,12344,10627,27433,
    27464,27495,27526,12425,27558,27590,27622,27654,27686,27717,
    27748,27779,12568,27810,27842,12569,27874,10546,27892,27923,
    27954,27985,10834,28016,28024,28056,28088,28120,28151,28182,
    12643,28213,28245,28277,10957,28309,28341,28373,28405,28437,
    28469,28501,13052,13063,28533,28565,28596,28627,12872,12913,
    28658,28690,10578,28721,13014,28752,28783,13112,28805,28836,
    28867,28898,28929,28960,13622,28991,29023,29054,29085,29116,
    29147,29178,29203,29234,29258,29290,10629,29321,29352,29383,
    13271,29415,29447,29479,29511,29543,29574,29605,29637,13296,

    29669,29687,29718,10744,29734,29766,29798,29829,29861,29893,
    10757,29925,29957,29989,30021,30053,30085,30117,30149,30181,
    30212,30244,30276,30307,30329,30360,13297,10791,30391,30422,
    30453,30484,30515,30538,30563,30595,30627,30658,30689,30720,
    13315,30752,30784,30815,30846,30878,30894,30926,30957,30989,
    31021,31053,31085,31117,31148,13461,31179,31210,31241,31272,
    11094,31296,31328,31360,31392,10991,10993,13537,31424,31456,
    31488,31520,31552,13538,13625,31584,31616,31648,31680,31712,
    31744,31776,31808,31840,31872,31904,31936,31968,10792,31999,
    11894,12164,32031,32063,32095,32127,13627,13660,32159,32191,

    32223,32255,32287,32319,32351,32383,32415,32447,32479,32511,
    32543,32575,32607,32639,32671,32703,32735,32767,32799,32831
    } ;

static yyconst flex_int16_t yy_def[4821] =
    {   0,
     4192, 4192, 4191,    3, 4193, 4193, 4191,    7, 4191,    9,
     4191,   11, 4191,   13, 4192, 4192, 4191,   17, 4194, 4194,
     4191,   21, 4195, 4195, 4191,   25, 4191,   27, 4196, 4196,
     4192, 4192, 4197, 4197, 4198, 4198, 4191,   37, 4199, 4199,
     4191,   41, 4191,   43, 4192, 4192, 4192, 4192, 4200, 4200,
     4201, 4201, 4202, 4202, 4191,   55, 4203, 4203, 4204, 4204,
     4205, 4205, 4206, 4206, 4206, 4206, 4206, 4206, 4191,   69,
     4207, 4207, 4191,   73, 4208, 4208, 4208, 4208, 4192, 4192,
     4209, 4209, 4209, 4209, 4210, 4210, 4211, 4211, 4192, 4192,
     4212, 4212, 4213, 4213, 4192, 4192, 4192, 4192, 4214, 4214,

     4192, 4192, 4192, 4192, 4215, 4215, 4216, 4216, 4217, 4217,
     4218, 4218, 4191,  113, 4219, 4219, 4220, 4220, 4221, 4221,
     4191,  121, 4191,  123, 4191,  125, 4191,  127, 4222, 4222,
     4192, 4192, 4223, 4223, 4191,  135, 4224, 4224, 4191,  139,
     4225, 4225, 4191,  143, 4226, 4226, 4191,  147, 4227, 4227,
     4192, 4192, 4192, 4192, 4192, 4192, 4191,  157, 4191,  159,
     4192, 4192, 4191,  163, 4191,  165, 4228, 4228, 4191,  169,
     4192, 4192, 4192, 4192, 4191,  175, 4192, 4192, 4229, 4229,
     4191,  181, 4230, 4230, 4192, 4192, 4231, 4231, 4232, 4232,
     4233, 4233, 4191,  193, 4191,  195, 4234, 4234, 4234, 4234,

     4235, 4235, 4235, 4235, 4236, 4236, 4237, 4237, 4238, 4238,
     4239, 4239, 4240, 4240, 4241, 4241, 4191,  217, 4242, 4242,
     4243, 4243, 4244, 4244, 4245, 4245, 4246, 4246, 4246, 4246,
     4247, 4247, 4232, 4232, 4248, 4248, 4249, 4249, 4250, 4250,
     4191,  241, 4251, 4191, 4191,  245, 4252, 4191, 4253, 4253,
     4254, 4254, 4255, 4255, 4191,  255, 4191,  257, 4256, 4256,
     4191,  261, 4257, 4257, 4258, 4258, 4259, 4259, 4260, 4260,
     4261, 4261, 4262, 4262, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4263, 4264, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4265, 4266, 4267, 4191, 4191, 4268,

     4191, 4269, 4191, 4270, 4191, 4271, 4272, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4273, 4273, 4273, 4191, 4191,
     4191, 4191, 4274, 4191, 4191, 4191, 4191, 4275, 4276, 4277,
     4277, 4191, 4278, 4279, 4191, 4280, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4281, 4191, 4191, 4191, 4282, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4283, 4191, 4191,
     4284, 4191, 4285, 4191, 4285, 4286, 4191, 4191, 4191, 4191,
     4287, 4288, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4289, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4290, 4191,
     4291, 4191, 4191, 4292, 4191, 4191, 4191, 4191, 4293, 4191,
     4191, 4191, 4191, 4191, 4294, 4295, 4295, 4296, 4191, 4295,
     4295, 4295, 4295, 4295, 4295, 4295, 4295, 4295, 4295, 4295,
     4295, 4295, 4295, 4295, 4295, 4295, 4295, 4191, 4297, 4191,
     4297, 4297, 4297, 4297, 4191, 4191, 4191, 4298, 4299, 4191,
     4300, 4191, 4191, 4191, 4191, 4301, 4191, 4191, 4191, 4191,
     4191, 4302, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191,  515, 4303, 4191, 4191, 4191,
     4191, 4304, 4304, 4304, 4304, 4304, 4304, 4304, 4304, 4304,
     4304, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4305, 4305,
     4191, 4191, 4191, 4306, 4307, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4308, 4191, 4191, 4309, 4309, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4310, 4311, 4191,
     4312, 4313, 4313, 4191, 4191, 4191, 4314, 4191, 4191, 4191,

     4191, 4191, 4191, 4313, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4315, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4316, 4316, 4316, 4316, 4316, 4191, 4316,
     4317, 4191, 4317, 4317, 4317, 4317, 4317, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4318, 4191, 4318, 4318, 4318,
     4191, 4191, 4319, 4191, 4319, 4319, 4319, 4319, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4320, 4191, 4321, 4321, 4321, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4322, 4191, 4191, 4322, 4322, 4322,
     4191, 4191, 4191, 4322, 4323, 4191, 4324, 4191, 4325, 4326,
     4327, 4191, 4328, 4191, 4191, 4329, 4330, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4331, 4191, 4191, 4191, 4332, 4333, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4334, 4191,
     4191, 4191, 4191, 4335, 4191, 4336, 4191, 4191, 4336, 4336,
     4336, 4337, 4191, 4191, 4191, 4338, 4191, 4339, 4339, 4339,
     4339, 4339, 4191, 4339, 4340, 4191, 4191, 4191, 4341, 4342,

     4342, 4342, 4342, 4342, 4191, 4342, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4343, 4191,
     4344, 4344, 4344, 4345, 4346, 4191, 4191, 4191, 4191, 4191,
     4347, 4348, 4349, 4350, 4191, 4191, 4191, 4191, 4191, 4351,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4352, 4352, 4352, 4353, 4191,
     4191, 4354, 4354, 4354, 4354, 4191, 4191, 4191, 4191, 4191,
     4355, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4356, 4191, 4191, 4357, 4191,
     4191, 4191, 4358, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4359, 4360, 4191, 4191, 4191, 4191, 4361, 4191,
     4191, 4191, 4360, 4360, 4360, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4362, 4363,
     4364, 4191, 4365, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4366, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4367, 4191, 4191, 4368, 4191, 4191, 4368, 4369, 4191, 4191,
     4368, 4370, 4191, 4191, 4370, 4371, 4191, 4191, 4191, 4372,
     4191, 4191, 4372, 4373, 4191, 4191, 4191, 4374, 4191, 4191,
     4374, 4375, 4191, 4191, 4191, 4374, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4376, 4377, 4191, 4191, 4378, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4379, 4191, 4191, 4379, 4191,
     4379, 4380, 4191, 4191, 4381, 4381, 4191, 4191, 4191, 4381,
     4381, 4381, 4191, 4191, 4382, 4191, 4382, 4382, 4382, 4191,
     4382, 4191, 4382, 4191, 4383, 4191, 4383, 4383, 4383, 4383,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4384, 4385, 4386,
     4191, 4191, 4191, 4191, 4191, 4387, 4388, 4389, 4390, 4391,
     4191, 4191, 4191, 4191, 4191, 4191, 4392, 4393, 4394, 4394,

     4394, 4394, 4394, 4395, 4394, 4396, 4396, 4396, 4396, 4396,
     4397, 4396, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4398, 4398, 4191, 4191, 4399, 4191, 4191, 4191, 4400, 4401,
     4402, 4402, 4403, 4404, 4191, 4191, 4191, 4191, 4405, 4191,
     4191, 4191, 4191, 4191, 4406, 4191, 4191, 4407, 4191, 4191,
     4191, 4191, 4191, 4408, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4409, 4191, 4409, 4409,
     4409, 4409, 4410, 4410, 4191, 4410, 4410, 4410, 4191, 4191,
     4410, 4191, 4191, 4410, 4411, 4191, 4412, 4191, 4412, 4412,

     4191, 4412, 4191, 4191, 4191, 4191, 4412, 4191, 4191, 4191,
     4413, 4191, 4191, 4413, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4414, 4191, 4191, 4415, 4415, 4416, 4191, 4415,
     4417, 4418, 4414, 4414, 4419, 4420, 4417, 4191, 4191, 4191,
     4418, 4191, 4191, 4191, 4421, 4421, 4422, 4191, 4191, 4191,
     4191, 4423, 4423, 4191, 4424, 4424, 4425, 4424, 4426, 4427,
     4191, 4191, 4191, 4426, 4191, 4191, 4191, 4427, 4427, 4427,
     4428, 4191, 4191, 4428, 4429, 4191, 4430, 4429, 4431, 4429,
     4432, 4191, 4433, 4191, 4191, 4191, 4433, 4191, 4191, 4191,
     4191, 4191, 4434, 4434, 4435, 4435, 4436, 4436, 4436, 4437,

     4437, 4191, 4191, 1303, 4436, 4437, 4437, 4438, 4439, 4191,
     4191, 4191, 4440, 4438, 4191, 4441, 4441, 4442, 4191, 4191,
     4191, 4191, 4191, 4443, 4444, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4445, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4446, 4446, 4447, 4191, 4191, 4191, 4191, 4446,
     4448, 4449, 4450, 4191, 4191, 4451, 4451, 4191, 4191, 4452,
     4191, 4191, 4191, 4453, 4454, 4448, 4191, 4191, 4191, 4455,
     4456, 4456, 4456, 4456, 4456, 4456, 4191, 4449, 4191, 4449,
     4445, 4191, 4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449,

     4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449,
     4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449,
     4449, 4449, 4449, 4457, 4457, 4457, 4191, 4191, 4191, 4191,
     4458, 4458, 4459, 4458, 4460, 4461, 4460, 4191, 4461, 4191,
     4191, 4191, 4191, 4462, 4191, 4191, 4462, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4463, 4191, 4191, 4191, 4191, 4191, 4191, 4463,
     4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463,
     4463, 4191, 4191, 4191, 4191, 4191, 4191, 4464, 4464, 4191,
     4191, 4465, 4465, 4466, 4467, 4191, 4468, 4191, 4191, 4191,

     4191, 4469, 4191, 4470, 4469, 4191, 4469, 4191, 4191, 4471,
     4471, 4472, 4471, 4473, 4474, 4473, 4474, 4475, 4475, 4191,
     4476, 4477, 4191, 4191, 4191, 4191, 4191, 4191, 4475, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4478, 4478, 4191, 4191,
     4191, 4478, 4479, 4191, 4479, 4479, 4479, 4191, 4191, 4480,
     4480, 4480, 4481, 4481, 4481, 4191, 4191, 4482, 4482, 4482,
     4482, 4191, 4191, 4191, 4483, 4191, 4191, 4191, 4191, 4483,
     4483, 4483, 4484, 4485, 4484, 4486, 4191, 4487, 4486, 4488,
     4191, 4488, 4489, 4191, 4191, 4490, 4490, 4191, 4191, 4191,

     4191, 4191, 4491, 4191, 4492, 4191, 4492, 4493, 4191, 4191,
     4493, 4494, 4191, 4494, 4494, 4495, 4191, 4191, 4495, 4496,
     4496, 4496, 4497, 4191, 4191, 4191, 4497, 4191, 4498, 4191,
     4498, 4498, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4499, 4499, 4191, 4500, 4499, 4499, 4501, 4501,
     4191, 4191, 4191, 4191, 4502, 4502, 4503, 4503, 4504, 4505,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4506, 4191,
     4507, 4507, 4508, 4191, 4191, 4508, 4191, 4191, 4509, 4509,
     4509, 4510, 4191, 4510, 4511, 4191, 4191, 4512, 4191, 4191,
     4191, 4513, 4513, 4514, 4513, 4515, 4516, 4515, 4516, 4191,

     4191, 4191, 4191, 4191, 4191, 4517, 4191, 4518, 4191, 4519,
     4520, 4191, 4191, 4191, 4191, 4518, 4521, 4518, 4191, 4191,
     4191, 4522, 4522, 4523, 4523, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4524, 4525, 4526, 4524, 4524, 4527,
     4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4533, 4191,
     4191, 4191, 4191, 4191, 4191, 4536, 4537, 4538, 4536, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4539, 4539, 4539, 4191,
     4540, 4540, 4540, 4541, 4191, 4541, 4191, 4191, 4541, 4191,
     4191, 4542, 4542, 4542, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4543, 4544, 4545, 4543, 4546, 4546,

     4547, 4548, 4549, 4547, 4550, 4550, 4551, 4552, 4552, 4551,
     4551, 4553, 4554, 4554, 4553, 4553, 4191, 4555, 4555, 4556,
     4557, 4558, 4191, 4191, 4191, 4558, 4557, 4191, 4559, 4559,
     4560, 4561, 4191, 4191, 4561, 4191, 4562, 4191, 4563, 4191,
     4191, 4191, 4564, 4564, 4565, 4564, 4566, 4567, 4566, 4567,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4568,
     4191, 4191, 4191, 4568, 4568, 4569, 4569, 4569, 4191, 4191,
     4191, 4191, 4569, 4569, 4570, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4569, 4571, 4191, 4191, 4571, 4191, 4572,
     4191, 4191, 4191, 4191, 4191, 4191, 4572, 4191, 4191, 4191,

     4191, 4191, 4191, 4573, 4574, 4191, 4575, 4576, 4576, 4577,
     4578, 4579, 4191, 4580, 4581, 4191, 4582, 4191, 4191, 4583,
     4584, 4191, 4585, 4585, 4191, 4191, 4191, 4586, 4587, 4588,
     4589, 4590, 4591, 4591, 4592, 4592, 4593, 4594, 4595, 4592,
     4596, 4191, 4191, 4191, 4191, 4191, 4597, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4598, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4599, 4191,
     4191, 4191, 4600, 4191, 4601, 4602, 4191, 4191, 4603, 4604,

     4191, 4605, 4191, 4191, 4606, 4191, 4191, 4191, 4607, 4191,
     4608, 4598, 4191, 4191, 4191, 4191, 4609, 4610, 4610, 4610,
     4610, 4610, 4610, 4610, 4610, 4191, 4611, 4611, 4611, 4191,
     4191, 4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611,
     4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611,
     4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611,
     4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611, 4611,
     4611, 4191, 4191, 4191, 4612, 4613, 4191, 4606, 4191, 4607,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4606, 4191, 4191, 4607, 4191, 4191, 4614, 4614, 4614,

     4614, 4614, 4614, 4614, 4614, 4614, 4614, 4614, 4191, 4191,
     4191, 4191, 4615, 4616, 4191, 4617, 4618, 4191, 4191, 4191,
     4191, 4191, 4191, 4619, 4191, 4191, 4191, 4620, 4620, 4621,
     4622, 4623, 4624, 4625, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4626, 4626, 4191, 4627, 4627,
     4627, 4628, 4629, 4630, 4630, 4191, 4631, 4191, 4632, 4632,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4606,
     4191, 4607, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4633, 4634, 4191, 4635, 4635, 4191,
     4191, 4191, 4191, 4191, 4636, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4637, 4191, 4638, 4191, 4191, 4639,
     4639, 4191, 4640, 4191, 4641, 4642, 4191, 4191, 4643, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4644, 4191, 4645, 4646,
     4191, 4191, 4191, 4647, 4191, 4191, 4191, 4648, 4191, 4191,
     4191, 4649, 4191, 4191, 4191, 4650, 4191, 4191, 4191, 4651,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4652, 4191, 4653, 4191, 4654, 4655,
     4655, 4656, 4656, 4191, 4657, 4191, 4191, 4191, 4658, 4659,
     4191, 4191, 4660, 4661, 4191, 4191, 4191, 4191, 4191, 4662,
     4662, 4663, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4664,
     4665, 4666, 4191, 4191, 4191, 4191, 4191, 4667, 4667, 4191,
     4191, 4668, 4191, 4669, 4670, 4671, 4670, 4191, 4672, 4673,
     4674, 4675, 4676, 4191, 4191, 4191, 4191, 4191, 4677, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4678, 4678, 4191,
     4679, 4680, 4680, 4681, 4191, 4191, 4682, 4682, 4191, 4683,

     4680, 4684, 4191, 4191, 4191, 4191, 4191, 4685, 4191, 4191,
     4191, 4191, 4191, 4686, 4191, 4191, 4687, 4688, 4689, 4689,
     4689, 4689, 4689, 4689, 4689, 4689, 4690, 4690, 4690, 4690,
     4690, 4690, 4690, 4690, 4690, 4690, 4690, 4690, 4690, 4690,
     4690, 4690, 4690, 4690, 4690, 4690, 4690, 4690, 4690, 4690,
     4690, 4690, 4690, 4690, 4690, 4690, 4690, 4690, 4191, 4690,
     4690, 4690, 4690, 4690, 4690, 4690, 4690, 4690, 4690, 4690,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4691, 4691, 4691, 4191, 4691,
     4691, 4691, 4691, 4691, 4191, 4191, 4691, 4191, 4191, 4692,

     4191, 4693, 4191, 4694, 4695, 4191, 4191, 4191, 4696, 4191,
     4697, 4698, 4699, 4191, 4191, 4191, 4191, 4191, 4700, 4700,
     4191, 4701, 4701, 4701, 4702, 4703, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4704, 4705, 4705, 4191, 4191, 4191, 4191, 4191,
     4706, 4191, 4191, 4707, 4191, 4191, 4708, 4191, 4709, 4191,
     4191, 4191, 4191, 4191, 4710, 4711, 4712, 4191, 4191, 4713,
     4191, 4191, 4714, 4191, 4191, 4715, 4191, 4191, 4716, 4191,
     4191, 4717, 4191, 4191, 4191, 4191, 4191, 4718, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4719, 4719, 4720, 4720, 4191,

     4721, 4191, 4191, 4191, 4191, 4191, 4722, 4722, 4191, 4191,
     2610, 4191, 4723, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4724, 4724, 4725, 4726, 4726, 4727, 4191, 4728,
     4728, 4729, 4730, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4731, 4191,
     4732, 4191, 4733, 4191, 4734, 4191, 4735, 4735, 4736, 4191,

     4737, 4191, 4191, 4738, 4739, 4739, 4739, 4739, 4739, 4739,
     4739, 4739, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740,
     4740, 4740, 4191, 4191, 4191, 4191, 4740, 4191, 4191, 4740,
     4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740,
     4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4191,
     4191, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740,
     4740, 4740, 4740, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4741, 4741, 4741, 4741, 4741, 4741,
     4741, 4741, 4741, 4191, 4191, 4191, 4191, 4742, 4191, 4743,
     4191, 4191, 4191, 4191, 4744, 4191, 4191, 4191, 4191, 4745,

     4745, 4191, 4746, 4746, 4746, 4746, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4747, 4747, 4191,
     4191, 4191, 4191, 4191, 4191, 4748, 4749, 4191, 4191, 4191,
     4750, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4751,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4752, 4752,
     4753, 4753, 4191, 4191, 4191, 4191, 4191, 4191, 4754, 4754,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4755, 4755, 4756, 4757, 4758,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4759, 4759, 4760, 4191, 4191, 4191, 4739, 4739, 4739, 4739,
     4739, 4739, 4739, 4739, 4739, 4740, 4740, 4740, 4740, 4740,
     4191, 4191, 4740, 4191, 4740, 4740, 4191, 4191, 4191, 4740,
     4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740,
     4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4191,
     4191, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4191, 4191,

     4191, 4191, 4740, 4740, 4740, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4741, 4191, 4191, 4741, 4741,
     4741, 4741, 4191, 4191, 4741, 4741, 4191, 4742, 4191, 4191,
     4744, 4191, 4745, 4746, 4746, 4746, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4747, 4191, 4761, 4191,
     4762, 4763, 4751, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4764, 4764, 4765,
     4765, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4754, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4755, 4191, 4191, 4191, 4758, 4191, 4191,

     4191, 4191, 4191, 2896, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4739, 4739, 4739, 4739, 4739, 4739, 4739, 4739, 4740, 4740,
     4740, 4740, 4740, 4740, 4191, 4191, 4191, 4191, 4740, 4191,
     4191, 4740, 4740, 4191, 4191, 4191, 4740, 4740, 4740, 4191,
     4740, 4740, 4191, 4191, 4740, 4740, 4191, 4740, 4740, 4740,
     4740, 4740, 4191, 4191, 4740, 4740, 4191, 4191, 3178, 4740,

     4191, 4191, 4191, 4740, 4740, 4740, 4191, 4191, 4740, 4740,
     4740, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4741, 4741, 4741, 4191, 4191, 4191, 4191, 4741, 4191, 4742,
     4191, 4191, 4744, 4745, 4746, 4746, 4746, 4766, 4191, 4191,
     4191, 4767, 4191, 4747, 4191, 4761, 4768, 4191, 4769, 4770,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4771, 4771, 4772, 4772, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4773,
     4191, 4191, 4191, 4191, 4191, 4758, 4191, 4191, 4191, 4191,
     2896, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4739, 4739, 4739, 4739, 4739,
     4739, 4191, 4739, 4740, 4740, 4740, 4740, 4740, 4191, 4191,
     4191, 4191, 4740, 4191, 4191, 4740, 4740, 4191, 4191, 4191,
     4191, 4191, 4191, 4740, 4740, 4740, 4740, 4191, 4191, 4191,
     4191, 4740, 4191, 4191, 4740, 4740, 4740, 4740, 4740, 4191,
     4740, 4740, 4191, 4191, 4740, 4191, 4191, 4191, 4740, 4191,
     4191, 4740, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4741,

     4741, 4741, 4741, 4191, 4742, 4191, 4191, 4744, 4746, 4746,
     4746, 4766, 4774, 4191, 4191, 4191, 4767, 4775, 4191, 4191,
     4768, 4191, 4776, 4777, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4778, 4778, 4779, 4779, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4758,
     4191, 4191, 2896, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4739, 4739, 4739, 4191, 4739, 4739, 4739, 4740, 4740,

     4191, 4740, 4191, 4191, 4740, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4740, 4191, 4740, 4191, 4191, 4740, 4191, 4740,
     4740, 4740, 4191, 4740, 4740, 4740, 4191, 4191, 4740, 4191,
     4191, 4191, 4191, 4191, 4191, 4740, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4742, 4191, 4191, 4744, 4746,
     4774, 4191, 4191, 4775, 4191, 4191, 4191, 4780, 4781, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4782, 4782,
     4783, 4783, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4758, 4191, 2896, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4784, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4739, 4739, 4191, 4739, 4191, 4191, 4740, 4740, 4740,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4740,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4740, 4740, 4740,
     4740, 4191, 4191, 4740, 4740, 4740, 4740, 4191, 4191, 4191,
     4740, 4191, 4191, 4191, 4191, 4742, 4191, 4191, 4191, 4746,
     4191, 4191, 4191, 4785, 4786, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4787, 4787, 4788, 4788, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4758, 2896, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4784,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4739,
     4191, 4191, 4740, 4191, 4191, 4191, 4191, 4740, 4191, 4191,
     4789, 4790, 4790, 4740, 4740, 4191, 4191, 4191, 4740, 4740,
     4740, 4740, 4191, 4191, 4740, 4191, 4191, 4191, 4742, 4191,
     4746, 4191, 4791, 4792, 4793, 4794, 4191, 4191, 4191, 4795,
     4795, 4796, 4796, 4191, 4191, 4191, 4191, 2896, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4739, 4740, 4191, 4191, 4191, 4191, 4191, 4790, 4191,
     4740, 4740, 4191, 4740, 4740, 4740, 4191, 4191, 4191, 4191,
     4191, 4191, 4742, 4191, 4191, 4791, 4797, 4792, 4798, 4799,

     4800, 4191, 4801, 4801, 4802, 4802, 4191, 2896, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4739, 4191,
     4191, 4191, 4740, 4191, 4191, 4740, 4740, 4191, 4191, 4191,
     4191, 4742, 4191, 4191, 4797, 4798, 4803, 4804, 4805, 4805,
     4806, 4806, 2896, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4739, 4191, 4191, 4191, 4740, 4740, 4191, 4742, 4191, 4191,
     4807, 4808, 4809, 4809, 4810, 4810, 2896, 4191, 4191, 4191,
     4191, 4739, 4191, 4191, 4740, 4191, 4191, 4191, 4742, 4191,
     4191, 4811, 4812, 4813, 4813, 4814, 4814, 2896, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4742,

     4191, 4191, 4815, 4816, 4817, 4817, 4818, 4818, 2896, 4191,
     4191, 4191, 4191, 4191, 4191, 4742, 4191, 4191, 4819, 4820,
     4191, 4191, 4191, 4191, 2896, 4191, 4191, 4191, 4191, 4742,
     4191, 4191, 4191, 4191, 4191, 2896, 4191, 4191, 4742, 4191,
     2896, 4191, 4191, 4742, 4191, 2896, 4191, 4191, 4191, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,
     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,
     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,

     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,
     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,
     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,
     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,
     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,

     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,
     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,
     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,
     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191,
     4742, 4191, 2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191,
     2896, 4191, 4742, 4191, 2896, 4191, 4742, 4191, 2896, 4742,
        0, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191
    } ;

static yyconst flex_int16_t yy_nxt[32951] =
    {   0,
     4191, 4191,  277, 4191,  277, 4191,  278,  279,  278,  279,
     1365,  280, 4191,  280, 1365, 1209, 1219, 1220, 4191,  281,
     1210,  281,  276,  276,  277,  276,  276,  276,  278,  279,
      282,  276,  276,  280,  276,  276,  276,  276,  276,  276,
      276,  281,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  276,  276,  276,  276,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  276,  276,  276,  283,  285,  286,
      285,  285, 1217,  287,  288, 1363, 1364, 1218,  289,  285,
      286,  285,  285,  277,  287,  288,  290,  338,  339,  289,
     1377, 1262,  340,  341,  342, 1244, 1263,  290, 1244, 1272,
      343,  277, 1378,  277, 1273,  401,  402,  338,  339,  344,
      403,  345,  340,  341,  342,  404, 1212, 2403,  405, 1212,
      343,  291, 1261, 1261, 1261, 1261,  406, 1213, 1645,  344,
     1646,  345,  291,  276,  292,  293,  294,  292,  295,  278,
      279,  296,  276,  276,  280,  276,  276,  276,  276,  276,
      276,  297,  281,  276,  276,  276,  276,  276,  276,  298,

      299,  276,  276,  276,  276,  276,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  276,  276,  276,  276,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  301,  276,  302,  300,  276,
      303,  304,  305,  303,  306,  278,  279,  307,  276,  308,
      280,  309,  276,  308,  310,  311,  310,  276,  312,  276,
      276,  276,  276,  276,  276,  313,  308,  314,  308,  276,
      276,  315,  316,  316,  316,  316,  316,  316,  316,  316,

      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  309,  276,  276,  276,  316,  317,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  318,  316,  316,  316,  316,  316,
      316,  301,  276,  306,  316,  319,  319,  320,  319,  319,
      319,  321,  322,  323,  319,  319,  324,  319,  319,  319,
      319,  319,  319,  319,  325,  319,  319,  319,  319,  319,
      319,  326,  327,  319,  319,  319,  319,  319,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  319,  319,

      319,  319,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  319,  319,  319,
      328,  319,  319,  320,  319,  319,  319,  321,  322,  329,
      319,  319,  324,  319,  319,  319,  319,  319,  319,  319,
      325,  319,  319,  319,  319,  319,  319,  319,  327,  319,
      319,  319,  319,  319,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  319,  319,  319,  319,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      331,  330,  330,  332,  319,  319,  330,  277, 1474,  277,
     1209,  278,  279,  278,  279, 1210,  280, 1475,  280, 1222,
     1222, 1222, 1222,  277,  281,  460,  281,  401,  402,  461,
      462, 2700,  403, 1276,  463, 1292, 1223,  404, 1292, 1277,
      405, 1209,  464, 1638, 1224, 1209, 1210, 1479,  406, 1279,
     1210,  465, 1226, 1226, 1226, 1226, 1480, 1639,  333, 1227,
      333,  276,  276,  277,  276,  276,  276,  278,  279,  334,
      276,  276,  280,  276,  335,  276,  276,  276,  276,  276,
      281,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  276,  276,  276,  276,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  276,  276,  276,  336,  346,  347,  348,
      346,  347,  346,  349,  350,  351,  346,  346,  352,  346,
      346,  346,  346,  346,  346,  346,  353,  346,  346,  346,
      346,  346,  346,  346,  354,  346,  346,  346,  346,  346,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,

      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      356,  346,  346,  346,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  357,
      346,  346,  355,  277, 1670,  277, 1209,  359,  360,  359,
      360, 1210,  361, 2702,  361, 1252, 1252, 1253, 1252,  460,
      362, 1209,  362,  461,  462, 1777, 1210, 1668,  463,  474,
      473,  474,  474,  277,  278,  279,  464,  501,  502,  280,
     1254, 1778,  503,  504,  505,  465, 1319,  484, 1321, 1319,
      506, 1322, 1209, 1533, 1534, 2703,  363, 1210,  363,  364,

      364,  365,  364,  364,  364,  366,  367,  368,  364,  364,
      369,  364,  364,  364,  364,  364,  364,  364,  370,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  364,  364,  364,  364,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  372,  364,  364,  371,  276,  373,  374,  375,  373,
      276,  278,  279,  376,  276,  276,  280,  276,  276,  276,

      310,  377,  310,  276,  312,  276,  276,  276,  276,  276,
      276,  378,  299,  379,  276,  380,  276,  315,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  276,  382,
      276,  276,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  383,  276,  276,
      381,  385,  386,  385,  385, 1493,  387,  388, 1493, 1427,
     1276,  389,  385,  386,  385,  385, 1277,  387,  388,  390,
     1209, 2764,  389,  277, 1372, 1210, 1279,  394,  279, 1373,

      390, 1425,  395,  396, 1445, 1499, 1426,  397, 1217, 1446,
      281, 1356,  277, 1218, 1356,  277,  394,  279,  398,  278,
      279,  395,  396, 1428,  280, 1443,  397, 1520, 1443,  281,
     1520, 1520,  281, 1280, 1520,  408,  391,  398, 1209,  409,
      410,  408,  392, 1210,  411,  409,  410,  391,  393,  412,
      411, 1209,  413,  392, 2765,  412, 1210, 1584,  413,  393,
      414, 1501,  474,  473,  474,  474,  414,  278,  279, 1209,
     1357, 1358,  280,  399, 1210, 2290,  491,  492,  491,  491,
      484,  493,  494, 2766, 1357, 1358,  495,  496,  497, 1543,
     1544,  498,  399, 1584,  499,  491,  492,  491,  491,  277,

      493,  494, 2290,  278,  279,  495,  496,  497,  280, 1465,
      498, 1545, 1546,  499, 1466,  415,  281, 1371, 1371, 1371,
     1371,  415,  276,  416,  417,  418,  416,  419,  278,  420,
      421,  422,  423,  280,  424,  276,  423,  425,  426,  425,
      427,  428,  429,  429,  429,  429,  429,  429,  430,  431,
      432,  433,  276,  434,  435,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  437,  436,
      436,  436,  436,  436,  436,  438,  276,  276,  439,  440,
      441,  436,  442,  443,  444,  445,  446,  436,  447,  448,
      449,  450,  451,  436,  452,  436,  453,  454,  455,  456,

      457,  436,  436,  436,  458,  276,  419,  436,  276,  466,
      467,  466,  466,  468,  278,  279,  469,  276,  276,  280,
      276,  276,  276,  276,  276,  276,  276,  281,  276,  276,
      276,  276,  276,  276,  470,  276,  276,  276,  276,  276,
      276,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  276,  276,  276,  276,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      276,  276,  468,  471,  276,  472,  473,  474,  472,  276,

      278,  475,  476,  276,  276,  280,  477,  276,  276,  276,
      478,  276,  276,  479,  276,  276,  276,  276,  276,  276,
      276,  480,  276,  481,  276,  276,  276,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  483,  276,  276,
      276,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  276,  276,  276,  482,
      277, 1902,  277, 1209,  278,  485,  278,  485, 1210,  280,
      486,  280,  486, 1465,  487, 1902,  487,  281, 1466,  281,

     1310, 1310, 1310, 1310,  488,  489,  488,  489,  277, 1209,
     2767,  508,  501,  502, 1210,  509,  510,  503,  504,  505,
      511, 2768,  508, 1554, 1496,  506,  509,  510,  512, 1497,
     1209,  511, 1718,  544, 2769, 1210,  513,  545,  546,  512,
     1523, 1531,  547,  548,  544, 1524, 1532,  513,  545,  546,
      549, 1538, 1523,  547,  548, 1716, 1539, 1541,  550,  551,
      487,  549,  487,  580, 1720, 2770, 1209,  581,  582,  550,
      551, 1210,  583,  580, 1773, 1555, 1548,  581,  582, 1548,
      584, 1311,  583, 1215, 1215, 1215, 1215, 1719,  585, 1549,
      584,  514, 1245, 1245, 1245, 1245, 1600, 1772,  585, 1246,

     1601, 1216,  514,  490,  515,  516,  515,  515,  490,  493,
      494,  517,  490,  490,  495,  490,  490,  490,  490,  518,
      519,  490,  520,  490,  490,  490,  490,  490,  490,  518,
      518,  490,  521,  490,  490,  490,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  490,  490,  490,  490,
      522,  523,  522,  524,  522,  522,  525,  522,  522,  522,
      522,  522,  522,  526,  527,  522,  522,  528,  529,  530,
      522,  531,  522,  522,  522,  518,  490,  490,  522,  533,
      534,  533,  533,  277,  535,  536,  277,  553,  554,  537,

      553,  554,  555, 1519, 2378,  555, 1519,  538, 1529, 1491,
      556, 1529, 1554,  556, 1530,  539, 1554,  540, 1793, 1794,
     2379,  560,  561,  562,  560,  674,  563,  564, 1551,  675,
      676,  565, 2179, 1552,  677,  560,  561,  562,  560,  566,
      563,  564,  678, 2771,  557,  565,  558,  557,  567,  558,
     2180,  541,  568,  566, 1249, 1249, 1249, 1249, 1209,  542,
     1554, 1365,  567, 1210, 1555, 1365,  568, 2772, 1555, 1902,
      539,  533,  534,  533,  533, 1558,  535,  536, 1902, 1250,
     2773,  537,  560,  561,  562,  560, 1561,  563,  564,  538,
     1925, 1562,  565, 1248, 1249, 1249, 1248,  539, 1617,  540,

      566, 1617,  569,  570, 1925,  560,  561,  562,  560,  567,
      563,  564, 1555,  568, 2774,  565,  569,  570, 1250,  560,
      561,  562,  560,  566,  563,  564,  277, 1555, 1981,  565,
      278,  279,  567,  541, 1564,  280,  568,  566, 1982, 1565,
      277,  542, 1209,  281,  278,  279,  567, 1210, 1630,  280,
      572, 1630,  539, 1255, 1255, 1255, 1255,  281, 1642, 1749,
     1256, 1642, 1749,  569,  571,  560,  561,  562,  560, 2607,
      563,  564,  612, 1209, 1225,  565,  613,  614, 1210, 1244,
     1209,  615, 1244,  566,  616, 1210,  569,  571, 1244,  617,
     1209, 1244,  567,  612, 2607, 1210,  572,  613,  614,  674,

      569,  573,  615,  675,  676,  616, 1578,  610,  677, 1209,
      617, 1579,  635,  277, 1210,  635,  678,  636,  637, 1895,
     1896,  610,  638, 1209,  618,  639,  635,  277, 1210,  635,
      640,  636,  637, 1606, 1292, 2775,  638, 1292, 1606,  639,
     1450, 1450, 1450, 1450,  640,  618,  569,  573,  276,  276,
      277,  276,  276,  276,  278,  279,  574,  276,  276,  280,
      276,  276,  276,  276,  276,  276,  276,  281,  276,  276,
      276,  276,  276,  276,  276,  575,  276,  576,  276,  276,
      276,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  276,  276,  276,  276,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  578,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      276,  276,  276,  577,  276,  586,  587,  586,  586,  588,
      278,  279,  589,  276,  276,  280,  276,  276,  276,  276,
      276,  276,  276,  281,  276,  276,  276,  276,  276,  276,
      590,  276,  276,  276,  276,  276,  276,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  276,  276,  276,
      276,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  276,  276,  588,  591,
      593,  594, 1209,  593, 1609,  595,  596, 1210, 1614, 1610,
      597,  604,  594, 1615,  604,  277,  595,  605,  598,  278,
      279,  597, 2776, 1621,  280,  650,  651,  599, 1622,  598,
     1779,  600,  281, 1779,  593,  606, 1631,  593,  599,  607,
      596, 1632,  600, 1780,  597,  593,  606, 1916,  593, 1662,
      607,  596,  608,  601, 1663,  597, 1917, 1215, 1215, 1215,
     1215,  599,  612,  608,  601,  600,  619,  614, 1580, 1554,
     1581,  620,  599, 1465,  616, 1216,  600, 1319, 1466,  617,

     1319,  602,  603, 1209, 2619,  612, 1582,  609, 1210,  619,
      614, 1209,  602,  603,  620,  594, 1210,  616,  609,  621,
      622, 1925,  617, 1276,  597, 1326, 1326, 1326, 1326, 1277,
     1926, 2619,  623,  594,  618,  601,  601,  621,  622, 1279,
      624, 1555,  597, 1327,  642,  600,  601,  601,  643,  644,
      623,  627,  628,  645, 2777,  629,  630,  618,  624, 1677,
      631,  646, 1677,  600, 1678,  627,  628,  642,  632,  629,
      630,  643,  644, 1645,  631, 1646,  645, 1485, 1485, 1485,
     1485,  277,  632,  277,  646,  278,  279,  278,  279, 1486,
      280, 1645,  280, 1646, 1209,  625,  647,  277,  281, 1210,

      281,  278,  279,  633, 1533, 1534,  280,  650,  651, 1331,
     1331, 1331, 1331,  625,  281, 1543, 1544,  633, 1647,  647,
      653,  654,  653,  653, 1714,  655,  656,  277, 1209, 1715,
      657,  278,  279, 1210, 1333, 1645,  280, 1646,  658, 2083,
      653,  654,  653,  653,  281,  655,  656,  659, 2084,  660,
      657, 1728, 1732,  661, 1738,  662, 1729, 1733,  658, 1739,
     1209,  648,  649,  648,  649, 1210,  277,  659,  277,  660,
      278,  279,  663,  279, 2778,  280, 1209,  280,  664,  665,
     1648, 1210, 1209,  281,  277,  281,  277, 1210,  667,  668,
      663,  279,  661,  669,  662,  280,  664,  665, 1968, 2779,

      277,  670, 1209,  281,  667,  668, 1969, 1210, 1970,  669,
      680,  681,  680,  680,  752,  682,  683,  670,  753,  754,
      684,  685, 2356,  755,  708,  709,  708,  708,  686,  710,
      711,  756, 2357, 1554,  712,  671, 1558,  672,  680,  681,
      680,  680,  713,  682,  683, 1556, 2087, 1209,  684,  685,
     1557,  671, 1210,  672, 2780, 2088,  686,  688,  689,  688,
      688,  277,  690,  691, 1209,  278,  279,  692,  693, 1210,
      280,  688,  689,  688,  688,  694,  690,  691,  281, 1209,
     2781,  692,  693,  714, 1210, 1555, 2782,  750, 1555,  694,
      276,  276,  277,  276,  276,  276,  278,  279,  695,  276,

      276,  280,  276,  276,  276,  276,  276,  276,  276,  281,
      276,  276,  276,  276,  276,  276,  276,  696,  276,  276,
      276,  276,  276,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  276,  276,  276,  276,  697,  697,  697,
      698,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  699,  697,
      697,  697,  276,  276,  276,  697,  701, 1873,  701, 1209,
      702,  703,  702,  703, 1210,  704, 2783,  704, 1284, 1284,
     1284, 1284, 1874,  705, 2784,  705,  708,  709,  708,  708,

     1750,  710,  711, 1750, 1873, 2785,  712,  716,  717,  716,
      716, 1751,  718,  719,  713, 1285, 1768,  720, 1209, 1319,
      721, 1769, 1319, 1210,  722,  723,  716,  717,  716,  716,
     1209,  718,  719, 1545, 1546, 1776,  720,  277,  724,  721,
     1783,  278,  279,  722,  723, 1784,  280, 1222, 1222, 1222,
     1222, 1645, 2501, 1646,  281,  714,  706,  724,  706, 2118,
      724,  752, 1209,  750, 1223,  753,  754, 1210, 1965, 1286,
      755, 1966, 1224, 1490, 1490, 1490, 1490, 2793,  756,  724,
      276,  276,  277,  276,  276,  276,  278,  279,  725,  276,
      276,  280,  276,  276,  276,  276,  276,  276,  276,  281,

      276,  276,  276,  276,  276,  276,  276,  726,  276,  276,
      276,  276,  276,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  276,  276,  276,  276,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  728,  276,  276,  727,  276,  276,  277,  276,
      276,  276,  278,  279,  729,  276,  276,  280,  276,  276,
      276,  276,  276,  276,  276,  281,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  276,
      276,  276,  276,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  276,  276,
      276,  730,  276,  276,  277,  276,  276,  276,  278,  279,
      731,  276,  276,  280,  276,  276,  276,  276,  732,  276,
      276,  281,  276,  276,  276,  276,  276,  276,  276,  732,
      276,  276,  276,  276,  276,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  276,  276,  276,  276,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  276,  276,  276,  733,  276,  734,
      735,  734,  734,  276,  278,  279,  736,  276,  276,  280,
      276,  276,  276,  276,  732,  276,  276,  281,  276,  276,
      276,  276,  276,  276,  276,  732,  276,  276,  276,  276,
      276,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  276,  276,  276,  276,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      276,  276,  276,  737,  739, 2091,  739, 1209,  740,  741,
      740,  741, 1210,  742, 2092,  742, 1331, 1331, 1331, 1331,
      277,  743,  277,  743,  760,  761,  760,  761, 2364,  762,
     2365,  762, 1266, 1266, 1266, 1266, 1276,  763, 2366,  763,
     2135, 1333, 1277, 1267,  777,  764,  777,  764,  778,  779,
      778,  779, 1279,  780, 1209,  780, 2191, 1250, 2798, 1210,
      744,  781,  744,  781, 2091,  277,  745, 1810,  745,  278,
      279, 2192, 1811, 2092,  280,  860,  746,  747,  746,  747,

     1978, 2799,  281, 1979,  748,  749,  748,  749,  276,  276,
      277,  276,  276,  276,  278,  279,  757,  276,  276,  280,
      276,  276,  276,  276,  276,  276,  276,  281,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  276,  276,  276,  276,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      276,  276,  276,  758,  765,  766,  473,  766,  766,  765,

      767,  768,  769,  765,  765,  770,  765,  765,  765,  765,
      771,  765,  765,  772,  765,  765,  765,  765,  765,  765,
      765,  773,  765,  765,  765,  765,  765,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  765,  765,  765,
      765,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  775,  765,  765,  774,
      276,  276,  277,  276,  276,  276,  278,  279,  782,  276,
      276,  280,  783,  276,  276,  276,  276,  276,  276,  281,

      276,  276,  276,  276,  276,  276,  784,  785,  276,  276,
      276,  276,  276,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  276,  276,  276,  276,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  787,  276,  276,  786,  789, 1815, 2800,  789,
      790,  791, 1816,  790,  791,  792, 1209,  793,  792, 1209,
      793, 1210, 1520,  794, 1210, 1520,  794,  276,  276,  277,
      276,  276,  276,  278,  279,  795,  276,  276,  280,  796,

      276,  276,  276,  797,  276,  276,  281,  276,  276,  276,
      276,  276,  276,  798,  785,  276,  276,  276,  276,  276,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      276,  276,  276,  276,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  787,
      276,  276,  799,  801, 1209, 1554,  801,  802,  803, 1210,
      802,  803,  804, 1209,  805,  804, 1855,  805, 1210, 1855,
      806,  277, 2801,  806,  277,  278,  279,  277,  278,  279,

      280,  278,  279,  280, 1209, 1856,  280, 1851,  281, 1210,
     1851,  281, 1356, 1209,  281, 1356, 2802,  807, 1210,  277,
      807,  277,  817,  278,  279,  278,  279, 1555,  280, 1209,
      280, 2803,  808, 2674, 1210, 1852,  281, 2675,  281, 1862,
     1836,  277, 1862, 1836,  817,  278,  279, 1837, 2225, 1838,
      280,  277,  826, 1838, 1869,  278,  279, 1863,  281, 1870,
      280,  860, 2225, 1554, 1867,  277, 1853, 1867,  281,  278,
      279, 1357, 1358, 1871,  280,  827,  861,  809, 1872,  810,
     1861, 2806,  281,  811, 1854, 1520,  828,  829, 1520,  812,
      830, 1868, 1864,  813,  814, 1888,  815, 1865,  816,  277,

     1870, 2807,  277,  278,  279, 2808,  278,  279,  280, 1871,
      808,  280, 2809,  826, 1889, 1555,  281,  277, 1892,  281,
      895,  278,  279, 1893,  896,  897,  280, 1900,  861,  898,
      899, 2810, 1901, 1943,  281,  277,  827,  900, 1944,  278,
      279,  923, 2346, 2347,  280,  924,  925,  828,  829,  872,
      926,  830,  281, 1897, 2811,  809, 1897,  810,  927, 1212,
      873,  811, 1212, 1951, 1953,  928, 1898,  812, 1952, 1954,
     1213,  813,  814, 2814,  815, 2815,  816,  276,  818,  277,
      276,  818,  276,  278,  279,  819,  276,  276,  280,  820,
      276,  276,  276,  276,  276,  276,  281,  276,  276,  276,

      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      276,  276,  276,  276,  821,  821,  821,  822,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  823,  821,  821,  821,  276,
      276,  276,  821,  276,  276,  277,  276,  276,  276,  278,
      279,  824,  276,  276,  280,  276,  276,  276,  276,  276,
      276,  276,  281,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  276,  276,  276,  276,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  276,  276,  276,  825,  276,
      276,  277,  276,  276,  276,  278,  279,  831,  276,  276,
      280,  276,  276,  276,  276,  276,  276,  276,  281,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  276,  276,  276,  276,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  276,  276,  276,  832,  276,  276,  277,  276,  276,
      276,  278,  279,  833,  276,  276,  280,  276,  276,  276,
      276,  276,  276,  276,  281,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  276,  276,
      276,  276,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  276,  276,  276,
      834,  836,  837,  836,  836,  895,  838,  839, 2816,  896,
      897,  840,  841,  842,  898,  899,  843,  844, 2139,  845,
      277, 2142,  900, 2140,  278,  279, 2143,  846,  847,  280,
      848,  849,  850, 1884,  872, 1985, 1884,  281, 1489, 1490,
     1490, 1489,  851, 1986, 1491,  873, 1885,  852, 1987, 1606,
      851, 1886,  277,  853, 1606,  842,  875,  876, 2258, 2169,
     1868,  877,  878,  879, 1353, 1353, 1353, 1353, 2170,  880,
     2225, 1354, 1902, 1328, 1328, 1328, 1328,  854,  881, 2226,

      882, 1902,  855,  842,  836,  837,  836,  836,  923,  838,
      839, 1329,  924,  925,  840,  841,  842,  926, 1380,  843,
      844, 2093,  845, 2258, 2093,  927, 1312, 1312, 1312, 1312,
      846,  847,  928,  848,  849,  850, 2817,  277, 2820, 2144,
     2821,  875,  876, 1313, 1606,  851,  877,  878,  879, 1606,
      852, 1315, 2258,  851,  880,  277,  853,  955,  842, 1082,
     1083,  956,  957,  881, 1084,  882,  958,  959,  960, 1902,
     1382, 2822, 1085, 2823,  961, 1617, 1383, 2196, 1617, 1316,
      854, 1384, 1385, 1902, 1386,  855,  842,  276,  856,  857,
      856,  856,  276,  278,  279,  858,  276,  276,  280,  276,

      276,  276,  276,  276,  276,  276,  281,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      276,  276,  276,  276,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  276,
      276,  276,  859,  276,  862,  863,  862,  862,  276,  278,
      279,  864,  276,  865,  280,  866,  276,  865,  276,  867,
      276,  276,  868,  276,  276,  276,  276,  276,  276,  276,

      869,  276,  870,  276,  276,  276,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  276,  276,  276,  276,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  276,  276,  276,  871,  883,
      884,  885,  884,  884,  886,  887,  888,  889,  883,  883,
      890,  883,  883,  883,  883,  883,  883,  883,  891,  883,
      883,  883,  883,  883,  883,  892,  883,  883,  883,  883,
      883,  883,  893,  893,  893,  893,  893,  893,  893,  893,

      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  883,  883,  883,  883,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  883,  883,  886,  893,  277, 2407, 2408,  277,  278,
      279, 1974,  278,  279,  280,  901,  902,  280,  901,  902,
     1975, 1584,  281,  935, 2206,  281, 1976,  936,  937,  935,
     2407, 2414,  938,  936,  937,  939, 1212, 2827,  938, 1212,
      940,  939, 1297, 1298, 1298, 1297,  940, 1213, 1645, 1299,
     1646, 1584, 1221, 1222, 1222, 1221,  903, 1584, 1584,  903,

      905,  906,  905,  905, 1918,  907,  908, 1918, 1919, 1223,
      909,  910,  911, 1548, 2220,  941, 1548, 1224,  912,  935,
     2223,  941, 1920,  942,  937, 2224, 1549, 1584,  943, 1212,
     2189,  939, 1212,  935, 1584, 2830,  940,  942,  937,  945,
     1213,  913,  943,  946,  947,  939,  914, 1301,  948,  913,
      940,  949, 2321,  945, 2342,  945,  950,  946,  947,  952,
      947, 2320,  948, 1302,  953,  949, 1630,  949, 2342, 1630,
      950,  941,  950, 1225, 2228, 2620,  915,  905,  906,  905,
      905, 1642,  907,  908, 1642,  941, 2343,  909,  910,  911,
     2285,  951,  945, 2285,  963,  912,  952,  947,  964,  965,

     2343,  953, 2620,  966,  949,  951, 1584,  951,  963,  950,
      955,  967,  964,  965,  956,  957, 1276,  966,  913,  958,
      959,  960, 1277,  914,  971,  967,  913,  961,  972,  973,
     2407, 2408, 1279,  974,  975,  976, 1229, 1229, 1229, 1229,
     1230,  977, 1584, 1231,  951, 1326, 1326, 1326, 1326, 1490,
     1490, 1490, 1490,  915,  905,  906,  905,  905, 2804,  907,
      908, 1224,  277, 1327,  909,  910, 1020, 1021, 2407, 2414,
     2516, 1022,  912, 1023,  968,  969, 2805, 2247, 2324, 1024,
     2247,  917,  971,  918, 2516, 1869,  972,  973,  968,  969,
     1870,  974,  975,  976, 2093,  919, 2231, 2093, 2094,  977,

      920,  979, 2248,  919,  979,  980,  981, 2235,  980,  986,
      982,  277, 2095,  982, 1779, 1020, 1021, 1779,  983, 1230,
     1022,  983, 1023, 1448, 1448, 1448, 1448, 1780, 1024, 2517,
      921,  905,  906,  905,  905, 1092,  907,  908, 1449, 1093,
     1094,  909,  910, 2517, 1095,  988,  989, 2239,  988,  912,
      990,  991, 1096, 1276, 2243,  992,  993,  994,  917, 1277,
      918, 1867, 1100,  995, 1867, 1862, 1101, 1102, 1862, 1279,
     1958, 1103,  919, 1104, 2841, 1959, 1960,  920, 1961, 1105,
      919,  984,  985, 1863,  984,  985,  988,  989, 1868,  988,
     1677,  990,  991, 1677, 2251, 1678,  992,  993,  994, 1431,

     1431, 1431, 1431, 1931,  995, 2844, 1432,  921,  276,  276,
      277,  276,  276,  276,  278,  279,  929,  276,  276,  280,
      276,  276,  276,  276,  276,  276,  276,  281,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  276,  276,  276,  276,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      276,  276,  276,  930,  276,  276,  277,  276,  276,  276,

      278,  279,  931,  276,  276,  280,  276,  276,  276,  276,
      276,  276,  276,  281,  276,  276,  276,  276,  276,  276,
      276,  932,  276,  276,  276,  276,  276,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  276,  276,  276,
      276,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  276,  276,  276,  933,
      997,  998,  997,  997, 1888,  999, 1000, 2845, 2342, 1870,
     1001, 1002, 1003, 1448, 1448, 1448, 1448, 2342, 1004, 2373,

      491,  492,  491,  491, 2374,  493,  494, 1005, 1449, 1006,
      495, 1017, 1018, 2303, 2349,  498, 2303, 2350,  499,  491,
      492,  491,  491, 1037,  493,  494, 1885, 1038, 1039,  495,
     1017, 1018, 1040, 1443,  498, 1519, 1443,  499, 1519, 1529,
     1041, 1491, 1529, 1100, 2343, 1530, 2093, 1101, 1102, 2093,
     2094, 2412, 1103, 2343, 1104, 1007,  997,  998,  997,  997,
     1105,  999, 1000, 2588, 2095, 2474, 1001, 1002, 1003, 2847,
     1467, 1467, 1467, 1467, 1004, 1042, 1026, 1027, 1026, 1026,
     2848, 1028, 1029, 1005, 2849, 1006, 1030, 1031, 1032, 1468,
     2562, 1033, 1357, 1358, 1034, 1026, 1027, 1026, 1026, 2093,

     1028, 1029, 2093, 2171, 2562, 1030, 1031, 1032, 2850, 1862,
     1033, 1107, 1862, 1034, 2484, 1108, 1109, 2172, 1750, 2485,
     1110, 1750, 1111, 1500, 1500, 1500, 1500, 1863, 1112, 1751,
     1469, 1007, 1008, 1008, 1009, 1008, 1008, 1008, 1010, 1011,
     1012, 1008, 1008, 1013, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1014, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1015,
     1008, 1008, 1008, 1008, 1008, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1008, 1008, 1008, 1008, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1015, 1008, 1008, 1016,  277, 2851,
     2361,  277,  553,  554, 1037,  553,  554,  555, 1038, 1039,
      555, 1855, 2362, 1040, 1855,  556, 2363, 1443,  556, 1037,
     1443, 1041, 1037, 1043, 1039, 2516, 1043, 1039, 1044, 2285,
     1856, 1044, 2285, 1037, 2516, 2265, 1041,  907, 1046, 1041,
     2860, 2296,  909, 1047, 1048, 1559, 1559, 1559, 1559,  557,
     1049, 1035,  557, 1037, 1035, 2304, 1042,  907, 1046, 1645,
     2860, 1646,  909, 1047, 1048, 2305, 1429, 1429, 1429, 1429,
     1049, 1042, 2862, 1050, 1042, 2862, 1357, 1358, 1051, 1037,

     2304, 1050, 2265,  907,  908, 1037, 2296, 2865,  909,  907,
      908, 1430, 2305, 1050,  909, 1107, 1049, 2307, 1051, 1108,
     1109, 1050, 1049, 2188, 1110, 1053, 1111, 1054, 1052, 2517,
     2265, 1053, 1112, 1054, 1645, 2296, 1646, 1056, 2517,  919,
     1855, 1057, 1058, 1855,  920,  919, 1059,  919, 1052, 1060,
      920, 2866, 2648,  919, 1061, 1063, 1056, 2649, 1063, 1856,
     1057, 1058, 2867, 2868, 2307, 1059, 1066, 1062, 1064, 1897,
     1067, 1068, 1897, 1061,  921, 1069, 1266, 1266, 1266, 1266,
      921, 2869, 1898, 1070, 2818, 1918, 1062, 1267, 1918, 1062,
     1066, 2870, 2307, 1056, 1067, 1068, 1071, 1073, 1074, 1069,

     1056, 1250, 1075, 2314, 1073, 1074, 2562, 1070, 1062, 1075,
     1076, 1328, 1328, 1328, 1328, 2562, 2564, 1076, 1071, 1645,
     1071, 1646,  277, 1077, 2613, 2563, 1167, 1168, 2872, 1329,
     1077, 1169,  277, 1170, 1269, 1836, 1167, 1168, 1836, 1171,
     2873, 1169, 1071, 1170, 1838, 1077, 2874, 2875, 1838, 1171,
     2876, 2545, 1077,  276,  276,  277,  276,  276,  276,  278,
      279, 1078,  276,  276, 1079,  276,  276,  276,  276,  276,
      276,  276,  281,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,

     1080, 1080, 1080, 1080, 1080, 1080,  276,  276,  276,  276,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080,  276,  276,  276, 1080, 1081,
     1081,  277, 1081, 1081, 1081, 1082, 1083, 1086, 1081, 1081,
     1084, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1085, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1081, 1081, 1081, 1081, 1087, 1087, 1087, 1087,

     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1081, 1081, 1081, 1087,  276,  276,  277,  276,  276,
      276,  278,  279, 1088,  276,  276, 1089,  276,  276,  276,
      276,  276,  276,  276,  281,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276, 1090, 1090,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,  276,  276,
      276,  276, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,

     1090, 1090, 1090, 1090, 1090, 1090, 1090,  276,  276,  276,
     1090, 1091, 1091, 1092, 1091, 1091, 1091, 1093, 1094, 1097,
     1091, 1091, 1095, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1096, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1091, 1091, 1091, 1091, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1091, 1091, 1091, 1098,  277, 1645,  277,

     1646, 1114, 1115, 1114, 1115, 2891, 1116, 2606, 1116, 1326,
     1326, 1326, 1326,  277, 1117,  277, 1117, 1173, 1174, 1173,
     1174, 2606, 1175, 2892, 1175, 2893, 2877, 1327, 1916, 1178,
     1176, 1178, 1176, 1179, 1180, 1179, 1180, 1917, 1181, 2894,
     1181, 1328, 1328, 1328, 1328, 2895, 1182, 2544, 1182, 2091,
     1118, 2877, 1118, 1510, 1510, 1510, 1510, 2091, 2092, 1329,
     1511, 1559, 1559, 1559, 1559, 1948, 2092, 1119, 1948, 1119,
     1120, 1121, 1122, 1121, 1121, 1120, 1123, 1124, 1125, 1120,
     1120, 1126, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1127,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1128, 1120, 1120,

     1120, 1120, 1120, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1130, 1120, 1120, 1120, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1120, 1120, 1120, 1129,  276, 1131, 1132, 1131,
     1131,  276,  278,  279, 1133,  276,  276,  280,  276,  276,
      276,  276,  276,  276,  276,  281,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,

     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,  276,
      276,  276,  276, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,  276,  276,
      276, 1134,  277, 2898,  277, 2899, 1136, 1137, 1136, 1137,
     2900, 1138, 1139, 1138, 1139, 2901, 2812, 1184, 1185, 1140,
     1184, 1140, 1186, 1187, 2813, 2247, 2902, 1188, 2247, 2903,
     1189, 1289, 1289, 1289, 1289, 1190, 1238, 1238, 1238, 1238,
     1326, 1326, 1326, 1326, 1191, 2904, 1836, 1239, 1192, 1836,
     2248, 1240, 2905, 1223, 2093, 1838, 1290, 2093, 1327, 1838,

     1291, 1224, 1242, 1243, 1566, 1566, 1566, 1566, 2906, 2907,
     1193, 1141, 2144, 1141, 1142, 1143, 1144, 1143, 1143, 1145,
     1146, 1147, 1148, 1142, 1142, 1149, 1150, 1151, 1142, 1142,
     1142, 1142, 1142, 1152, 1142, 1142, 1142, 1142, 1142, 1142,
     1153, 1142, 1142, 1142, 1142, 1142, 1142, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1142, 1142, 1142,
     1142, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1142, 1142, 1145, 1154,

     1156,  277, 2908, 1156, 2385, 1157, 1158, 2385, 2909, 2686,
     1159, 1156,  277, 2878, 1156, 2910, 1157, 1158, 1160, 2303,
     2003, 1159, 2303, 2003, 1328, 1328, 1328, 1328, 1161, 1160,
     1194, 1185, 1885, 1194, 2911, 1186, 1187, 2913, 2878, 1161,
     1188, 1198, 1329, 1195, 2914, 1199, 1200, 1201, 1196, 2504,
     1202, 2006, 2504, 1203, 2790, 2915, 2916, 1191, 1204, 1162,
     2863, 1192, 1233, 1233, 1233, 1233, 1276, 1205, 2864, 1234,
     1162, 1206, 1277, 2006, 1276, 1163, 1916, 1164, 2917, 1223,
     1277, 1165, 1279, 1193, 2303, 1917, 1163, 2303, 1164, 2918,
     1279, 2919, 1165, 1206, 1201, 1207, 1198, 1885, 1207, 2920,

     1199, 1200, 1201, 2921, 2922, 1202, 2923, 2924, 1208, 1266,
     1266, 1266, 1266, 1204, 1249, 1249, 1249, 1249, 1258, 2925,
     1267, 1259, 1205, 2926, 2625, 1645, 1206, 1646, 1366, 1366,
     1366, 1366, 2927, 2579, 1250, 1367, 2579, 1368, 2840, 1250,
     2928, 1368, 2929, 2750, 2930, 1236, 2931, 2932, 1206, 1201,
     2935, 2936, 2937, 1369, 1387, 1387, 1387, 1387, 2751, 1429,
     1429, 1429, 1429, 1438, 1438, 1438, 1438, 2933, 2938, 2939,
     1270, 1441, 1215, 1215, 1441, 2819, 2934, 1442, 2940, 1333,
     2942, 1389, 2944, 1368, 1430, 2700, 2945, 2946, 1430, 1216,
     1440, 1566, 1566, 1566, 1566, 1957, 2026, 1258, 1251, 1303,

     1303, 1304, 1303, 1251, 1251, 1251, 1305, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 2990, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1251, 1251, 1251, 1251, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1307, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     2991, 1251, 1251, 1306, 1298, 1298, 1298, 1298, 3006, 3007,
     3008, 1299, 1359, 1359, 1359, 1359, 1360, 3009, 3010, 1361,

     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1215, 1215,
     1215, 1215, 1387, 1387, 1387, 1387, 3011, 1333, 1387, 1387,
     1387, 1387, 3012, 3013, 3014, 1333, 1216, 1389, 3015, 1333,
     3016, 1389, 1387, 1387, 1387, 1387, 3019, 1333, 3020, 1389,
     3021, 3022, 3026, 1333, 3027, 1389, 2118, 2118, 3030, 1301,
     2135, 1387, 1387, 1387, 1387, 2135, 1390, 1333, 3034, 1389,
     1393, 1508, 1508, 1508, 1508, 4191, 1330, 1331, 1331, 1330,
     1394, 1884, 1332, 3035, 1884, 1360, 1333, 3036, 1389, 1387,
     1387, 1387, 1387, 3037, 1885, 1395, 1509, 3038, 1396, 1886,
     3039, 1333, 1387, 1387, 1387, 1387, 3040, 1334, 1868, 1508,

     1508, 1508, 1508, 3041, 1333, 1403, 1389, 1567, 1567, 1567,
     1567, 1335, 1397, 3042, 3043, 3044, 1398, 1333, 1336, 1389,
     3045, 3046, 1337, 1338, 1509, 1339, 1340, 1341, 1645, 3048,
     1646, 1342, 1343, 1344, 1345, 1346, 3050, 1347, 1399, 1348,
     1349, 1350, 1351, 1352, 1387, 1387, 1387, 1387, 1400, 1387,
     1387, 1387, 1387, 1404, 2003, 2196, 1401, 2003, 1402, 1387,
     1387, 1387, 1387, 2196, 1387, 1387, 1387, 1387, 2206, 1333,
     3049, 1389, 2220, 3049, 1333, 2220, 1389, 2228, 2231, 1387,
     1387, 1387, 1387, 2231, 1333, 2006, 1389, 1851, 2235, 1333,
     1851, 1389, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,

     1215, 1215, 1215, 1215, 1333, 1406, 1389, 2006, 1387, 1387,
     1387, 1387, 1645, 1405, 1646, 1852, 2235, 1333, 1216, 1389,
     2239, 1333, 2239, 1389, 1407, 1408, 1387, 1387, 1387, 1387,
     2243, 2243, 3054, 1333, 1409, 1389, 1411, 2251, 2251, 3055,
     1410, 3055, 1387, 1387, 1387, 1387, 1853, 1387, 1387, 1387,
     1387, 1333, 3047, 1389, 3056, 3057, 3058, 1414, 3059, 1429,
     1429, 1429, 1429, 1434, 1854, 1412, 1435, 1333, 1413, 1389,
     3060, 3061, 1333, 1415, 1389, 1326, 1326, 1326, 1326, 1328,
     1328, 1328, 1328, 1416, 1430, 3062, 3063, 1417, 1503, 1503,
     1503, 1503, 3064, 1327, 3065, 3066, 3067, 1329, 1482, 1482,

     1482, 1482, 3069, 3069, 1421, 1504, 1418, 1482, 1482, 1482,
     1482, 1419, 1422, 1506, 3071, 3071, 1420, 1423, 1467, 1467,
     1467, 1467, 1503, 1503, 1503, 1503, 1453, 1508, 1508, 1508,
     1508, 1513, 3072, 3073, 1514, 1453, 3074, 1468, 3075, 1504,
     3078, 3075, 1434, 1451, 1451, 1451, 1451, 1506, 1508, 1508,
     1508, 1508, 1509, 3079, 1527, 1527, 1527, 1527, 3080, 1452,
     1456, 3081, 1535, 1535, 1535, 1535, 3082, 3083, 1458, 1456,
     3084, 1453, 1528, 1509, 3085, 3086, 3087, 1458, 1469, 1507,
     1536, 1567, 1567, 1567, 1567, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1576, 1576, 1576, 1576, 3088, 3089, 3085,

     1454, 3090, 1455, 3091, 3092, 1456, 1576, 1576, 1576, 1576,
     1513, 3093, 1457, 1458, 3099, 3100, 1459, 1460, 1461, 3101,
     1462, 1587, 1587, 1587, 1587, 1591, 1591, 1591, 1591, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 3103, 1588, 1215,
     1215, 1215, 1215, 3106, 1573, 3107, 3108, 3109, 1573, 1326,
     1326, 1326, 1326, 1328, 1328, 1328, 1328, 1216, 1618, 1618,
     1618, 1618, 1624, 1624, 1624, 1624, 3076, 1327, 3112, 3076,
     3113, 1329, 1626, 1626, 1626, 1626, 3110, 3077, 1593, 1625,
     1215, 1215, 1215, 1215, 3114, 3111, 1595, 3115, 3116, 3118,
     1595, 1215, 1215, 1215, 1215, 3120, 3122, 1628, 1216, 1326,

     1326, 1326, 1326, 1328, 1328, 1328, 1328, 3123, 3124, 1216,
     3125, 1671, 1671, 1671, 1671, 3126, 2007, 1327, 1672, 2007,
     2008, 1329, 1671, 1671, 1671, 1671, 3129, 3130, 3127, 1672,
     4191, 4191, 4191, 4191, 2009, 3128, 3131, 4191, 1674, 1674,
     1674, 1674, 3132, 1679, 1679, 1679, 1679, 2010, 3133, 3134,
     1680, 1675, 1681, 3135, 3136, 3137, 1681, 1679, 1679, 1679,
     1679, 3138, 2405, 3139, 1680, 2405, 1681, 3140, 3141, 2010,
     1681, 4191, 4191, 4191, 4191, 3142, 3143, 3147, 4191, 3145,
     4191, 3148, 1358, 3149, 4191, 1679, 1679, 1679, 1679, 2944,
     3150, 3170, 1680, 2406, 1681, 3171, 3197, 3198, 1681, 1326,

     1326, 1326, 1326, 1328, 1328, 1328, 1328, 1683, 1683, 1683,
     1683, 1687, 1687, 1687, 1687, 2406, 3212, 1327, 3213, 3214,
     3215, 1329, 1688, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1692, 1692, 1692, 1692, 3216, 1689, 3218, 1693, 3219,
     1291, 3220, 1690, 1690, 1690, 1690, 1695, 3221, 1691, 1696,
     3222, 3146, 1691, 1690, 1690, 1690, 1690, 3223, 3228, 1685,
     1700, 1700, 1700, 1700, 3229, 3232, 3235, 1691, 1702, 1702,
     1702, 1702, 1701, 1709, 1709, 1709, 1709, 3236, 1691, 1703,
     1709, 1709, 1709, 1709, 1712, 1712, 1712, 1712, 1752, 1752,
     1752, 1752, 3237, 3238, 1704, 1752, 1752, 1752, 1752, 3239,

     3240, 3241, 1713, 1760, 1760, 1760, 1760, 1764, 1764, 1764,
     1764, 3242, 3243, 3245, 1761, 1764, 1764, 1764, 1764, 3248,
     1705, 2007, 1765, 2409, 2007, 1695, 2409, 2206, 2228, 1762,
     1765, 1766, 1766, 1766, 1766, 1781, 1781, 1781, 1781, 2144,
     3049, 1785, 1786, 3049, 1787, 3251, 1788, 3246, 1780, 1789,
     1790, 3252, 2010, 1775, 2010, 1763, 1645, 3253, 1646, 1791,
     3253, 1792, 1818, 1818, 1818, 1818, 3254, 3255, 3256, 1819,
     1818, 1818, 1818, 1818, 2010, 3257, 2010, 1819, 1823, 1823,
     1823, 1823, 3258, 3259, 1762, 1829, 1829, 1829, 1829, 2265,
     1824, 3260, 1830, 1825, 1829, 1829, 1829, 1829, 3244, 3261,

     3262, 1830, 1833, 1833, 1833, 1833, 1841, 1841, 1841, 1841,
     3263, 3264, 3266, 1834, 1821, 1841, 1841, 1841, 1841, 1875,
     3266, 3268, 1821, 1843, 1843, 1843, 1843, 3268, 3269, 3270,
     1844, 1842, 1841, 1841, 1841, 1841, 1846, 3271, 3272, 1847,
     1842, 1841, 1841, 1841, 1841, 3273, 3075, 1876, 1877, 3075,
     1878, 3274, 1879, 3275, 3276, 1880, 1881, 1842, 1906, 1906,
     1906, 1906, 1875, 3277, 3278, 1882, 1842, 1883, 1876, 1877,
     3279, 1878, 3280, 1879, 3281, 1223, 1880, 1881, 1899, 1899,
     1899, 1899, 1215, 1215, 1215, 1215, 1882, 3076, 1883, 3282,
     3076, 1898, 1221, 1222, 1222, 1221, 1891, 3283, 3077, 3284,

     1216, 1222, 1222, 1222, 1222, 1233, 1233, 1233, 1233, 1223,
     2003, 3285, 1234, 2003, 2004, 1846, 1264, 1224, 1223, 3287,
     3289, 3293, 1223, 2005, 3294, 3295, 1224, 1226, 1226, 1226,
     1226, 3296, 3297, 3298, 1227, 4191, 4191, 4191, 4191, 3299,
     3300, 2006, 4191, 1903, 1903, 1903, 1903, 1229, 1229, 1229,
     1229, 3301, 3302, 2007, 1239, 3303, 2007, 2079, 1240, 1226,
     1226, 1226, 1226, 2006, 3304, 3305, 1227, 3306, 3307, 1242,
     1243, 2080, 1224, 1225, 1238, 1238, 1238, 1238, 3309, 1233,
     1233, 1233, 1233, 3311, 2010, 1239, 1234, 3312, 1236, 1240,
     3315, 1223, 1261, 1261, 1261, 1261, 1223, 3316, 3318, 1224,

     1242, 1243, 4191, 4191, 4191, 4191, 2010, 3319, 3320, 4191,
     1908, 1908, 1908, 1908, 3321, 3322, 3327, 1909, 3330, 4191,
     1911, 1911, 1911, 1911, 1230, 3331, 3332, 1231, 3207, 1238,
     1238, 1238, 1238, 3333, 1245, 1245, 1245, 1245, 3334, 3335,
     1239, 1246, 1965, 3208, 1240, 1224, 1223, 3350, 1238, 1238,
     1238, 1238, 3354, 3355, 1224, 1242, 1243, 3358, 3383, 1239,
     3384, 3385, 1236, 1240, 3390, 1223, 3391, 3395, 3396, 4191,
     4191, 4191, 4191, 1224, 1242, 1243, 4191, 3397, 1903, 1903,
     1903, 1903, 3398, 3400, 3401, 4191, 3402, 2199, 3403, 1239,
     2199, 3404, 3407, 1240, 1248, 1249, 1249, 1248, 1249, 1249,

     1249, 1249, 3409, 1230, 1242, 1243, 1252, 1252, 1253, 1252,
     1252, 1252, 1253, 1252, 1255, 1255, 1255, 1255, 2201, 1250,
     3410, 1256, 3411, 1250, 3412, 4191, 4191, 4191, 4191, 3414,
     3415, 1254, 4191, 3416, 3417, 1254, 1913, 1913, 1913, 1913,
     2201, 1255, 1255, 1255, 1255, 3419, 3420, 1267, 1256, 1266,
     1266, 1266, 1266, 3422, 1921, 1921, 1921, 1921, 1258, 2206,
     1267, 1259, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     2228, 3426, 3427, 1267, 1250, 1225, 3428, 1267, 2588, 1250,
     3429, 1266, 1266, 1266, 1266, 2202, 2588, 1250, 2202, 2203,
     2265, 1250, 1267, 1266, 1266, 1266, 1266, 1284, 1284, 1284,

     1284, 3430, 3425, 2203, 1267, 3425, 1250, 1289, 1289, 1289,
     1289, 3431, 1297, 1298, 1298, 1297, 2204, 3432, 1250, 1299,
     1298, 1298, 1298, 1298, 1285, 3433, 3434, 1299, 4191, 4191,
     4191, 4191, 1290, 3253, 3436, 4191, 3253, 1258, 2204, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1645, 3436, 1646,
     1924, 1935, 1935, 1935, 1935, 1923, 1313, 3438, 1936, 4191,
     1313, 3438, 4191, 3439, 1315, 3440, 4191, 3441, 1315, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1301, 1286, 1950,
     1950, 1950, 1950, 2818, 3442, 1301, 1313, 1326, 1326, 1326,
     1326, 2613, 3443, 1302, 1315, 2613, 3280, 1836, 1315, 3445,

     1836, 4191, 3446, 3447, 1837, 1327, 1838, 3448, 3449, 4191,
     1838, 1934, 1251, 1303, 1303, 1304, 1303, 1251, 1251, 1251,
     1305, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 3452, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1251, 1251, 1251, 1251, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1307, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 3455, 1251, 1251, 1306, 4191, 4191,

     4191, 4191, 3456, 3457, 3458, 4191, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1310, 1310, 1310, 1310, 3459, 1312,
     1312, 1312, 1312, 1313, 3460, 3462, 3463, 1313, 3464, 3465,
     3467, 1315, 3468, 3469, 3470, 1315, 1313, 1328, 1328, 1328,
     1328, 3471, 3472, 3476, 1315, 1956, 1956, 1956, 1956, 1353,
     1353, 1353, 1353, 3483, 3481, 1329, 1354, 4191, 4191, 4191,
     4191, 3484, 3485, 1316, 4191, 1988, 1988, 1988, 1988, 3482,
     1333, 3489, 1316, 3490, 1934, 1359, 1359, 1359, 1359, 4191,
     1371, 1371, 1371, 1371, 1356, 2910, 1379, 1356, 1387, 1387,
     1387, 1387, 1389, 2379, 3503, 1311, 1955, 1956, 1956, 1955,

     1333, 3504, 1332, 1990, 1990, 1990, 1990, 1990, 1990, 1353,
     1353, 1353, 1353, 1333, 3509, 1389, 1354, 2015, 2015, 2015,
     2015, 1333, 1366, 1366, 1366, 1366, 3510, 1334, 2016, 1367,
     3511, 1368, 3512, 3527, 2017, 1368, 1441, 1215, 1215, 1441,
     3507, 1335, 1442, 1357, 1358, 3528, 3534, 1369, 1336, 3508,
     3535, 3538, 1337, 1338, 1216, 1339, 1340, 1341, 3539, 3540,
     3548, 1342, 1343, 1344, 1345, 1346, 3550, 1347, 2803, 1348,
     1349, 1350, 1351, 1352, 4191, 3552, 3553, 1368, 4191, 4191,
     4191, 4191, 4191, 3555, 3556, 4191, 3557, 4191, 2206, 2003,
     2228, 4191, 2003, 1994, 1994, 1994, 1994, 1997, 1997, 1997,

     1997, 2588, 1368, 4191, 1995, 3563, 1368, 2588, 3564, 1998,
     1999, 2012, 2012, 2012, 2012, 1360, 2308, 3565, 1361, 3566,
     2006, 3567, 2001, 3568, 2002, 3570, 2015, 2015, 2015, 2015,
     3570, 3572, 3572, 4191, 2613, 3576, 1333, 2016, 2015, 2015,
     2015, 2015, 2006, 2017, 1387, 1387, 1387, 1387, 1368, 2016,
     2015, 2015, 2015, 2015, 2613, 2017, 3577, 2015, 2015, 2015,
     2015, 2016, 2015, 2015, 2015, 2015, 3578, 2017, 2016, 1333,
     3579, 1389, 3580, 2016, 2017, 1387, 1387, 1387, 1387, 2017,
     2030, 2030, 2030, 2030, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 3581, 2019, 1360, 1387, 1387, 1387, 1387, 3586,

     1333, 3573, 1389, 3587, 3573, 3425, 2020, 2021, 3425, 1333,
     3588, 1389, 3574, 1333, 3590, 1389, 1450, 1450, 1450, 1450,
     1333, 2022, 1389, 2025, 3591, 3560, 3561, 2027, 2028, 3575,
     2023, 2029, 3575, 2024, 3592, 1387, 1387, 1387, 1387, 3327,
     3593, 2031, 3595, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 2032,
     1333, 3596, 1389, 1387, 1387, 1387, 1387, 3599, 1333, 2033,
     1389, 3602, 1333, 3603, 1389, 3604, 1333, 3605, 1389, 3607,
     1333, 3608, 1389, 1387, 1387, 1387, 1387, 3609, 1333, 3611,
     1389, 3621, 2034, 1387, 1387, 1387, 1387, 1387, 1387, 1387,

     1387, 3622, 2035, 1387, 1387, 1387, 1387, 3626, 1333, 2037,
     1389, 3627, 2036, 1387, 1387, 1387, 1387, 3628, 1333, 2039,
     1389, 3629, 1333, 3650, 1389, 2038, 1965, 1987, 1333, 3652,
     1389, 1387, 1387, 1387, 1387, 3653, 3654, 3655, 1333, 2040,
     1389, 3660, 3661, 3662, 2041, 1429, 1429, 1429, 1429, 3663,
     2206, 2228, 2042, 2588, 3666, 3667, 1333, 3666, 1389, 3670,
     3668, 3669, 2045, 3668, 2043, 3671, 3672, 3673, 2044, 3674,
     1430, 3676, 2046, 2051, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     2047, 1387, 1387, 1387, 1387, 3676, 2048, 3678, 2049, 1333,

     3678, 1389, 2613, 1333, 3681, 1389, 2050, 1333, 3682, 1389,
     3683, 1333, 2202, 1389, 3575, 2202, 1333, 3575, 1389, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 3684, 2052, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 3685, 2054, 2204, 1333, 3689, 1389, 3690, 1333, 3692,
     1389, 3695, 1333, 2053, 1389, 3696, 3701, 3702, 1333, 2056,
     1389, 2055, 1333, 3703, 1389, 2204, 1387, 1387, 1387, 1387,
     3708, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 3709,
     3621, 2059, 3507, 3715, 2057, 1431, 1431, 1431, 1431, 2058,
     2062, 1333, 1432, 1389, 2063, 2060, 1333, 3716, 1389, 3717,

     1333, 1957, 1389, 2026, 2357, 2061, 1387, 1387, 1387, 1387,
     2064, 1387, 1387, 1387, 1387, 3736, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 3737, 4191, 4191, 4191, 4191, 3738,
     3741, 1333, 4191, 1389, 2065, 3742, 1333, 2206, 1389, 2228,
     2067, 1333, 2066, 1389, 3747, 1333, 3748, 1389, 2074, 2074,
     2074, 2074, 1431, 1431, 1431, 1431, 2265, 3743, 3749, 1432,
     3743, 1438, 1438, 1438, 1438, 2076, 2076, 2076, 2076, 1434,
     2003, 2068, 1435, 2003, 2077, 1440, 2265, 3751, 2069, 1438,
     1438, 1438, 1438, 2078, 3751, 3753, 1430, 2071, 1440, 2070,
     1430, 1438, 1438, 1438, 1438, 1448, 1448, 1448, 1448, 3744,

     3753, 2006, 3744, 3754, 1430, 3679, 1440, 3755, 3679, 3280,
     1449, 1450, 1450, 1450, 1450, 3756, 1430, 3680, 1440, 1467,
     1467, 1467, 1467, 2006, 2090, 2090, 2090, 2090, 1467, 1467,
     1467, 1467, 2096, 2096, 2096, 2096, 3280, 3760, 1468, 1482,
     1482, 1482, 1482, 1485, 1485, 1485, 1485, 1468, 1434, 1451,
     1451, 1451, 1451, 3666, 3667, 1486, 3666, 2111, 2111, 2111,
     2111, 2115, 2115, 2115, 2115, 1452, 3316, 1453, 2112, 2114,
     2115, 2115, 2114, 1493, 3763, 1491, 1493, 1453, 3764, 1469,
     2120, 2120, 2120, 2120, 2113, 3765, 2199, 3768, 1469, 2199,
     2200, 3769, 2116, 2116, 2116, 2116, 2116, 2116, 3770, 2200,

     3771, 1456, 2121, 2122, 2123, 2121, 1454, 3774, 1455, 1458,
     3775, 1456, 1500, 1500, 1500, 1500, 3774, 2201, 1457, 1458,
     3776, 3777, 1459, 1460, 1461, 3791, 1462, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 2128, 2128, 2128, 2128, 2201,
     3573, 3792, 2129, 3573, 1504, 3409, 3668, 3669, 1504, 3668,
     2405, 3574, 1506, 2405, 3795, 2206, 1506, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1508, 1508, 1508, 1508, 1510,
     1510, 1510, 1510, 2228, 1504, 2265, 1511, 2473, 1504, 3802,
     2265, 2406, 1506, 3804, 3804, 3679, 1506, 2126, 3679, 3806,
     1509, 4191, 4191, 4191, 4191, 3806, 3280, 3680, 4191, 1510,

     1510, 1510, 1510, 2406, 3807, 3280, 1511, 1508, 1508, 1508,
     1508, 2133, 2133, 2133, 2133, 1513, 3810, 3811, 1514, 1508,
     1508, 1508, 1508, 2137, 2137, 2137, 2137, 1520, 3743, 2131,
     1520, 3743, 1509, 3812, 3813, 3796, 1509, 1527, 1527, 1527,
     1527, 3814, 3815, 3816, 1509, 3774, 1990, 1990, 1990, 1990,
     1990, 1990, 3821, 3822, 3831, 1528, 1535, 1535, 1535, 1535,
     1559, 1559, 1559, 1559, 1566, 1566, 1566, 1566, 1567, 1567,
     1567, 1567, 3834, 2206, 1536, 1572, 1572, 1572, 1572, 1576,
     1576, 1576, 1576, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 2228, 2265, 3840, 1513, 2154, 2154, 2154, 2154, 3840,

     1588, 3842, 2155, 3842, 1588, 3280, 3845, 3611, 2156, 1587,
     1587, 1587, 1587, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 3846, 1591, 1591, 1591, 1591, 1588, 3849, 2159, 2159,
     2159, 2159, 3850, 3771, 1573, 2160, 1594, 1594, 1594, 1594,
     2167, 2167, 2167, 2167, 1618, 1618, 1618, 1618, 1626, 1626,
     1626, 1626, 3852, 3853, 3857, 2168, 3860, 2206, 2228, 1624,
     1624, 1624, 1624, 3864, 3744, 4191, 1593, 3744, 4191, 3864,
     1593, 3798, 4191, 1628, 2158, 1593, 1625, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 2198, 2198, 2198, 2198, 1671,
     1671, 1671, 1671, 1595, 3866, 3866, 1672, 4191, 4191, 4191,

     4191, 3869, 2003, 3813, 4191, 2003, 1628, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 4191,
     1675, 3870, 4191, 3871, 1675, 2173, 4191, 3873, 1675, 1679,
     1679, 1679, 1679, 2006, 2411, 3874, 1680, 2411, 1681, 3878,
     3881, 2206, 1681, 4191, 4191, 4191, 4191, 2412, 2228, 3885,
     4191, 3885, 4191, 3887, 3887, 2006, 4191, 1679, 1679, 1679,
     1679, 3890, 3891, 3897, 1680, 2413, 1681, 3899, 3902, 2206,
     1681, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683,
     1683, 1683, 1683, 1687, 1687, 1687, 1687, 2413, 2210, 2210,
     2210, 2210, 2228, 3906, 1688, 2211, 1690, 1690, 1690, 1690,

     3906, 2212, 1692, 1692, 1692, 1692, 3908, 3908, 1689, 1693,
     4191, 4191, 4191, 4191, 3871, 3918, 2206, 4191, 2228, 3922,
     3922, 1691, 3924, 1685, 3924, 2206, 2228, 1685, 3934, 3934,
     3935, 1685, 1692, 1692, 1692, 1692, 3935, 3929, 3938, 1693,
     1690, 1690, 1690, 1690, 2216, 2216, 2216, 2216, 1695, 2206,
     2228, 1696, 1690, 1690, 1690, 1690, 1700, 1700, 1700, 1700,
     2217, 2217, 2217, 2217, 3943, 1691, 2696, 2689, 1701, 1691,
     2688, 2218, 1702, 1702, 1702, 1702, 2687, 1691, 1709, 1709,
     1709, 1709, 2685, 1703, 2222, 2222, 2222, 2222, 1712, 1712,
     1712, 1712, 2233, 2233, 2233, 2233, 1211, 1271, 1704, 2237,

     2237, 2237, 2237, 2684, 1211, 1271, 1713, 2241, 2241, 2241,
     2241, 2245, 2245, 2245, 2245, 1749, 2683, 1275, 1749, 1752,
     1752, 1752, 1752, 2682, 1705, 1275, 2681, 1695, 2253, 2253,
     2253, 2253, 2680, 2679, 2246, 2246, 2246, 2246, 2246, 2246,
     1760, 1760, 1760, 1760, 1764, 1764, 1764, 1764, 2678, 1274,
     1283, 1761, 1766, 1766, 1766, 1766, 1274, 1293, 1283, 1765,
     1766, 1766, 1766, 1766, 1274, 1293, 1762, 1781, 1781, 1781,
     1781, 1781, 1781, 1781, 1781, 1818, 1818, 1818, 1818, 1295,
     1780, 1308, 1819, 4191, 4191, 4191, 4191, 1295, 2677, 1308,
     4191, 1318, 1763, 1823, 1823, 1823, 1823, 1823, 1823, 1823,

     1823, 1823, 1823, 1823, 1823, 1824, 1444, 1318, 1825, 1824,
     2676, 2673, 1825, 1824, 1444, 1318, 1825, 2276, 2276, 2276,
     2276, 1762, 1823, 1823, 1823, 1823, 1375, 1821, 2277, 2277,
     2277, 2277, 2672, 2671, 1824, 4191, 1287, 1825, 1829, 1829,
     1829, 1829, 1375, 1287, 1463, 1830, 4191, 4191, 4191, 4191,
     1375, 1287, 1463, 4191, 2278, 2278, 2278, 2278, 1833, 1833,
     1833, 1833, 1833, 1833, 1833, 1833, 2670, 2669, 2409, 1834,
     2668, 2409, 2667, 1834, 1833, 1833, 1833, 1833, 1841, 1841,
     1841, 1841, 2666, 1294, 1381, 1834, 1843, 1843, 1843, 1843,
     1294, 2665, 2664, 1844, 4191, 4191, 4191, 4191, 1294, 2010,

     1381, 4191, 1502, 1842, 1843, 1843, 1843, 1843, 1381, 2663,
     1502, 1844, 1841, 1841, 1841, 1841, 2284, 2284, 2284, 2284,
     1846, 2010, 2662, 1847, 1841, 1841, 1841, 1841, 2661, 1899,
     1899, 1899, 1899, 1899, 1899, 1899, 1899, 1842, 2660, 2659,
     1296, 1842, 1898, 1903, 1903, 1903, 1903, 1296, 1568, 1842,
     1903, 1903, 1903, 1903, 1239, 1296, 1568, 2658, 1240, 2657,
     1447, 1239, 2656, 2655, 2654, 1240, 2653, 1447, 2652, 1242,
     1243, 2309, 2309, 2309, 2309, 1447, 1242, 1243, 1906, 1906,
     1906, 1906, 1239, 2651, 2650, 2647, 1240, 1906, 1906, 1906,
     1906, 2030, 2030, 2030, 2030, 1223, 1224, 1242, 1243, 1846,

     1908, 1908, 1908, 1908, 1223, 2646, 1470, 1909, 4191, 4191,
     4191, 4191, 2645, 1470, 1583, 4191, 1911, 1911, 1911, 1911,
     1230, 1470, 1583, 1231, 1903, 1903, 1903, 1903, 1586, 1913,
     1913, 1913, 1913, 2642, 2641, 1239, 1586, 1948, 2638, 1240,
     1267, 1224, 1913, 1913, 1913, 1913, 1266, 1266, 1266, 1266,
     1242, 1243, 2031, 1267, 2637, 1590, 1596, 1267, 1921, 1921,
     1921, 1921, 1258, 1590, 1596, 1259, 2636, 1266, 1266, 1266,
     1266, 1250, 2635, 1266, 1266, 1266, 1266, 1605, 1267, 1312,
     1312, 1312, 1312, 1250, 1267, 1605, 2325, 2325, 2325, 2325,
     2326, 2634, 1250, 2327, 1313, 2631, 1313, 1276, 1250, 1230,

     1312, 1312, 1312, 1312, 1315, 1935, 1935, 1935, 1935, 2323,
     1608, 2328, 1936, 4191, 4191, 4191, 4191, 1313, 1608, 2622,
     4191, 1312, 1312, 1312, 1312, 1315, 2333, 2333, 2333, 2333,
     2621, 1616, 2618, 1936, 2345, 2345, 2345, 2345, 2340, 1616,
     2319, 1258, 2318, 2617, 2616, 2615, 1315, 2341, 2341, 2341,
     2341, 2012, 2012, 2012, 2012, 1360, 2614, 2613, 1361, 1333,
     1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 2612, 2326,
     2608, 2330, 2344, 2345, 2345, 2344, 1333, 2605, 1332, 2604,
     2603, 1994, 1994, 1994, 1994, 2385, 2602, 1389, 2385, 2601,
     1368, 1389, 1995, 2281, 1368, 2600, 2599, 1333, 1997, 1997,

     1997, 1997, 2599, 1334, 1990, 1990, 1990, 1990, 1990, 1990,
     1998, 1999, 2090, 2090, 2090, 2090, 2597, 1335, 2597, 2392,
     2392, 2392, 2392, 2001, 1336, 2268, 2393, 2409, 1337, 1338,
     2409, 1339, 1340, 1341, 1360, 2266, 1368, 1342, 1343, 1344,
     1345, 1346, 2594, 1347, 1369, 1348, 1349, 1350, 1351, 1352,
     2388, 2388, 2388, 2388, 2308, 2593, 1623, 2389, 2010, 1368,
     2592, 1643, 2591, 1368, 1623, 2395, 2395, 2395, 2395, 1643,
     2397, 2397, 2397, 2397, 2590, 2390, 2396, 2398, 2589, 2588,
     2010, 2587, 2399, 1997, 1997, 1997, 1997, 2012, 2012, 2012,
     2012, 1360, 2586, 2585, 1361, 1998, 1999, 2251, 2015, 2015,

     2015, 2015, 2251, 1649, 2581, 1368, 2580, 2243, 2001, 2016,
     2002, 1649, 1333, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
     2015, 1655, 2243, 1657, 2016, 1722, 2239, 2239, 2016, 1655,
     2017, 1657, 2235, 1722, 2017, 2015, 2015, 2015, 2015, 2015,
     2015, 2015, 2015, 1724, 2235, 2199, 2016, 1756, 2199, 1795,
     2016, 1724, 2017, 2231, 2231, 1756, 2017, 1795, 2015, 2015,
     2015, 2015, 2015, 2015, 2015, 2015, 2566, 2228, 2563, 2016,
     1360, 2220, 2308, 2016, 2419, 2017, 2201, 2220, 1685, 2017,
     2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2208, 2206,
     2414, 2016, 1569, 2409, 2408, 2016, 2409, 2017, 2201, 1569,

     1799, 2017, 2096, 2096, 2096, 2096, 2420, 1569, 1799, 1387,
     1387, 1387, 1387, 2196, 2421, 2196, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 2010, 2550, 2549, 2423, 1387, 1387,
     1387, 1387, 2424, 2422, 1333, 2548, 1389, 1597, 2425, 2547,
     2546, 1333, 2427, 1389, 1597, 1333, 2010, 1389, 1387, 1387,
     1387, 1387, 1597, 1333, 1645, 1389, 2426, 2187, 2543, 2429,
     2542, 2541, 2428, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 2540, 2539, 1333, 2538, 1389, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1333, 2537,
     1389, 1801, 1333, 1611, 1389, 1387, 1387, 1387, 1387, 1801,

     1611, 1333, 1805, 1389, 2430, 1333, 2536, 1389, 1611, 1333,
     1805, 1389, 2535, 1387, 1387, 1387, 1387, 2534, 2533, 2532,
     1333, 1619, 1389, 2431, 1387, 1387, 1387, 1387, 1619, 1387,
     1387, 1387, 1387, 2308, 2433, 2473, 1619, 2432, 1333, 1822,
     1389, 1387, 1387, 1387, 1387, 2435, 2308, 1822, 2530, 1333,
     2434, 1389, 2529, 2527, 1333, 2436, 1389, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 2437, 1333, 1797, 1389, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 2438, 1333, 1797, 1389, 2524, 1333, 1832, 1389, 1905,
     2440, 1797, 1650, 2439, 1333, 1832, 1389, 1905, 1333, 1650,

     1389, 2523, 1333, 2522, 1389, 2521, 1656, 1650, 2441, 1387,
     1387, 1387, 1387, 1656, 1387, 1387, 1387, 1387, 2442, 2520,
     1658, 1656, 2443, 1387, 1387, 1387, 1387, 1658, 2519, 1915,
     2444, 1723, 2145, 1803, 1333, 1658, 1389, 1915, 1723, 1333,
     2445, 1389, 1387, 1387, 1387, 1387, 1723, 2518, 1333, 1803,
     1389, 2141, 2446, 1387, 1387, 1387, 1387, 1803, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 2135, 1333, 1362, 1389,
     1387, 1387, 1387, 1387, 2447, 2448, 1362, 2135, 1333, 2509,
     1389, 1759, 2449, 1333, 2508, 1389, 2118, 1333, 1759, 1389,
     2118, 1387, 1387, 1387, 1387, 1333, 1759, 1389, 1387, 1387,

     1387, 1387, 2501, 1387, 1387, 1387, 1387, 1798, 1387, 1387,
     1387, 2459, 1375, 1381, 1798, 2450, 1333, 2451, 1389, 2453,
     1375, 1381, 1798, 1333, 1436, 1389, 2499, 2498, 1333, 2497,
     1389, 2454, 1436, 1333, 2452, 1389, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 2494, 2493, 2492, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 2491,
     2490, 1333, 2488, 1389, 1800, 1333, 2487, 1389, 2455, 2456,
     2458, 1800, 1333, 2457, 1389, 2486, 1333, 2412, 1389, 1800,
     1333, 2483, 1389, 1387, 1387, 1387, 1387, 2482, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,

     1275, 2481, 2480, 1387, 1387, 1387, 1387, 2479, 1333, 2461,
     1389, 2478, 2460, 1333, 2477, 1389, 1275, 1333, 2476, 1389,
     2475, 1333, 2462, 1389, 1275, 2472, 2464, 2463, 1333, 2471,
     1389, 1968, 1387, 1387, 1387, 1387, 2074, 2074, 2074, 2074,
     2074, 2074, 2074, 2074, 2465, 2076, 2076, 2076, 2076, 1434,
     2417, 2416, 1435, 2411, 2415, 2403, 2411, 1333, 2466, 1389,
     1515, 2467, 1804, 1440, 1725, 1725, 2412, 1440, 1515, 1804,
     1430, 1725, 2468, 2489, 2489, 2489, 2489, 1804, 2469, 1725,
     2474, 2401, 2387, 1930, 2413, 2495, 2495, 2495, 2495, 2470,
     2111, 2111, 2111, 2111, 2502, 2503, 2503, 2502, 2386, 1930,

     1491, 2112, 2503, 2503, 2503, 2503, 2413, 1930, 1697, 2506,
     2496, 2504, 2384, 2383, 2504, 2382, 1697, 2113, 2507, 2507,
     2507, 2507, 2121, 2122, 2123, 2121, 2381, 2380, 1434, 1939,
     2116, 2116, 2116, 2116, 2116, 2116, 2123, 2122, 2123, 2123,
     2128, 2128, 2128, 2128, 1797, 1939, 2377, 2129, 4191, 4191,
     4191, 4191, 1797, 1939, 1318, 4191, 2510, 2510, 2510, 2510,
     1503, 1503, 1503, 1503, 2133, 2133, 2133, 2133, 1513, 1806,
     1318, 1514, 1274, 1504, 2376, 1803, 1806, 1504, 1318, 1274,
     1839, 1506, 2514, 1803, 1806, 1506, 2375, 1274, 1839, 1509,
     2372, 2515, 2515, 2515, 2515, 2154, 2154, 2154, 2154, 2371,

     1287, 2370, 2155, 4191, 4191, 4191, 4191, 1287, 2156, 2153,
     4191, 1587, 1587, 1587, 1587, 1287, 4191, 2159, 2159, 2159,
     2159, 2512, 2369, 2368, 2160, 2153, 1848, 1275, 1588, 4191,
     4191, 4191, 4191, 2153, 1848, 1275, 4191, 2528, 2528, 2528,
     2528, 2167, 2167, 2167, 2167, 2367, 2360, 1513, 2531, 2531,
     2531, 2531, 2552, 2293, 2202, 2359, 2168, 2202, 2358, 2355,
     2354, 2553, 2553, 2553, 2553, 2210, 2210, 2210, 2210, 2293,
     2353, 1930, 2211, 4191, 4191, 4191, 4191, 2293, 2212, 1930,
     4191, 2308, 2352, 2351, 2348, 2204, 4191, 2555, 2555, 2555,
     2555, 2556, 2556, 2556, 2556, 2216, 2216, 2216, 2216, 1695,

     2212, 2560, 1696, 2217, 2217, 2217, 2217, 2204, 1948, 1939,
     2561, 2561, 2561, 2561, 2218, 2568, 2558, 1939, 2579, 2571,
     1691, 2579, 1948, 2574, 2569, 2569, 2569, 2569, 2572, 2572,
     2572, 2572, 2575, 2575, 2575, 2575, 2577, 2246, 2246, 2246,
     2246, 2246, 2246, 2583, 2338, 2578, 2578, 2578, 2578, 2337,
     2336, 2335, 2584, 2584, 2584, 2584, 1823, 1823, 1823, 1823,
     2276, 2276, 2276, 2276, 2277, 2277, 2277, 2277, 1824, 2153,
     2334, 1825, 2278, 2278, 2278, 2278, 1316, 2153, 1695, 2278,
     2278, 2278, 2278, 2284, 2284, 2284, 2284, 1846, 1294, 1313,
     1847, 2309, 2309, 2309, 2309, 1294, 2309, 2309, 2309, 2309,

     2323, 2293, 1239, 1294, 2320, 2317, 1240, 1239, 1842, 2293,
     2316, 1240, 2626, 2626, 2626, 2626, 1224, 1242, 1243, 2627,
     2308, 1224, 1242, 1243, 1266, 1266, 1266, 1266, 2629, 2629,
     2629, 2629, 2306, 2302, 2418, 1267, 1312, 1312, 1312, 1312,
     2333, 2333, 2333, 2333, 1296, 1948, 1885, 1936, 2301, 1250,
     2418, 1296, 2418, 2328, 2640, 2640, 2640, 2640, 2418, 1296,
     2418, 1315, 2489, 2489, 2489, 2489, 1846, 2609, 2609, 2609,
     2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609,
     2609, 2609, 2609, 2609, 2609, 2609, 2609, 2610, 2610, 2610,
     2610, 2610, 2610, 2609, 2609, 2609, 2609, 2609, 2609, 2609,

     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2609, 2609, 2609, 2609, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2609,
     2609, 2609, 2611, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 2300, 2299, 2298, 1267, 2297, 2295, 1643, 1267, 2325,
     2325, 2325, 2325, 2326, 2011, 1643, 2327, 2294, 1250, 2292,
     1724, 2011, 1250, 2629, 2629, 2629, 2629, 2326, 1724, 2011,
     2630, 2291, 1874, 1861, 2328, 1312, 1312, 1312, 1312, 2644,

     2644, 2644, 2644, 1861, 2388, 2388, 2388, 2388, 2328, 2289,
     1861, 2389, 1313, 1368, 2329, 3722, 2288, 1368, 2624, 2287,
     1315, 2286, 2329, 3722, 1333, 1859, 2623, 1941, 1857, 2390,
     4191, 4191, 4191, 4191, 1941, 1849, 1941, 4191, 1447, 4191,
     2282, 1643, 1941, 4191, 2281, 1447, 1828, 2690, 2690, 2690,
     2690, 1828, 2326, 1447, 2274, 4191, 1470, 1643, 2273, 1368,
     2273, 2271, 2633, 1470, 2271, 1643, 2326, 2643, 2644, 2644,
     2643, 1470, 2692, 1332, 2693, 2392, 2392, 2392, 2392, 2268,
     2266, 2264, 2393, 2263, 2262, 4191, 4191, 4191, 4191, 4191,
     2261, 2260, 1333, 4191, 2489, 2489, 2489, 2489, 1334, 2395,

     2395, 2395, 2395, 2259, 2694, 2694, 2694, 2694, 2257, 2256,
     2396, 2255, 1335, 2254, 1772, 2132, 1998, 1717, 2251, 1336,
     2249, 2243, 2132, 1337, 1338, 2239, 1339, 1340, 1341, 2001,
     2132, 2002, 1342, 1343, 1344, 1345, 1346, 2235, 1347, 2231,
     1348, 1349, 1350, 1351, 1352, 2397, 2397, 2397, 2397, 2229,
     1726, 1726, 2398, 4191, 4191, 4191, 4191, 2399, 2398, 1719,
     4191, 1717, 1716, 2399, 1724, 4191, 2495, 2495, 2495, 2495,
     2697, 2697, 2697, 2697, 2697, 2697, 2388, 2388, 2388, 2388,
     1724, 2228, 1717, 2393, 2220, 1368, 1707, 1698, 1724, 1368,
     2694, 2694, 2694, 2694, 2015, 2015, 2015, 2015, 3413, 2214,

     3418, 2390, 1998, 2209, 2208, 2016, 2015, 2015, 2015, 2015,
     1668, 2017, 2206, 1669, 3413, 2001, 3418, 2016, 2015, 2015,
     2015, 2015, 3413, 2017, 3418, 2015, 2015, 2015, 2015, 2016,
     2196, 1368, 2194, 2193, 2190, 2017, 2016, 2015, 2015, 2015,
     2015, 2187, 2017, 2185, 2015, 2015, 2015, 2015, 2016, 2015,
     2015, 2015, 2015, 2184, 2017, 2016, 2015, 2015, 2015, 2015,
     2016, 2017, 2788, 2789, 2789, 2788, 2017, 2016, 1491, 1387,
     1387, 1387, 1387, 2017, 2183, 2182, 2015, 2015, 2015, 2015,
     2705, 1387, 1387, 1387, 1387, 2706, 2707, 2016, 1387, 1387,
     1387, 1387, 2181, 2017, 1333, 3247, 1389, 2495, 2495, 2495,

     2495, 3247, 2708, 1569, 2178, 1597, 1333, 2177, 1389, 2713,
     1569, 2176, 1597, 1333, 2175, 1389, 2174, 3247, 1569, 2715,
     1597, 2709, 2496, 2711, 2710, 3247, 1387, 1387, 1387, 1387,
     1604, 2714, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 2166, 1611,
     2165, 1333, 2712, 1389, 2164, 1619, 1611, 1333, 2163, 1389,
     2162, 1333, 1619, 1389, 1611, 1333, 2161, 1389, 2152, 1333,
     1619, 1389, 2151, 1387, 1387, 1387, 1387, 2150, 2149, 1387,
     1387, 1387, 1387, 2148, 2716, 1574, 2728, 2728, 2728, 2728,
     1387, 1387, 1387, 1387, 2852, 2853, 2147, 2719, 1333, 2854,

     1389, 1650, 2855, 2856, 1333, 2717, 1389, 2146, 1650, 1550,
     2718, 1333, 2857, 1389, 2858, 1333, 1650, 1389, 2145, 2720,
     2786, 2786, 2786, 2786, 2789, 2789, 2789, 2789, 2118, 1542,
     1542, 2787, 2528, 2528, 2528, 2528, 2141, 2792, 2792, 2792,
     2792, 2138, 2721, 2135, 2722, 2723, 2724, 2724, 2724, 2724,
     2723, 2723, 2723, 2723, 2723, 2723, 2723, 2723, 2723, 2723,
     2723, 2723, 2723, 2723, 2723, 2730, 1516, 2729, 1504, 2127,
     2125, 2725, 2118, 2726, 2723, 2723, 2723, 2723, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     2110, 1387, 1387, 1387, 1387, 1656, 2109, 1658, 2723, 2723,

     2723, 2723, 1656, 1333, 1658, 1389, 2108, 1333, 2107, 1389,
     1656, 1333, 1658, 1389, 2106, 2105, 1333, 2104, 1389, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 2723, 2723, 2723,
     2727, 1387, 1387, 1387, 1387, 2103, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1333, 2102, 1389, 2732, 1333, 2731,
     1389, 1387, 1387, 1387, 1387, 2101, 1333, 2100, 1389, 2733,
     2734, 1333, 2099, 1389, 2098, 1333, 2097, 1389, 1387, 1387,
     1387, 1387, 2531, 2531, 2531, 2531, 1333, 2089, 1389, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 2086, 2735, 1333, 2085, 1389, 2215, 1484, 1483, 2736,

     2082, 2737, 2081, 2215, 1333, 2738, 1389, 1464, 1333, 1437,
     1389, 2215, 1333, 2739, 1389, 1387, 1387, 1387, 1387, 2073,
     2072, 2740, 1392, 2026, 2014, 2741, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 2879, 2880,
     1333, 2013, 1389, 2881, 1996, 2744, 2882, 2883, 1992, 2742,
     2743, 1333, 1991, 1389, 1984, 1333, 2884, 1389, 2885, 1333,
     1983, 1389, 1980, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 2746, 1387, 1387, 1387, 1387, 1333, 2745,
     1389, 2747, 1333, 1977, 1389, 2748, 1333, 1973, 1389, 1972,

     1333, 1971, 1389, 1967, 1333, 1964, 1389, 2135, 1963, 1333,
     1392, 1389, 1387, 1387, 1387, 1387, 2797, 2797, 2797, 2797,
     1387, 1387, 1387, 1387, 1962, 1957, 2750, 1723, 2749, 1948,
     1946, 1759, 2753, 1945, 1723, 1942, 2752, 1333, 1759, 1389,
     1316, 2751, 1723, 2755, 2754, 1333, 1759, 1389, 1387, 1387,
     1387, 1387, 2556, 2556, 2556, 2556, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 4191, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1333, 1317, 1389, 1940, 2558, 1938, 2756,
     2757, 1333, 1932, 1389, 1282, 1333, 1929, 1389, 1928, 2758,
     1333, 1927, 1389, 1922, 1333, 1264, 1389, 2510, 2510, 2510,

     2510, 2510, 2510, 2510, 2510, 1264, 1503, 1503, 1503, 1503,
     1587, 1587, 1587, 1587, 1504, 1237, 1219, 2759, 1504, 2760,
     1894, 2761, 1506, 1504, 2196, 1891, 1506, 1588, 1861, 1861,
     1861, 1506, 1861, 2825, 2825, 2825, 2825, 2555, 2555, 2555,
     2555, 2762, 2220, 1859, 2763, 2556, 2556, 2556, 2556, 2231,
     2212, 2829, 2829, 2829, 2829, 2235, 1858, 1857, 2833, 2833,
     2833, 2833, 2239, 1849, 2835, 2835, 2835, 2835, 1840, 1828,
     2558, 2837, 2837, 2837, 2837, 2243, 1817, 1814, 1809, 2251,
     2795, 1802, 1796, 1775, 2839, 2839, 2839, 2839, 2843, 2843,
     2843, 2843, 2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609,

     2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609,
     2609, 2609, 2610, 2610, 2610, 2610, 2610, 2610, 2609, 2609,
     2609, 2609, 2609, 2609, 2609, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2609, 2609, 2609, 2609, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2609, 2609, 2609, 2611, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1717, 1772, 1758, 1267,
     1755, 1725, 1725, 1267, 2626, 2626, 2626, 2626, 1725, 1754,

     1753, 2627, 1748, 1250, 1745, 1742, 1725, 1250, 4191, 4191,
     4191, 4191, 1737, 1731, 1727, 4191, 2629, 2629, 2629, 2629,
     2889, 2889, 2889, 2889, 2326, 1726, 1721, 2630, 2629, 2629,
     2629, 2629, 1717, 1719, 1717, 2886, 1798, 1312, 1312, 1312,
     1312, 2328, 2887, 1798, 1716, 2328, 2897, 2897, 2897, 2897,
     1711, 1798, 1800, 2328, 1313, 2912, 2912, 2912, 2912, 1800,
     1707, 1804, 1315, 2941, 2941, 2941, 2941, 1800, 1804, 1698,
     2389, 1333, 2690, 2690, 2690, 2690, 1804, 2694, 2694, 2694,
     2694, 1686, 1669, 1668, 2690, 2690, 2690, 2690, 2390, 1998,
     1667, 1387, 1387, 1387, 1387, 3797, 1666, 2692, 2890, 1665,

     1664, 3797, 2001, 2326, 2896, 2897, 2897, 2896, 1661, 2692,
     1332, 2693, 2694, 2694, 2694, 2694, 1333, 3797, 1389, 3017,
     3017, 3017, 3017, 1806, 1998, 3797, 1660, 2956, 2398, 1333,
     1806, 1654, 1653, 2399, 1652, 1334, 2729, 2001, 1806, 2002,
     2697, 2697, 2697, 2697, 2697, 2697, 1651, 1641, 1640, 1335,
     1637, 2015, 2015, 2015, 2015, 1636, 1336, 1635, 1634, 2283,
     1337, 1338, 2016, 1339, 1340, 1341, 2283, 1633, 2017, 1342,
     1343, 1344, 1345, 1346, 2283, 1347, 1613, 1348, 1349, 1350,
     1351, 1352, 2398, 3018, 3018, 3018, 3018, 2399, 1604, 2015,
     2015, 2015, 2015, 1602, 2697, 2697, 2697, 2697, 2697, 2697,

     2016, 2015, 2015, 2015, 2015, 1599, 2017, 1598, 2015, 2015,
     2015, 2015, 2016, 2015, 2015, 2015, 2015, 1577, 2017, 2016,
     2015, 2015, 2015, 2015, 2016, 2017, 1387, 1387, 1387, 1387,
     2017, 2016, 2015, 2015, 2015, 2015, 1574, 2017, 1571, 2015,
     2015, 2015, 2015, 2016, 2015, 2015, 2015, 2015, 1570, 2017,
     2016, 1333, 1550, 1389, 1542, 2016, 2017, 1387, 1387, 1387,
     1387, 2017, 2948, 2947, 1387, 1387, 1387, 1387, 1537, 1526,
     2957, 1387, 1387, 1387, 1387, 1525, 1522, 2951, 1516, 1499,
     1498, 2949, 1333, 2950, 1389, 2961, 2961, 2961, 2961, 1333,
     1495, 1389, 1487, 2952, 1484, 1483, 1333, 1481, 1389, 2958,

     1478, 1477, 2953, 1476, 2954, 1387, 1387, 1387, 1387, 2955,
     1333, 1473, 1389, 2964, 2964, 2964, 2964, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1472, 1471, 1464, 2960, 1437,
     1333, 2959, 1389, 1387, 1387, 1387, 1387, 1392, 1333, 1379,
     1389, 1376, 1333, 1374, 1389, 1325, 1333, 1323, 1389, 1387,
     1387, 1387, 1387, 3018, 3018, 3018, 3018, 1320, 1333, 1317,
     1389, 2728, 2728, 2728, 2728, 3799, 2962, 2969, 2969, 2969,
     2969, 3799, 1309, 1288, 1333, 1282, 1389, 1265, 2965, 2963,
     1387, 1387, 1387, 1387, 1264, 1237, 1333, 3799, 1389, 4191,
     2966, 4191, 1333, 4191, 1389, 3799, 4191, 1387, 1387, 1387,

     1387, 1387, 1387, 1387, 1387, 1333, 4191, 1389, 4191, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 4191, 2280, 2280,
     2967, 4191, 1333, 4191, 1389, 2280, 1333, 4191, 1389, 3029,
     3029, 3029, 3029, 2280, 1333, 2968, 1389, 4191, 1333, 4191,
     1389, 1387, 1387, 1387, 1387, 4191, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 4191, 2970, 2971, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 2267, 1333, 4191, 1389, 2973,
     2972, 1333, 2267, 1389, 4191, 1333, 4191, 1389, 2974, 2267,
     4191, 4191, 1333, 4191, 1389, 4191, 1333, 2267, 1389, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,

     1387, 2975, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     2311, 2977, 4191, 4191, 1333, 2976, 1389, 2311, 1333, 2978,
     1389, 4191, 1333, 4191, 1389, 2311, 2979, 1333, 4191, 1389,
     4191, 1333, 2980, 1389, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 4191, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 4191, 4191, 2982, 1387, 1387, 1387, 1387, 2983, 1333,
     2011, 1389, 2981, 1333, 4191, 1389, 4191, 2011, 1333, 2984,
     1389, 4191, 1333, 4191, 1389, 2011, 4191, 2985, 4191, 1333,
     4191, 1389, 4191, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 4191,

     2322, 4191, 2988, 4191, 4191, 2322, 2989, 2322, 1333, 2986,
     1389, 2987, 1333, 4191, 1389, 2322, 1333, 4191, 1389, 4191,
     1333, 4191, 1389, 3032, 3032, 3032, 3032, 2992, 1387, 1387,
     1387, 1387, 4191, 1387, 1387, 1387, 1387, 2999, 2999, 2999,
     2999, 1470, 3001, 3001, 3001, 3001, 2994, 4191, 1470, 4191,
     2993, 4191, 2996, 1333, 4191, 1389, 1470, 4191, 1333, 4191,
     1389, 4191, 1333, 4191, 1389, 4191, 2995, 1333, 4191, 1389,
     1387, 1387, 1387, 3002, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 3023, 3023, 3023, 3023, 4191, 1941, 4191, 2997,
     2998, 4191, 4191, 3024, 1941, 1333, 1941, 1389, 4191, 1333,

     4191, 1389, 1941, 1333, 4191, 1389, 2786, 2786, 2786, 2786,
     3028, 3029, 3029, 3028, 4191, 4191, 1491, 2787, 3000, 1503,
     1503, 1503, 1503, 4191, 4191, 4191, 4191, 2210, 2210, 2210,
     2210, 3004, 4191, 4191, 2211, 4191, 1504, 4191, 4191, 4191,
     2212, 4191, 4191, 3005, 1506, 3003, 1266, 1266, 1266, 1266,
     3095, 3095, 3095, 3095, 4191, 4191, 3025, 1267, 4191, 4191,
     4191, 1267, 2889, 2889, 2889, 2889, 2326, 4191, 4191, 2630,
     4191, 1250, 4191, 4191, 4191, 3096, 1312, 1312, 1312, 1312,
     3102, 3102, 3102, 3102, 2132, 1569, 4191, 2328, 3033, 4191,
     3031, 2132, 1569, 1313, 3105, 3105, 3105, 3105, 4191, 2132,

     1569, 1315, 4191, 4191, 4191, 3094, 3117, 3117, 3117, 3117,
     3119, 3119, 3119, 3119, 2912, 2912, 2912, 2912, 4191, 1333,
     3121, 3121, 3121, 3121, 4191, 4191, 4191, 3144, 3144, 3144,
     3144, 3097, 2941, 2941, 2941, 2941, 4191, 4191, 4191, 2389,
     2690, 2690, 2690, 2690, 3098, 2326, 3104, 3105, 3105, 3104,
     4191, 2332, 1332, 2332, 2388, 2388, 2388, 2388, 4191, 2215,
     2332, 2389, 4191, 1368, 4191, 2692, 2215, 1368, 2332, 4191,
     4191, 1333, 4191, 2967, 2215, 4191, 4191, 1334, 4191, 2390,
     4191, 4191, 2015, 2015, 2015, 2015, 4191, 2962, 2968, 4191,
     4191, 1335, 4191, 2016, 3017, 3017, 3017, 3017, 1336, 2017,

     4191, 4191, 1337, 1338, 4191, 1339, 1340, 1341, 3000, 1368,
     4191, 1342, 1343, 1344, 1345, 1346, 4191, 1347, 4191, 1348,
     1349, 1350, 1351, 1352, 2015, 2015, 2015, 2015, 2015, 2015,
     2015, 2015, 4191, 4191, 4191, 2016, 4191, 4191, 4191, 2016,
     4191, 2017, 4191, 4191, 4191, 2017, 2015, 2015, 2015, 2015,
     2015, 2015, 2015, 2015, 4191, 4191, 4191, 2016, 4191, 4191,
     4191, 2016, 4191, 2017, 4191, 4191, 4191, 2017, 2015, 2015,
     2015, 2015, 2015, 2015, 2015, 2015, 4191, 4191, 4191, 2016,
     4191, 4191, 4191, 2016, 4191, 2017, 4191, 4191, 4191, 2017,
     3152, 4191, 3151, 2015, 2015, 2015, 2015, 2015, 2015, 2015,

     2015, 4191, 4191, 4191, 2016, 4191, 4191, 4191, 2016, 4191,
     2017, 4191, 4191, 4191, 2017, 3153, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 4191, 3154, 4191, 3155, 4191, 4191,
     4191, 3156, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     4191, 1333, 4191, 1389, 4191, 1333, 4191, 1389, 4191, 4191,
     3159, 4191, 3157, 4191, 4191, 4191, 3160, 1333, 4191, 1389,
     4191, 1333, 4191, 1389, 3161, 1387, 1387, 1387, 1387, 4191,
     3158, 2961, 2961, 2961, 2961, 1387, 1387, 1387, 1387, 2964,
     2964, 2964, 2964, 3167, 3167, 3167, 3167, 4191, 2280, 2280,
     1333, 4191, 1389, 4191, 3168, 2280, 1333, 4191, 1389, 4191,

     1333, 3162, 1389, 2280, 1333, 4191, 1389, 4191, 1333, 4191,
     1389, 4191, 1387, 1387, 1387, 1387, 2969, 2969, 2969, 2969,
     1387, 1387, 1387, 1387, 3163, 1387, 1387, 1387, 1387, 2283,
     4191, 1336, 3017, 3017, 3017, 3017, 2283, 1333, 3165, 1389,
     2031, 1333, 4191, 1389, 2283, 1333, 4191, 1389, 4191, 3164,
     1333, 4191, 1389, 3166, 4191, 1351, 3174, 3174, 3174, 3174,
     4191, 3175, 4191, 4191, 3176, 3176, 3176, 3176, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     4191, 1333, 4191, 1389, 4191, 3172, 4191, 3169, 4191, 1333,
     3173, 1389, 4191, 1333, 4191, 1389, 4191, 1333, 4191, 1389,

     4191, 1333, 4191, 1389, 3180, 3180, 3180, 3180, 4191, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 3183, 3183, 3183,
     3183, 1387, 1387, 1387, 1387, 2269, 4191, 3177, 4191, 1333,
     2311, 1389, 2269, 3178, 1333, 4191, 1389, 2311, 1333, 2269,
     1389, 4191, 3184, 3179, 1389, 2311, 1333, 2269, 1389, 1387,
     1387, 1387, 1387, 3187, 3187, 3187, 3187, 1387, 1387, 1387,
     1387, 2267, 1387, 1387, 1387, 1387, 3181, 4191, 2267, 4191,
     3182, 4191, 2269, 4191, 1333, 2267, 1389, 4191, 1333, 2269,
     1389, 4191, 1333, 2267, 1389, 4191, 2269, 1333, 4191, 1389,
     1387, 1387, 1387, 1387, 2269, 1387, 1387, 1387, 1387, 4191,

     4191, 3185, 1387, 1387, 1387, 1387, 4191, 3193, 3193, 3193,
     3193, 1387, 1387, 1387, 1387, 1333, 4191, 1389, 3188, 3189,
     1333, 4191, 1389, 3186, 4191, 4191, 4191, 1333, 2322, 1389,
     4191, 4191, 3194, 2322, 1389, 2322, 1333, 4191, 1389, 1387,
     1387, 1387, 1387, 2322, 3201, 3201, 3201, 3201, 4191, 4191,
     4191, 3190, 3195, 3202, 3202, 3202, 3202, 1387, 1387, 1387,
     1387, 4191, 4191, 4191, 1333, 4191, 1389, 4191, 4191, 1333,
     3191, 1389, 3199, 1387, 1387, 1387, 1387, 3192, 1333, 4191,
     1389, 3196, 1333, 4191, 1389, 1387, 1387, 1387, 1387, 2999,
     2999, 2999, 2999, 3001, 3001, 3001, 3001, 4191, 1333, 4191,

     1389, 1387, 1387, 1387, 1387, 4191, 1387, 1387, 1387, 1387,
     1333, 4191, 1389, 3200, 1333, 4191, 1389, 4191, 1333, 4191,
     1389, 1387, 1387, 1387, 1387, 4191, 1333, 4191, 1389, 4191,
     4191, 1333, 3204, 1389, 3203, 3205, 1387, 1387, 1387, 1387,
     3023, 3023, 3023, 3023, 4191, 4191, 1333, 4191, 1389, 4191,
     4191, 3024, 4191, 3206, 3018, 3018, 3018, 3018, 4191, 4191,
     3207, 1333, 4191, 1389, 4191, 3224, 3224, 3224, 3224, 3226,
     3226, 3226, 3226, 4191, 4191, 3208, 3225, 4191, 3023, 3023,
     3023, 3023, 3227, 3227, 3227, 3227, 3209, 1470, 3210, 3024,
     3230, 3231, 3231, 3230, 1470, 4191, 1491, 3231, 3231, 3231,

     3231, 4191, 1470, 3211, 1503, 1503, 1503, 1503, 4191, 4191,
     4191, 4191, 1569, 2888, 3217, 1266, 1266, 1266, 1266, 1569,
     2888, 1504, 3095, 3095, 3095, 3095, 1267, 1569, 2888, 1506,
     4191, 1470, 4191, 1267, 1312, 1312, 1312, 1312, 1470, 4191,
     1250, 3288, 3288, 3288, 3288, 4191, 1470, 3096, 4191, 4191,
     4191, 1313, 3102, 3102, 3102, 3102, 4191, 4191, 4191, 1315,
     4191, 3233, 3290, 3290, 3290, 3290, 3291, 3292, 3292, 3291,
     4191, 3292, 3292, 3292, 3292, 3234, 3117, 3117, 3117, 3117,
     3119, 3119, 3119, 3119, 3121, 3121, 3121, 3121, 4191, 4191,
     2887, 3308, 3308, 3308, 3308, 3286, 1333, 3310, 3310, 3310,

     3310, 4191, 4191, 3097, 3313, 3313, 3313, 3313, 3317, 3317,
     3317, 3317, 3323, 3323, 3323, 3323, 3328, 3328, 3328, 3328,
     3329, 3329, 3329, 3329, 3144, 3144, 3144, 3144, 4191, 3314,
     4191, 4191, 1336, 2015, 2015, 2015, 2015, 3324, 4191, 3165,
     4191, 2031, 4191, 4191, 2016, 1387, 1387, 1387, 1387, 4191,
     2017, 4191, 4191, 4191, 3166, 4191, 1351, 3325, 2015, 2015,
     2015, 2015, 2015, 2015, 2015, 2015, 4191, 4191, 4191, 2016,
     1333, 4191, 1389, 2016, 4191, 2017, 4191, 2888, 4191, 2017,
     2015, 2015, 2015, 2015, 2888, 4191, 3326, 2015, 2015, 2015,
     2015, 2016, 2888, 3344, 3336, 4191, 4191, 2017, 2016, 4191,

     4191, 3203, 4191, 4191, 2017, 2015, 2015, 2015, 2015, 3342,
     3342, 3342, 3342, 4191, 4191, 3337, 2016, 4191, 4191, 3338,
     2016, 4191, 2017, 4191, 4191, 4191, 2017, 2015, 2015, 2015,
     2015, 1387, 1387, 1387, 1387, 4191, 4191, 4191, 2016, 4191,
     4191, 3339, 4191, 4191, 2017, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 3421, 3551, 4191, 1333, 4191, 1389, 4191,
     3421, 3551, 3340, 4191, 1387, 1387, 1387, 1387, 3421, 3551,
     1333, 4191, 1389, 4191, 1333, 3341, 1389, 3345, 3349, 3349,
     3349, 3349, 3167, 3167, 3167, 3167, 3346, 4191, 3343, 1333,
     4191, 1389, 4191, 3168, 3351, 3351, 3351, 3351, 4191, 3352,

     4191, 4191, 4191, 1333, 3352, 1389, 4191, 1333, 4191, 1389,
     1387, 1387, 1387, 1387, 4191, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 3347, 3174, 3174, 3174, 3174, 4191, 3175,
     3176, 3176, 3176, 3176, 4191, 1333, 2332, 1389, 2332, 3348,
     1333, 3554, 1389, 3835, 1333, 2332, 1389, 4191, 3554, 1333,
     3835, 1389, 4191, 2332, 4191, 1333, 3554, 1389, 3835, 3362,
     3362, 3362, 3362, 1387, 1387, 1387, 1387, 3368, 3368, 3368,
     3368, 3353, 3180, 3180, 3180, 3180, 3836, 4191, 1387, 1387,
     1387, 1387, 4191, 3836, 1333, 3356, 3363, 4191, 1333, 3359,
     1389, 3836, 1957, 4191, 3357, 4191, 4191, 1333, 4191, 1389,

     4191, 4191, 4191, 1333, 3360, 1389, 3361, 2723, 2724, 2724,
     2724, 2724, 2723, 2723, 2723, 2723, 2723, 2723, 2723, 2723,
     2723, 2723, 2723, 2723, 2723, 2723, 2723, 1387, 1387, 1387,
     1387, 4191, 4191, 2725, 4191, 2726, 2723, 2723, 2723, 2723,
     4191, 4191, 4191, 3365, 4191, 3367, 3183, 3183, 3183, 3183,
     4191, 4191, 1333, 4191, 1389, 3369, 3369, 3369, 3369, 4191,
     2723, 2723, 2723, 2723, 3364, 3394, 3394, 3394, 3394, 4191,
     4191, 3184, 4191, 1389, 3370, 3370, 3370, 3370, 4191, 4191,
     1333, 4191, 1389, 4191, 4191, 4191, 3366, 4191, 4191, 2723,
     2723, 2723, 2727, 3187, 3187, 3187, 3187, 4191, 4191, 3194,

     4191, 1389, 3371, 3371, 3371, 3371, 1387, 1387, 1387, 1387,
     3373, 3373, 3373, 3373, 1387, 1387, 1387, 1387, 1333, 4191,
     1389, 1387, 1387, 1387, 1387, 4191, 4191, 1333, 4191, 1389,
     4191, 1333, 4191, 1389, 4191, 3374, 4191, 1389, 4191, 1333,
     4191, 1389, 3193, 3193, 3193, 3193, 1333, 4191, 1389, 3380,
     3380, 3380, 3380, 4191, 4191, 3375, 1387, 1387, 1387, 1387,
     4191, 1387, 1387, 1387, 1387, 3372, 4191, 3194, 4191, 1389,
     3386, 3386, 3386, 3386, 1957, 3201, 3201, 3201, 3201, 3377,
     4191, 1333, 3379, 1389, 3376, 4191, 1333, 3325, 1389, 4191,
     3202, 3202, 3202, 3202, 3378, 3387, 4191, 1389, 4191, 4191,

     1333, 4191, 1389, 4191, 1387, 1387, 1387, 1387, 3388, 3388,
     3388, 3388, 3381, 4191, 4191, 1333, 3326, 1389, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 4191, 4191, 3382, 1333,
     4191, 1389, 4191, 1333, 4191, 1389, 3393, 3393, 3393, 3393,
     4191, 4191, 4191, 1333, 4191, 1389, 4191, 1333, 4191, 1389,
     1387, 1387, 1387, 1387, 4191, 3224, 3224, 3224, 3224, 4191,
     4191, 1333, 4191, 1389, 4191, 3177, 3225, 3226, 3226, 3226,
     3226, 3227, 3227, 3227, 3227, 1333, 4191, 1389, 4191, 3389,
     3399, 3399, 3399, 3399, 3224, 3224, 3224, 3224, 3226, 3226,
     3226, 3226, 4191, 3392, 4191, 3225, 3227, 3227, 3227, 3227,

     3405, 3406, 3406, 3405, 4191, 4191, 1491, 3406, 3406, 3406,
     3406, 2720, 1503, 1503, 1503, 1503, 4191, 4191, 4191, 4191,
     4191, 1312, 1312, 1312, 1312, 3451, 3451, 3451, 3451, 1504,
     3288, 3288, 3288, 3288, 4191, 4191, 4191, 1506, 1313, 3290,
     3290, 3290, 3290, 4191, 4191, 4191, 1315, 3453, 3454, 3454,
     3453, 3454, 3454, 3454, 3454, 3461, 3461, 3461, 3461, 3466,
     3466, 3466, 3466, 3308, 3308, 3308, 3308, 3310, 3310, 3310,
     3310, 3408, 3313, 3313, 3313, 3313, 1333, 2800, 3368, 3368,
     3368, 3368, 3473, 3473, 3473, 3473, 3474, 3474, 3474, 3474,
     3450, 3317, 3317, 3317, 3317, 4191, 4191, 3314, 3475, 3475,

     3475, 3475, 3477, 3477, 3477, 3477, 3323, 3323, 3323, 3323,
     4191, 3324, 3380, 3380, 3380, 3380, 3486, 3486, 3486, 3486,
     3328, 3328, 3328, 3328, 4191, 4191, 4191, 3478, 4191, 4191,
     4191, 3324, 3329, 3329, 3329, 3329, 3488, 3488, 3488, 3488,
     4191, 3487, 3491, 3491, 3491, 3491, 4191, 3479, 4191, 4191,
     4191, 3325, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
     4191, 4191, 4191, 2016, 4191, 4191, 4191, 2016, 4191, 2017,
     4191, 4191, 4191, 2017, 4191, 4191, 3480, 4191, 4191, 4191,
     3326, 2015, 2015, 2015, 2015, 3495, 3495, 3495, 3495, 4191,
     4191, 4191, 2016, 4191, 4191, 4191, 2016, 4191, 2017, 4191,

     4191, 4191, 2017, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
     2015, 4191, 4191, 4191, 2016, 3493, 4191, 4191, 2016, 4191,
     2017, 3492, 4191, 4191, 2017, 3342, 3342, 3342, 3342, 2015,
     2015, 2015, 2015, 4191, 4191, 4191, 2016, 4191, 4191, 4191,
     2016, 1387, 1387, 1387, 1387, 4191, 2017, 4191, 3494, 4191,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 4191, 4191, 3496, 4191, 1333, 4191, 1389, 3501,
     3501, 3501, 3501, 4191, 3497, 1333, 4191, 1389, 4191, 1333,
     4191, 1389, 4191, 1333, 4191, 1389, 4191, 4191, 4191, 3498,
     3349, 3349, 3349, 3349, 1333, 4191, 1389, 4191, 3499, 4191,

     4191, 3200, 3351, 3351, 3351, 3351, 4191, 3352, 1387, 1387,
     1387, 1387, 3352, 4191, 4191, 1333, 4191, 1389, 1387, 1387,
     1387, 1387, 3500, 3506, 3506, 3506, 3506, 3362, 3362, 3362,
     3362, 4191, 4191, 1333, 4191, 1389, 1387, 1387, 1387, 1387,
     4191, 4191, 4191, 1333, 4191, 1389, 4191, 4191, 1333, 4191,
     1389, 4191, 1333, 4191, 3363, 3514, 3514, 3514, 3514, 4191,
     4191, 1333, 4191, 1389, 1387, 1387, 1387, 1387, 3516, 3516,
     3516, 3516, 3368, 3368, 3368, 3368, 3369, 3369, 3369, 3369,
     1333, 3502, 1389, 3370, 3370, 3370, 3370, 3505, 4191, 1333,
     4191, 1389, 4191, 3517, 4191, 1389, 3371, 3371, 3371, 3371,

     4191, 1333, 4191, 1389, 4191, 4191, 3513, 4191, 3194, 4191,
     1389, 1387, 1387, 1387, 1387, 3373, 3373, 3373, 3373, 4191,
     4191, 1333, 4191, 1389, 4191, 3515, 3519, 3519, 3519, 3519,
     1387, 1387, 1387, 1387, 4191, 4191, 1333, 4191, 1389, 4191,
     3374, 4191, 1389, 1387, 1387, 1387, 1387, 3380, 3380, 3380,
     3380, 1957, 4191, 4191, 4191, 1333, 4191, 1389, 4191, 4191,
     3479, 4191, 4191, 1387, 1387, 1387, 1387, 4191, 1333, 4191,
     1389, 4191, 3518, 3523, 3523, 3523, 3523, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 4191, 3520, 4191, 1333, 3480,
     1389, 1387, 1387, 1387, 1387, 4191, 4191, 4191, 1333, 4191,

     1389, 4191, 1333, 4191, 1389, 4191, 1333, 4191, 1389, 4191,
     3521, 1387, 1387, 1387, 1387, 4191, 1333, 4191, 1389, 3386,
     3386, 3386, 3386, 4191, 3522, 4191, 4191, 4191, 3525, 3530,
     3530, 3530, 3530, 4191, 4191, 4191, 1333, 3524, 1389, 3388,
     3388, 3388, 3388, 4191, 3387, 4191, 1389, 3533, 3533, 3533,
     3533, 4191, 4191, 4191, 1957, 4191, 4191, 1387, 1387, 1387,
     1387, 3526, 4191, 4191, 1333, 4191, 1389, 3393, 3393, 3393,
     3393, 4191, 1333, 4191, 1389, 3394, 3394, 3394, 3394, 4191,
     4191, 3529, 1333, 4191, 1389, 3541, 3541, 3541, 3541, 4191,
     4191, 1336, 1333, 4191, 1389, 4191, 4191, 4191, 3531, 4191,

     2031, 3399, 3399, 3399, 3399, 3542, 3542, 3542, 3542, 3543,
     3543, 3543, 3543, 3166, 4191, 1351, 3532, 4191, 3536, 3544,
     3544, 3544, 3544, 3545, 3545, 3545, 3545, 3544, 3544, 3544,
     3544, 3546, 3547, 3547, 3546, 4191, 4191, 1491, 3547, 3547,
     3547, 3547, 3537, 1503, 1503, 1503, 1503, 3562, 3562, 3562,
     3562, 4191, 1312, 1312, 1312, 1312, 3451, 3451, 3451, 3451,
     1504, 3583, 3583, 3583, 3583, 4191, 4191, 4191, 1506, 1313,
     3584, 3585, 3585, 3584, 4191, 4191, 4191, 1315, 3585, 3585,
     3585, 3585, 3589, 3589, 3589, 3589, 3461, 3461, 3461, 3461,
     3594, 3594, 3594, 3594, 3466, 3466, 3466, 3466, 3597, 3597,

     3597, 3597, 4191, 1333, 3549, 3598, 3598, 3598, 3598, 3600,
     3600, 3600, 3600, 3473, 3473, 3473, 3473, 3474, 3474, 3474,
     3474, 3475, 3475, 3475, 3475, 4191, 4191, 3582, 3477, 3477,
     3477, 3477, 4191, 4191, 3601, 3519, 3519, 3519, 3519, 4191,
     4191, 4191, 3324, 3606, 3606, 3606, 3606, 3486, 3486, 3486,
     3486, 4191, 4191, 3478, 3530, 3530, 3530, 3530, 3488, 3488,
     3488, 3488, 3610, 3610, 3610, 3610, 3491, 3491, 3491, 3491,
     4191, 4191, 3487, 3479, 2015, 2015, 2015, 2015, 2015, 2015,
     2015, 2015, 4191, 4191, 4191, 2016, 4191, 4191, 4191, 2016,
     4191, 2017, 4191, 4191, 4191, 2017, 3614, 3614, 3614, 3614,

     4191, 4191, 3480, 3495, 3495, 3495, 3495, 2016, 4191, 4191,
     1336, 4191, 4191, 2017, 2016, 4191, 4191, 3531, 4191, 2031,
     2015, 2015, 2015, 2015, 4191, 3616, 3616, 3616, 3616, 4191,
     4191, 2016, 3166, 4191, 1351, 3532, 2016, 2017, 4191, 3613,
     4191, 4191, 2017, 3617, 3617, 3617, 3617, 4191, 4191, 3612,
     1387, 1387, 1387, 1387, 2016, 4191, 1387, 1387, 1387, 1387,
     2017, 3501, 3501, 3501, 3501, 1387, 1387, 1387, 1387, 3623,
     3623, 3623, 3623, 4191, 4191, 1333, 4191, 1389, 4191, 4191,
     3615, 1333, 4191, 1389, 4191, 4191, 1333, 4191, 1389, 4191,
     1333, 4191, 1389, 4191, 1333, 4191, 1389, 3506, 3506, 3506,

     3506, 3618, 3624, 3624, 3624, 3624, 1387, 1387, 1387, 1387,
     3514, 3514, 3514, 3514, 4191, 4191, 4191, 3619, 3631, 3631,
     3631, 3632, 1333, 4191, 1389, 4191, 4191, 3620, 4191, 4191,
     4191, 1333, 4191, 1389, 4191, 1333, 4191, 1389, 3516, 3516,
     3516, 3516, 4191, 1333, 4191, 1389, 3633, 3633, 3633, 3633,
     3519, 3519, 3519, 3519, 3648, 3648, 3648, 3648, 3530, 3530,
     3530, 3530, 4191, 3517, 4191, 1389, 3542, 3542, 3542, 3542,
     4191, 1957, 4191, 4191, 4191, 3630, 4191, 4191, 4191, 1387,
     1387, 1387, 1387, 3625, 3634, 3635, 3635, 3635, 3635, 3634,
     3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634,

     3634, 3634, 3634, 3634, 1333, 4191, 1389, 4191, 4191, 4191,
     3636, 3634, 3637, 3634, 3634, 3634, 3634, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 4191, 3639, 3523, 3523, 3523,
     3523, 3642, 3642, 3642, 3642, 3649, 4191, 3634, 3634, 3634,
     3634, 4191, 1333, 4191, 1389, 4191, 1333, 4191, 1389, 4191,
     4191, 4191, 1333, 4191, 1389, 4191, 3643, 4191, 1389, 1387,
     1387, 1387, 1387, 4191, 4191, 4191, 3634, 3634, 3634, 3638,
     4191, 1387, 1387, 1387, 1387, 4191, 3644, 4191, 4191, 1387,
     1387, 1387, 1387, 4191, 1333, 4191, 1389, 3640, 3533, 3533,
     3533, 3533, 4191, 4191, 4191, 3641, 1333, 4191, 1389, 4191,

     3646, 4191, 4191, 4191, 1333, 3645, 1389, 3631, 3631, 3631,
     3631, 4191, 4191, 1333, 4191, 1389, 3543, 3543, 3543, 3543,
     3545, 3545, 3545, 3545, 3541, 3541, 3541, 3541, 3542, 3542,
     3542, 3542, 1333, 4191, 1389, 3543, 3543, 3543, 3543, 3544,
     3544, 3544, 3544, 4191, 4191, 4191, 3647, 4191, 3651, 3545,
     3545, 3545, 3545, 3656, 3657, 3657, 3656, 4191, 4191, 1491,
     3657, 3657, 3657, 3657, 3658, 3658, 3658, 3658, 3659, 3659,
     3659, 3659, 3562, 3562, 3562, 3562, 4191, 1312, 1312, 1312,
     1312, 3583, 3583, 3583, 3583, 1504, 3687, 3688, 3688, 3687,
     4191, 4191, 4191, 1506, 1313, 3688, 3688, 3688, 3688, 4191,

     4191, 4191, 1315, 3691, 3691, 3691, 3691, 3589, 3589, 3589,
     3589, 3693, 3693, 3693, 3693, 3694, 3694, 3694, 3694, 4191,
     1333, 3594, 3594, 3594, 3594, 3697, 3697, 3697, 3697, 3597,
     3597, 3597, 3597, 3598, 3598, 3598, 3598, 3698, 3698, 3698,
     3699, 3600, 3600, 3600, 3600, 3633, 3633, 3633, 3633, 4191,
     4191, 3686, 3700, 3700, 3700, 3700, 3606, 3606, 3606, 3606,
     3704, 3704, 3704, 3704, 4191, 4191, 3601, 3610, 3610, 3610,
     3610, 3698, 3698, 3698, 3698, 2015, 2015, 2015, 2015, 3711,
     3711, 3711, 3711, 4191, 4191, 3705, 2016, 4191, 4191, 4191,
     2016, 4191, 2017, 4191, 4191, 4191, 2017, 3614, 3614, 3614,

     3614, 3712, 3712, 3712, 3712, 3706, 4191, 4191, 2016, 4191,
     4191, 4191, 2016, 3616, 3616, 3616, 3616, 4191, 2017, 3617,
     3617, 3617, 3617, 4191, 2016, 1387, 1387, 1387, 1387, 4191,
     2016, 4191, 3710, 4191, 3707, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 3714, 3714, 3714, 3714, 4191, 4191, 4191,
     1333, 4191, 1389, 3623, 3623, 3623, 3623, 4191, 4191, 4191,
     1333, 4191, 1389, 4191, 1333, 4191, 1389, 3624, 3624, 3624,
     3624, 4191, 1387, 1387, 1387, 1387, 4191, 4191, 1333, 4191,
     1389, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3633,
     3633, 3633, 3633, 4191, 4191, 3186, 3713, 1333, 4191, 1389,

     1387, 1387, 1387, 1387, 4191, 4191, 1333, 4191, 1389, 4191,
     1333, 4191, 1389, 1387, 1387, 1387, 1387, 4191, 3726, 3726,
     3726, 3726, 4191, 4191, 2729, 1333, 4191, 1389, 4191, 4191,
     4191, 3718, 3728, 3728, 3728, 3728, 4191, 4191, 1333, 4191,
     1389, 4191, 4191, 3727, 3719, 1389, 4191, 4191, 3625, 3648,
     3648, 3648, 3648, 4191, 3724, 4191, 4191, 1957, 4191, 3720,
     3634, 3635, 3635, 3635, 3635, 3634, 3634, 3634, 3721, 3634,
     3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634,
     3740, 3740, 3740, 3740, 4191, 4191, 3636, 3634, 3637, 3634,
     3634, 3634, 3634, 3722, 3722, 3722, 3722, 3722, 3722, 3722,

     3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,
     3722, 3722, 3722, 3634, 3634, 3634, 3634, 3722, 3722, 3722,
     3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,
     3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,
     3722, 3722, 3634, 3634, 3634, 3723, 1387, 1387, 1387, 1387,
     3642, 3642, 3642, 3642, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     4191, 1333, 4191, 1389, 4191, 3643, 4191, 1389, 4191, 1333,
     4191, 1389, 4191, 1333, 4191, 1389, 4191, 1333, 4191, 1389,
     4191, 1333, 4191, 1389, 4191, 3706, 3733, 3733, 3733, 3733,

     4191, 1387, 1387, 1387, 1387, 3731, 3739, 3740, 3740, 3739,
     3729, 4191, 1491, 3658, 3658, 3658, 3658, 3659, 3659, 3659,
     3659, 3725, 4191, 4191, 3707, 3730, 1333, 4191, 1389, 3757,
     3757, 3757, 3757, 4191, 1504, 3758, 3759, 3759, 3758, 4191,
     3732, 4191, 1506, 4191, 4191, 4191, 1313, 3759, 3759, 3759,
     3759, 4191, 4191, 4191, 1315, 3761, 3761, 3761, 3761, 4191,
     3735, 3691, 3691, 3691, 3691, 3762, 3762, 3762, 3762, 4191,
     4191, 4191, 1333, 3693, 3693, 3693, 3693, 3734, 3694, 3694,
     3694, 3694, 3697, 3697, 3697, 3697, 3698, 3698, 3698, 3698,
     3698, 3698, 3698, 3698, 3700, 3700, 3700, 3700, 3766, 3766,

     3766, 3766, 3704, 3704, 3704, 3704, 3728, 3728, 3728, 3728,
     4191, 2015, 2015, 2015, 2015, 3711, 3711, 3711, 3711, 4191,
     4191, 4191, 2016, 3767, 4191, 4191, 2016, 3705, 2017, 3712,
     3712, 3712, 3712, 1387, 1387, 1387, 1387, 4191, 4191, 4191,
     2016, 3714, 3714, 3714, 3714, 4191, 4191, 3706, 4191, 3719,
     1387, 1387, 1387, 1387, 3778, 3778, 3778, 3778, 1333, 4191,
     1389, 4191, 4191, 4191, 3720, 3778, 3778, 3778, 3778, 1387,
     1387, 1387, 1387, 4191, 4191, 1333, 3707, 1389, 1387, 1387,
     1387, 1387, 3780, 4191, 4191, 4191, 3772, 4191, 3726, 3726,
     3726, 3726, 3773, 3780, 1333, 4191, 1389, 3783, 3783, 3783,

     3783, 4191, 4191, 1333, 4191, 1389, 3728, 3728, 3728, 3728,
     4191, 2437, 3781, 3727, 4191, 1389, 1387, 1387, 1387, 1387,
     4191, 4191, 1957, 1387, 1387, 1387, 1387, 4191, 1387, 1387,
     1387, 1387, 3787, 3787, 3787, 3787, 3733, 3733, 3733, 3733,
     4191, 1333, 4191, 1389, 1387, 1387, 1387, 1387, 1333, 4191,
     1389, 4191, 3782, 1333, 4191, 1389, 4191, 3788, 4191, 1389,
     4191, 4191, 4191, 3784, 3789, 3789, 3789, 3789, 4191, 1333,
     4191, 1389, 3793, 3794, 3794, 3793, 3786, 4191, 1491, 3794,
     3794, 3794, 3794, 3757, 3757, 3757, 3757, 3808, 3809, 3809,
     3808, 4191, 4191, 3785, 3809, 3809, 3809, 3809, 3761, 3761,

     3761, 3761, 4191, 4191, 4191, 2437, 4191, 4191, 1315, 3762,
     3762, 3762, 3762, 3766, 3766, 3766, 3766, 4191, 4191, 1333,
     3783, 3783, 3783, 3783, 3817, 3817, 3817, 3817, 4191, 2015,
     2015, 2015, 2015, 4191, 1387, 1387, 1387, 1387, 3767, 4191,
     2016, 3820, 3820, 3820, 3820, 3790, 2017, 4191, 4191, 3818,
     3778, 3778, 3778, 3778, 3778, 3778, 3778, 3778, 4191, 1333,
     4191, 1389, 1387, 1387, 1387, 1387, 3824, 3824, 3824, 3824,
     3783, 3783, 3783, 3783, 1387, 1387, 1387, 1387, 3780, 4191,
     4191, 4191, 3780, 3789, 3789, 3789, 3789, 1333, 4191, 1389,
     4191, 3825, 4191, 1389, 3819, 3536, 4191, 4191, 4191, 1333,

     4191, 1389, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     3823, 3787, 3787, 3787, 3787, 3826, 3828, 3828, 3828, 3828,
     3829, 3829, 3829, 3829, 4191, 4191, 4191, 1333, 4191, 1389,
     4191, 1333, 4191, 1389, 4191, 4191, 3788, 4191, 1389, 4191,
     4191, 1957, 3832, 3833, 3833, 3832, 4191, 4191, 1491, 3833,
     3833, 3833, 3833, 3732, 3843, 3844, 3844, 3843, 3844, 3844,
     3844, 3844, 3847, 3847, 3847, 3847, 3817, 3817, 3817, 3817,
     3828, 3828, 3828, 3828, 4191, 4191, 4191, 3827, 2015, 2015,
     2015, 2015, 4191, 1333, 4191, 4191, 4191, 3848, 4191, 2016,
     4191, 3818, 4191, 4191, 4191, 2017, 3820, 3820, 3820, 3820,

     4191, 3830, 1387, 1387, 1387, 1387, 3824, 3824, 3824, 3824,
     3854, 3854, 3854, 3854, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 3828, 3828, 3828, 3828, 4191, 1333, 4191, 1389,
     4191, 3825, 4191, 1389, 4191, 1957, 4191, 4191, 4191, 1333,
     4191, 1389, 4191, 1333, 4191, 1389, 4191, 4191, 3851, 3782,
     3829, 3829, 3829, 3829, 4191, 4191, 4191, 3855, 3858, 3859,
     3859, 3858, 4191, 4191, 1491, 3859, 3859, 3859, 3859, 3867,
     3868, 3868, 3867, 3868, 3868, 3868, 3868, 3847, 3847, 3847,
     3847, 3854, 3854, 3854, 3854, 4191, 2015, 2015, 2015, 2015,
     4191, 4191, 3856, 3854, 3854, 3854, 3854, 2016, 1333, 4191,

     4191, 4191, 3848, 2017, 1387, 1387, 1387, 1387, 3876, 3876,
     3876, 3876, 3879, 3880, 3880, 3879, 4191, 4191, 1491, 3880,
     3880, 3880, 3880, 3888, 3889, 3889, 3888, 4191, 4191, 1333,
     4191, 1389, 4191, 3877, 4191, 1389, 3889, 3889, 3889, 3889,
     3892, 3892, 3892, 3892, 4191, 3894, 3894, 3894, 3894, 4191,
     4191, 4191, 3875, 4191, 4191, 3872, 2016, 3895, 3895, 3895,
     3895, 1333, 2017, 4191, 4191, 3893, 1387, 1387, 1387, 1387,
     3876, 3876, 3876, 3876, 3898, 3898, 3898, 3898, 3900, 3901,
     3901, 3900, 4191, 4191, 1491, 3901, 3901, 3901, 3901, 4191,
     4191, 1333, 4191, 1389, 4191, 3877, 4191, 1389, 4191, 1957,

     3909, 3910, 3910, 3909, 3910, 3910, 3910, 3910, 3911, 3911,
     3911, 3911, 4191, 3856, 3892, 3892, 3892, 3892, 3898, 3898,
     3898, 3898, 3894, 3894, 3894, 3894, 4191, 4191, 4191, 1333,
     4191, 4191, 4191, 2016, 3895, 3895, 3895, 3895, 3896, 3893,
     3912, 3912, 3912, 3912, 3898, 3898, 3898, 3898, 3914, 3914,
     3914, 3914, 3916, 3917, 3917, 3916, 4191, 4191, 1491, 3917,
     3917, 3917, 3917, 3925, 3926, 3926, 3925, 3926, 3926, 3926,
     3926, 3911, 3911, 3911, 3911, 4191, 3915, 3912, 3912, 3912,
     3912, 3914, 3914, 3914, 3914, 3927, 3927, 3927, 3927, 4191,
     3928, 4191, 1333, 4191, 4191, 3928, 3930, 3931, 3931, 3930,

     4191, 4191, 1491, 3931, 3931, 3931, 3931, 4191, 4191, 3915,
     3936, 3937, 3937, 3936, 3937, 3937, 3937, 3937, 4191, 4191,
     4191, 3913, 3927, 3927, 3927, 3927, 4191, 3928, 3939, 3940,
     3940, 3939, 3928, 4191, 1491, 3940, 3940, 3940, 3940, 1333,
     3941, 3942, 3942, 3941, 3942, 3942, 3942, 3942, 3944, 3945,
     3945, 3944, 4191, 4191, 1491, 4191, 3929, 3945, 3945, 3945,
     3945, 3946, 3947, 3947, 3946, 3947, 3947, 3947, 3947, 1333,
     3948, 3948, 3948, 3948, 4191, 3949, 3951, 3952, 3952, 3951,
     3949, 4191, 1491, 3952, 3952, 3952, 3952, 4191, 4191, 4191,
     1333, 4191, 4191, 3929, 3953, 3954, 3954, 3953, 4191, 3950,

     3954, 3954, 3954, 3954, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3955, 3956, 3956, 3955, 4191, 4191, 1491, 3956,
     3956, 3956, 3956, 4191, 4191, 1333, 3957, 3958, 3958, 3957,
     4191, 4191, 4191, 3950, 4191, 4191, 4191, 3950, 3958, 3958,
     3958, 3958, 3959, 3960, 3960, 3959, 4191, 4191, 1491, 3960,
     3960, 3960, 3960, 3961, 3962, 3962, 3961, 3962, 3962, 3962,
     3962, 4191, 4191, 1333, 3963, 3964, 3964, 3963, 4191, 4191,
     1491, 3964, 3964, 3964, 3964, 3965, 3966, 3966, 3965, 4191,
     4191, 4191, 1333, 3966, 3966, 3966, 3966, 3967, 3968, 3968,
     3967, 4191, 4191, 1491, 3968, 3968, 3968, 3968, 3969, 3970,

     3970, 3969, 3970, 3970, 3970, 3970, 4191, 4191, 1333, 3971,
     3972, 3972, 3971, 4191, 4191, 1491, 3972, 3972, 3972, 3972,
     3973, 3974, 3974, 3973, 4191, 4191, 4191, 1333, 3974, 3974,
     3974, 3974, 3975, 3976, 3976, 3975, 4191, 4191, 1491, 3976,
     3976, 3976, 3976, 3977, 3978, 3978, 3977, 3978, 3978, 3978,
     3978, 4191, 4191, 1333, 3979, 3980, 3980, 3979, 4191, 4191,
     1491, 3980, 3980, 3980, 3980, 3981, 3982, 3982, 3981, 4191,
     4191, 4191, 1333, 3982, 3982, 3982, 3982, 3983, 3984, 3984,
     3983, 4191, 4191, 1491, 3984, 3984, 3984, 3984, 3985, 3986,
     3986, 3985, 3986, 3986, 3986, 3986, 4191, 4191, 1333, 3987,

     3988, 3988, 3987, 4191, 4191, 1491, 3988, 3988, 3988, 3988,
     3989, 3990, 3990, 3989, 4191, 4191, 4191, 1333, 3990, 3990,
     3990, 3990, 3991, 3992, 3992, 3991, 4191, 4191, 1491, 3992,
     3992, 3992, 3992, 3993, 3994, 3994, 3993, 3994, 3994, 3994,
     3994, 4191, 4191, 1333, 3995, 3996, 3996, 3995, 4191, 4191,
     1491, 3996, 3996, 3996, 3996, 3997, 3998, 3998, 3997, 4191,
     4191, 4191, 1333, 3998, 3998, 3998, 3998, 3999, 4000, 4000,
     3999, 4191, 4191, 1491, 4000, 4000, 4000, 4000, 4001, 4002,
     4002, 4001, 4002, 4002, 4002, 4002, 4191, 4191, 1333, 4003,
     4004, 4004, 4003, 4191, 4191, 1491, 4004, 4004, 4004, 4004,

     4005, 4006, 4006, 4005, 4191, 4191, 4191, 1333, 4006, 4006,
     4006, 4006, 4007, 4008, 4008, 4007, 4191, 4191, 1491, 4008,
     4008, 4008, 4008, 4009, 4010, 4010, 4009, 4010, 4010, 4010,
     4010, 4191, 4191, 1333, 4011, 4012, 4012, 4011, 4191, 4191,
     1491, 4012, 4012, 4012, 4012, 4013, 4014, 4014, 4013, 4191,
     4191, 4191, 1333, 4014, 4014, 4014, 4014, 4015, 4016, 4016,
     4015, 4191, 4191, 1491, 4016, 4016, 4016, 4016, 4017, 4018,
     4018, 4017, 4018, 4018, 4018, 4018, 4191, 4191, 1333, 4019,
     4020, 4020, 4019, 4191, 4191, 1491, 4020, 4020, 4020, 4020,
     4021, 4022, 4022, 4021, 4191, 4191, 4191, 1333, 4022, 4022,

     4022, 4022, 4023, 4024, 4024, 4023, 4191, 4191, 1491, 4024,
     4024, 4024, 4024, 4025, 4026, 4026, 4025, 4026, 4026, 4026,
     4026, 4191, 4191, 1333, 4027, 4028, 4028, 4027, 4191, 4191,
     1491, 4028, 4028, 4028, 4028, 4029, 4030, 4030, 4029, 4191,
     4191, 4191, 1333, 4030, 4030, 4030, 4030, 4031, 4032, 4032,
     4031, 4191, 4191, 1491, 4032, 4032, 4032, 4032, 4033, 4034,
     4034, 4033, 4034, 4034, 4034, 4034, 4191, 4191, 1333, 4035,
     4036, 4036, 4035, 4191, 4191, 1491, 4036, 4036, 4036, 4036,
     4037, 4038, 4038, 4037, 4191, 4191, 4191, 1333, 4038, 4038,
     4038, 4038, 4039, 4040, 4040, 4039, 4191, 4191, 1491, 4040,

     4040, 4040, 4040, 4041, 4042, 4042, 4041, 4042, 4042, 4042,
     4042, 4191, 4191, 1333, 4043, 4044, 4044, 4043, 4191, 4191,
     1491, 4044, 4044, 4044, 4044, 4045, 4046, 4046, 4045, 4191,
     4191, 4191, 1333, 4046, 4046, 4046, 4046, 4047, 4048, 4048,
     4047, 4191, 4191, 1491, 4048, 4048, 4048, 4048, 4049, 4050,
     4050, 4049, 4050, 4050, 4050, 4050, 4191, 4191, 1333, 4051,
     4052, 4052, 4051, 4191, 4191, 1491, 4052, 4052, 4052, 4052,
     4053, 4054, 4054, 4053, 4191, 4191, 4191, 1333, 4054, 4054,
     4054, 4054, 4055, 4056, 4056, 4055, 4191, 4191, 1491, 4056,
     4056, 4056, 4056, 4057, 4058, 4058, 4057, 4058, 4058, 4058,

     4058, 4191, 4191, 1333, 4059, 4060, 4060, 4059, 4191, 4191,
     1491, 4060, 4060, 4060, 4060, 4061, 4062, 4062, 4061, 4191,
     4191, 4191, 1333, 4062, 4062, 4062, 4062, 4063, 4064, 4064,
     4063, 4191, 4191, 1491, 4064, 4064, 4064, 4064, 4065, 4066,
     4066, 4065, 4066, 4066, 4066, 4066, 4191, 4191, 1333, 4067,
     4068, 4068, 4067, 4191, 4191, 1491, 4068, 4068, 4068, 4068,
     4069, 4070, 4070, 4069, 4191, 4191, 4191, 1333, 4070, 4070,
     4070, 4070, 4071, 4072, 4072, 4071, 4191, 4191, 1491, 4072,
     4072, 4072, 4072, 4073, 4074, 4074, 4073, 4074, 4074, 4074,
     4074, 4191, 4191, 1333, 4075, 4076, 4076, 4075, 4191, 4191,

     1491, 4076, 4076, 4076, 4076, 4077, 4078, 4078, 4077, 4191,
     4191, 4191, 1333, 4078, 4078, 4078, 4078, 4079, 4080, 4080,
     4079, 4191, 4191, 1491, 4080, 4080, 4080, 4080, 4081, 4082,
     4082, 4081, 4082, 4082, 4082, 4082, 4191, 4191, 1333, 4083,
     4084, 4084, 4083, 4191, 4191, 1491, 4084, 4084, 4084, 4084,
     4085, 4086, 4086, 4085, 4191, 4191, 4191, 1333, 4086, 4086,
     4086, 4086, 4087, 4088, 4088, 4087, 4191, 4191, 1491, 4088,
     4088, 4088, 4088, 4089, 4090, 4090, 4089, 4090, 4090, 4090,
     4090, 4191, 4191, 1333, 4091, 4092, 4092, 4091, 4191, 4191,
     1491, 4092, 4092, 4092, 4092, 4093, 4094, 4094, 4093, 4191,

     4191, 4191, 1333, 4094, 4094, 4094, 4094, 4095, 4096, 4096,
     4095, 4191, 4191, 1491, 4096, 4096, 4096, 4096, 4097, 4098,
     4098, 4097, 4098, 4098, 4098, 4098, 4191, 4191, 1333, 4099,
     4100, 4100, 4099, 4191, 4191, 1491, 4100, 4100, 4100, 4100,
     4101, 4102, 4102, 4101, 4191, 4191, 4191, 1333, 4102, 4102,
     4102, 4102, 4103, 4104, 4104, 4103, 4191, 4191, 1491, 4104,
     4104, 4104, 4104, 4105, 4106, 4106, 4105, 4106, 4106, 4106,
     4106, 4191, 4191, 1333, 4107, 4108, 4108, 4107, 4191, 4191,
     1491, 4108, 4108, 4108, 4108, 4109, 4110, 4110, 4109, 4191,
     4191, 4191, 1333, 4110, 4110, 4110, 4110, 4111, 4112, 4112,

     4111, 4191, 4191, 1491, 4112, 4112, 4112, 4112, 4113, 4114,
     4114, 4113, 4114, 4114, 4114, 4114, 4191, 4191, 1333, 4115,
     4116, 4116, 4115, 4191, 4191, 1491, 4116, 4116, 4116, 4116,
     4117, 4118, 4118, 4117, 4191, 4191, 4191, 1333, 4118, 4118,
     4118, 4118, 4119, 4120, 4120, 4119, 4191, 4191, 1491, 4120,
     4120, 4120, 4120, 4121, 4122, 4122, 4121, 4122, 4122, 4122,
     4122, 4191, 4191, 1333, 4123, 4124, 4124, 4123, 4191, 4191,
     1491, 4124, 4124, 4124, 4124, 4125, 4126, 4126, 4125, 4191,
     4191, 4191, 1333, 4126, 4126, 4126, 4126, 4127, 4128, 4128,
     4127, 4191, 4191, 1491, 4128, 4128, 4128, 4128, 4129, 4130,

     4130, 4129, 4130, 4130, 4130, 4130, 4191, 4191, 1333, 4131,
     4132, 4132, 4131, 4191, 4191, 1491, 4132, 4132, 4132, 4132,
     4133, 4134, 4134, 4133, 4191, 4191, 4191, 1333, 4134, 4134,
     4134, 4134, 4135, 4136, 4136, 4135, 4191, 4191, 1491, 4136,
     4136, 4136, 4136, 4137, 4138, 4138, 4137, 4138, 4138, 4138,
     4138, 4191, 4191, 1333, 4139, 4140, 4140, 4139, 4191, 4191,
     1491, 4140, 4140, 4140, 4140, 4141, 4142, 4142, 4141, 4191,
     4191, 4191, 1333, 4142, 4142, 4142, 4142, 4143, 4144, 4144,
     4143, 4191, 4191, 1491, 4144, 4144, 4144, 4144, 4145, 4146,
     4146, 4145, 4146, 4146, 4146, 4146, 4191, 4191, 1333, 4147,

     4148, 4148, 4147, 4191, 4191, 1491, 4148, 4148, 4148, 4148,
     4149, 4150, 4150, 4149, 4191, 4191, 4191, 1333, 4150, 4150,
     4150, 4150, 4151, 4152, 4152, 4151, 4191, 4191, 1491, 4152,
     4152, 4152, 4152, 4153, 4154, 4154, 4153, 4154, 4154, 4154,
     4154, 4191, 4191, 1333, 4155, 4156, 4156, 4155, 4191, 4191,
     1491, 4156, 4156, 4156, 4156, 4157, 4158, 4158, 4157, 4191,
     4191, 4191, 1333, 4158, 4158, 4158, 4158, 4159, 4160, 4160,
     4159, 4191, 4191, 1491, 4160, 4160, 4160, 4160, 4161, 4162,
     4162, 4161, 4162, 4162, 4162, 4162, 4191, 4191, 1333, 4163,
     4164, 4164, 4163, 4191, 4191, 1491, 4164, 4164, 4164, 4164,

     4165, 4166, 4166, 4165, 4191, 4191, 4191, 1333, 4166, 4166,
     4166, 4166, 4167, 4168, 4168, 4167, 4191, 4191, 1491, 4168,
     4168, 4168, 4168, 4169, 4170, 4170, 4169, 4170, 4170, 4170,
     4170, 4191, 4191, 1333, 4171, 4172, 4172, 4171, 4191, 4191,
     1491, 4172, 4172, 4172, 4172, 4173, 4174, 4174, 4173, 4191,
     4191, 4191, 1333, 4174, 4174, 4174, 4174, 4175, 4176, 4176,
     4175, 4191, 4191, 1491, 4176, 4176, 4176, 4176, 4177, 4178,
     4178, 4177, 4178, 4178, 4178, 4178, 4191, 4191, 1333, 4179,
     4180, 4180, 4179, 4191, 4191, 1491, 4180, 4180, 4180, 4180,
     4181, 4182, 4182, 4181, 4191, 4191, 4191, 1333, 4182, 4182,

     4182, 4182, 4183, 4184, 4184, 4183, 4191, 4191, 1491, 4184,
     4184, 4184, 4184, 4185, 4186, 4186, 4185, 4186, 4186, 4186,
     4186, 4191, 4191, 1333, 4187, 4188, 4188, 4187, 4191, 4191,
     1491, 4188, 4188, 4188, 4188, 4189, 1359, 1359, 4189, 4191,
     4191, 4191, 1333, 1359, 1359, 1359, 1359, 4190, 4191, 4191,
     4190, 4191, 4191, 1491, 4189, 1359, 1359, 4189, 4190, 4191,
     4191, 4190, 4191, 4191, 1491, 4191, 4191, 4191, 1333,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  384,  384,  384,

      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,

      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,

      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,

      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  626,  626,  626,  626,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

      652,  652,  652,  652,  652,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  715,  715,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,

      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,

      954,  954,  954,  954,  954,  954,  954,  954,  954,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,

      978,  978,  978,  978,  978,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,

      490, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552, 1036, 1036, 1036,

     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1065, 1065, 1065, 1065, 1065, 1065, 1065,

     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,

     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,

     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,

     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1214, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1214, 4191, 4191, 4191, 4191, 4191, 1214, 4191, 4191, 4191,
     4191, 4191, 4191, 1214, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1214, 1228, 1228, 1228, 4191, 4191, 4191, 1228, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1228, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 1228, 1232, 1232, 1232, 1232, 4191, 4191, 1232,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1232,
     4191, 4191, 4191, 4191, 4191, 1232, 4191, 4191, 4191, 4191,
     4191, 4191, 1232, 1232, 1235, 1235, 1235, 4191, 4191, 4191,
     1235, 4191, 4191, 4191, 4191, 4191, 4191, 1235, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1235, 4191, 4191, 4191,
     4191, 4191, 4191, 1235, 1235, 1241, 1241, 1241, 4191, 4191,
     4191, 4191, 4191, 4191, 1241, 4191, 4191, 1241, 1241, 4191,
     1241, 1241, 1241, 1241, 4191, 4191, 4191, 1241, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1241, 1247, 1247, 1247, 4191,

     4191, 4191, 1247, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1247, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1247, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     4191, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 4191, 1251, 1251, 1251, 1257,
     1257, 1257, 4191, 4191, 4191, 1257, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1257, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1257,
     1260, 1260, 1260, 1260, 4191, 4191, 1260, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 1260, 4191, 4191, 4191,
     4191, 4191, 1260, 4191, 4191, 4191, 4191, 4191, 4191, 1260,
     1260, 1268, 1268, 1268, 4191, 4191, 4191, 4191, 4191, 4191,
     1268, 4191, 4191, 4191, 4191, 4191, 1268, 1268, 4191, 4191,
     4191, 4191, 4191, 1268, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1268, 1278, 4191, 4191, 4191, 1278, 4191, 1278, 4191,
     4191, 1278, 4191, 4191, 4191, 1278, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1278, 1281, 1281, 4191, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,

     1281, 1281, 1281, 1281, 1281, 1281, 1300, 1300, 1300, 4191,
     4191, 4191, 1300, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1300, 4191,
     4191, 4191, 4191, 1300, 4191, 4191, 1300, 1314, 1314, 1314,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1314, 4191, 1314, 1314, 4191, 4191, 4191, 4191, 4191, 1314,
     4191, 1314, 4191, 4191, 4191, 4191, 4191, 1314, 1324, 1324,
     4191, 1324, 1324, 1324, 1324, 1324, 1324, 4191, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,

     1355, 1355, 1355, 4191, 4191, 4191, 1355, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1355, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1355, 1362, 1362, 1362, 1362, 4191, 4191, 1362, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1362, 4191, 4191,
     4191, 4191, 4191, 1362, 4191, 4191, 4191, 4191, 4191, 4191,
     1362, 1362, 1370, 1370, 1370, 4191, 4191, 4191, 1370, 1370,
     4191, 4191, 4191, 1370, 4191, 4191, 4191, 4191, 1370, 4191,
     4191, 4191, 4191, 4191, 1370, 4191, 4191, 4191, 1370, 4191,
     4191, 4191, 1370, 1388, 1388, 1388, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1388, 1388,
     4191, 1388, 4191, 4191, 4191, 1388, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1388, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1424, 1424, 4191, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 4191, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1433, 1433,
     1433, 4191, 4191, 4191, 1433, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1433, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1433, 1436,
     1436, 1436, 1436, 4191, 4191, 1436, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1436, 4191, 4191, 4191, 4191,
     4191, 1436, 4191, 4191, 4191, 4191, 4191, 4191, 1436, 1436,
     1439, 1439, 1439, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1439, 1439, 4191, 1439, 4191,
     4191, 4191, 1439, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1439, 1488, 1488, 4191, 4191, 1488, 4191, 4191, 1488, 1488,
     4191, 1488, 1488, 1488, 1488, 1488, 4191, 1488, 1488, 1488,

     4191, 1488, 1488, 4191, 1488, 1488, 1488, 1488, 1488, 4191,
     4191, 1488, 1488, 1492, 1492, 4191, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1494, 1494, 4191, 1494, 1494,
     1494, 1494, 1494, 1494, 4191, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1505, 1505, 1505,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1505, 4191, 1505, 1505, 4191, 4191, 4191, 4191, 4191, 1505,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1505, 1512, 1512,
     1512, 4191, 4191, 4191, 1512, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1512, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1512, 1515,
     1515, 1515, 1515, 4191, 4191, 1515, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1515, 4191, 4191, 4191, 4191,
     4191, 1515, 4191, 4191, 4191, 4191, 4191, 4191, 1515, 1515,
     1517, 1517, 1517, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1517, 1517, 4191, 4191, 4191,
     4191, 4191, 1517, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     1517, 1518, 1518, 4191, 1518, 1518, 4191, 4191, 1518, 1518,
     4191, 1518, 1518, 1518, 1518, 1518, 4191, 1518, 1518, 1518,
     4191, 1518, 1518, 4191, 1518, 1518, 4191, 1518, 1518, 4191,
     4191, 1518, 1518, 1521, 1521, 4191, 1521, 1521, 1521, 1521,
     1521, 1521, 4191, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1521, 1521, 1540, 1540, 4191, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1547, 1547, 4191,

     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 4191,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1553,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
     1553, 1560, 1560, 4191, 1560, 1560, 4191, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 4191, 1560, 4191, 1560, 1560,
     1560, 1560, 1560, 1563, 1563, 4191, 1563, 1563, 1563, 1563,

     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1575, 4191, 4191, 4191, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 4191, 1575, 4191,
     4191, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1585, 4191, 1585,
     4191, 4191, 4191, 4191, 4191, 4191, 1585, 4191, 1585, 4191,
     4191, 4191, 4191, 4191, 1585, 1589, 1589, 1589, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1589, 4191,
     1589, 4191, 4191, 4191, 4191, 4191, 4191, 1589, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 1589, 1592, 1592, 1592, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1592, 4191, 4191, 4191, 4191, 4191, 4191, 1592, 4191,
     1592, 4191, 4191, 4191, 4191, 4191, 1592, 1603, 1603, 4191,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1607,
     4191, 4191, 4191, 1607, 4191, 4191, 4191, 4191, 4191, 4191,
     1607, 4191, 4191, 4191, 4191, 4191, 4191, 1607, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1607, 1612, 1612, 4191, 1612,

     1612, 4191, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 4191,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1627, 1627, 1627, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1627, 1627, 4191, 4191, 4191,
     4191, 4191, 1627, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1627, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 4191, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1644, 1644, 4191, 1644, 4191, 4191, 4191,
     1644, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1644, 1659,
     1659, 4191, 1659, 1659, 1659, 1659, 1659, 1659, 4191, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1673, 1673, 1673, 4191, 4191, 4191, 1673, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1673, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 1673, 1676, 1676, 1676, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1676, 4191, 4191, 4191, 1676, 4191, 4191,
     4191, 4191, 4191, 4191, 1676, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1676, 1682, 1682, 1682, 4191, 4191, 4191, 1682,
     1682, 4191, 4191, 4191, 1682, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1682, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1682, 1684, 1684, 1684, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1684,
     4191, 4191, 4191, 4191, 4191, 4191, 1684, 1684, 4191, 4191,
     4191, 4191, 4191, 4191, 1684, 1694, 1694, 1694, 4191, 4191,

     4191, 1694, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1694, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1694, 1697, 1697, 1697, 1697,
     4191, 4191, 1697, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1697, 4191, 4191, 4191, 4191, 4191, 1697, 4191,
     4191, 4191, 4191, 4191, 4191, 1697, 1697, 1699, 1699, 1699,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1699, 1699, 4191, 4191, 4191, 4191, 4191, 1699,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1699, 1706, 1706,
     4191, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706,

     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706,
     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706,
     1708, 4191, 4191, 4191, 1708, 4191, 4191, 1708, 1708, 4191,
     4191, 4191, 1708, 1708, 1708, 4191, 1708, 1708, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1708, 1708, 1710, 1710, 4191, 1710, 1710, 1710, 1710, 1710,
     1710, 4191, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1730, 1730, 4191, 1730, 1730, 1730,
     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,

     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1730, 1730, 1730, 1734, 1734, 4191, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1735, 1735,
     4191, 1735, 1735, 4191, 1735, 1735, 1735, 4191, 4191, 4191,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1736, 1736, 4191, 1736, 1736, 1736, 1736, 1736, 1736, 4191,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,

     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1740, 1740, 4191, 1740, 1740, 4191, 1740, 1740,
     1740, 4191, 1740, 1740, 1740, 1740, 1740, 4191, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     4191, 4191, 1740, 1740, 1741, 1741, 4191, 1741, 1741, 1741,
     1741, 1741, 1741, 4191, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1743, 1743, 4191, 1743,
     1743, 4191, 1743, 1743, 1743, 4191, 4191, 4191, 1743, 1743,
     1743, 4191, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743,

     1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1744, 1744,
     4191, 1744, 1744, 1744, 1744, 1744, 1744, 4191, 1744, 1744,
     1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744,
     1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744,
     1746, 1746, 4191, 1746, 1746, 4191, 1746, 1746, 1746, 4191,
     1746, 1746, 1746, 1746, 1746, 4191, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 4191, 4191,
     1746, 1746, 1747, 1747, 4191, 1747, 1747, 1747, 1747, 1747,
     1747, 4191, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,

     1747, 1747, 1747, 1747, 1757, 1757, 4191, 1757, 1757, 1757,
     1757, 1757, 1757, 4191, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1767, 1767, 4191, 1767,
     1767, 4191, 1767, 1767, 1767, 4191, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 4191, 1767, 1767, 1767, 1767, 1767, 1767, 1770, 1770,
     4191, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,

     1771, 1771, 4191, 1771, 1771, 4191, 1771, 1771, 1771, 4191,
     4191, 4191, 1771, 1771, 1771, 4191, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1774, 1774, 4191, 1774, 1774, 1774, 1774, 1774,
     1774, 1774, 1774, 1774, 4191, 1774, 1774, 1774, 1774, 1774,
     1774, 1774, 1774, 1774, 4191, 1774, 1774, 4191, 1774, 1774,
     1774, 1774, 1774, 1774, 1782, 1782, 4191, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 4191, 1782, 1782, 4191,
     1782, 1782, 1782, 1782, 1782, 1782, 1807, 1807, 1807, 1807,

     1807, 1807, 1807, 1807, 1807, 1807, 1807, 4191, 1807, 1807,
     1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807,
     1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1808, 4191,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 4191, 4191,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
     1808, 1808, 1808, 4191, 1808, 1808, 1808, 1808, 1808, 1808,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812,
     1812, 4191, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812,
     1812, 1812, 1813, 4191, 1813, 1813, 1813, 1813, 1813, 1813,

     1813, 1813, 4191, 4191, 1813, 1813, 1813, 1813, 1813, 1813,
     1813, 1813, 1813, 1813, 1813, 1813, 1813, 4191, 1813, 1813,
     1813, 1813, 1813, 1813, 1820, 1820, 1820, 4191, 4191, 4191,
     1820, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1820, 1820, 4191, 4191,
     4191, 4191, 4191, 4191, 1820, 1826, 1826, 1826, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1826, 4191, 1826, 4191, 4191,
     1826, 4191, 4191, 4191, 4191, 4191, 4191, 1826, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1826, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,

     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1831, 1831,
     1831, 4191, 4191, 4191, 1831, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1831, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1831, 1835,
     1835, 1835, 4191, 4191, 4191, 4191, 4191, 4191, 1835, 4191,
     4191, 4191, 4191, 4191, 1835, 4191, 4191, 4191, 4191, 4191,
     4191, 1835, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1835,
     1839, 4191, 4191, 4191, 4191, 4191, 1839, 1839, 4191, 4191,
     4191, 1839, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 1839, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1839, 1845, 1845, 1845, 4191, 4191, 4191, 1845, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1845, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1845, 1848, 1848, 1848, 1848, 4191, 4191, 1848, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1848, 4191,
     4191, 4191, 4191, 4191, 1848, 4191, 4191, 4191, 4191, 4191,
     4191, 1848, 1848, 1850, 1850, 1850, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1850, 1850,
     4191, 4191, 4191, 4191, 4191, 1850, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 1850, 1860, 1860, 1860, 1860, 1860, 1860,
     1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,
     1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,
     1860, 1860, 1860, 1860, 1860, 1860, 1866, 1866, 4191, 1866,
     1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 4191, 1866,
     1866, 4191, 1866, 1866, 1866, 1866, 1866, 1866, 4191, 1866,
     1866, 4191, 1866, 1866, 1866, 1866, 1866, 1866, 1887, 1887,
     1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887,
     1887, 1887, 1887, 1887, 4191, 1887, 1887, 1887, 1887, 1887,
     1887, 4191, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887,

     1890, 1890, 4191, 1890, 1890, 1890, 1890, 4191, 1890, 1890,
     1890, 1890, 4191, 1890, 1890, 4191, 1890, 1890, 1890, 4191,
     1890, 1890, 4191, 1890, 1890, 4191, 4191, 1890, 1890, 1890,
     1890, 1890, 1214, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1214, 4191, 4191, 4191, 4191, 4191, 1214, 4191, 4191,
     4191, 4191, 4191, 4191, 1214, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1214, 1235, 1235, 1235, 4191, 4191, 4191, 1235,
     4191, 4191, 4191, 4191, 4191, 4191, 1235, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1235, 4191, 4191, 4191, 4191,
     4191, 4191, 1235, 1235, 1228, 1228, 1228, 4191, 4191, 4191,

     1228, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1228, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1228, 1904, 1904, 1904, 4191, 4191,
     4191, 4191, 4191, 4191, 1904, 4191, 4191, 1904, 4191, 4191,
     1904, 4191, 1904, 1904, 4191, 4191, 4191, 1904, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1904, 1241, 1241, 1241, 4191,
     4191, 4191, 4191, 4191, 4191, 1241, 4191, 4191, 1241, 1241,
     4191, 1241, 1241, 1241, 1241, 4191, 4191, 4191, 1241, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1241, 1907, 1907, 1907,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     1907, 4191, 1907, 4191, 4191, 4191, 4191, 4191, 4191, 1907,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1907, 1910, 1910,
     1910, 4191, 4191, 4191, 1910, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1910, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1910, 1247,
     1247, 1247, 4191, 4191, 4191, 1247, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1247, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1247,
     1912, 1912, 1912, 4191, 4191, 4191, 4191, 4191, 4191, 1912,
     4191, 4191, 1912, 4191, 4191, 1912, 4191, 1912, 1912, 4191,

     4191, 4191, 1912, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1912, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 4191, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 4191,
     1251, 1251, 1251, 1257, 1257, 1257, 4191, 4191, 4191, 1257,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1257, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1257, 1914, 1914, 1914, 4191, 4191, 4191,
     4191, 4191, 4191, 1914, 4191, 4191, 4191, 4191, 4191, 1914,
     4191, 4191, 4191, 4191, 4191, 4191, 1914, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 1914, 1268, 1268, 1268, 4191, 4191,
     4191, 4191, 4191, 4191, 1268, 4191, 4191, 4191, 4191, 4191,
     1268, 1268, 4191, 4191, 4191, 4191, 4191, 1268, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1268, 1278, 4191, 4191, 4191,
     1278, 4191, 1278, 4191, 4191, 1278, 4191, 4191, 4191, 1278,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1278, 1281, 1281,
     4191, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1300, 1300, 1300, 4191, 4191, 4191, 1300, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1300, 4191, 4191, 4191, 4191, 1300, 4191, 4191,
     1300, 1933, 1933, 1933, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1933, 4191, 1933, 1933, 4191, 4191,
     4191, 4191, 4191, 1933, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1933, 1314, 1314, 1314, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1314, 4191, 1314, 1314, 4191,
     4191, 4191, 4191, 4191, 1314, 4191, 1314, 4191, 4191, 4191,
     4191, 4191, 1314, 1937, 1937, 1937, 4191, 4191, 4191, 1937,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 1937, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1937, 1947, 1947, 4191, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 4191,
     1947, 1947, 1947, 1947, 1947, 1947, 1949, 1949, 4191, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,

     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1355, 1355, 1355, 4191, 4191, 4191, 1355, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1355, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1355, 1989, 1989, 1989, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1989, 4191, 4191, 1989,
     4191, 4191, 4191, 1989, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1989, 1388, 1388, 1388, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1388, 1388, 4191,
     1388, 4191, 4191, 4191, 1388, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 1388, 1993, 1993, 4191, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1370, 1370, 1370, 4191, 4191,
     4191, 1370, 1370, 4191, 4191, 4191, 1370, 4191, 4191, 4191,
     4191, 1370, 4191, 4191, 4191, 4191, 4191, 1370, 4191, 4191,
     4191, 1370, 4191, 4191, 4191, 1370, 2000, 2000, 2000, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2000, 2000, 4191, 4191,
     4191, 2000, 2000, 4191, 2000, 4191, 4191, 4191, 2000, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2000, 2018, 2018, 2018,

     4191, 4191, 4191, 4191, 4191, 4191, 2018, 4191, 4191, 4191,
     2018, 4191, 2018, 4191, 4191, 4191, 4191, 4191, 4191, 2018,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 2018, 1424, 1424,
     4191, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 4191, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1433, 1433, 1433, 4191, 4191, 4191, 1433, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1433, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1433, 2075, 2075, 2075, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 2075, 4191, 4191, 2075,
     4191, 4191, 4191, 2075, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 2075, 1439, 1439, 1439, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1439, 1439, 4191,
     1439, 4191, 4191, 4191, 1439, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1439, 1488, 1488, 4191, 4191, 1488, 4191, 4191,
     1488, 1488, 4191, 1488, 1488, 1488, 1488, 1488, 4191, 1488,
     1488, 1488, 4191, 1488, 1488, 4191, 1488, 1488, 1488, 1488,
     1488, 4191, 4191, 1488, 1488, 1492, 1492, 4191, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,

     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 2117, 2117, 4191,
     2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
     2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117,
     2117, 2117, 4191, 2117, 2117, 2117, 2117, 2117, 2117, 2119,
     2119, 4191, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2124, 2124, 4191, 2124, 2124, 2124, 2124, 2124, 2124,
     2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,

     2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
     2124, 2124, 2124, 1505, 1505, 1505, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1505, 4191, 1505, 1505,
     4191, 4191, 4191, 4191, 4191, 1505, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1505, 2130, 2130, 2130, 4191, 4191, 4191,
     2130, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2130, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2130, 1512, 1512, 1512, 4191, 4191,
     4191, 1512, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1512, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 1512, 1517, 1517, 1517, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1517, 1517, 4191, 4191, 4191, 4191, 4191, 1517, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1517, 1518, 1518, 4191,
     1518, 1518, 4191, 4191, 1518, 1518, 4191, 1518, 1518, 1518,
     1518, 1518, 4191, 1518, 1518, 1518, 4191, 1518, 1518, 4191,
     1518, 1518, 4191, 1518, 1518, 4191, 4191, 1518, 1518, 2134,
     2134, 4191, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134,
     2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134,
     2134, 2134, 2134, 2134, 4191, 2134, 2134, 2134, 2134, 2134,

     2134, 2136, 2136, 4191, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,
     2136, 2136, 2136, 1547, 1547, 4191, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 4191, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1553, 1553, 1553, 1553, 1553,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1560, 1560, 4191,

     1560, 1560, 4191, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 4191, 1560, 4191, 1560, 1560, 1560, 1560, 1560, 1563,
     1563, 4191, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1575, 4191, 4191, 4191, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 4191, 1575, 4191, 4191, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1585, 4191, 1585, 4191, 4191, 4191, 4191,

     4191, 4191, 1585, 4191, 1585, 4191, 4191, 4191, 4191, 4191,
     1585, 1589, 1589, 1589, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1589, 4191, 1589, 4191, 4191, 4191,
     4191, 4191, 4191, 1589, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1589, 2157, 2157, 2157, 4191, 4191, 4191, 2157, 4191,
     4191, 4191, 4191, 2157, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2157, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 2157, 1592, 1592, 1592, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1592, 4191,
     4191, 4191, 4191, 4191, 4191, 1592, 4191, 1592, 4191, 4191,

     4191, 4191, 4191, 1592, 1590, 1590, 1590, 4191, 4191, 4191,
     1590, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1590, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1590, 1603, 1603, 4191, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1607, 4191, 4191,
     4191, 1607, 4191, 4191, 4191, 4191, 4191, 4191, 1607, 4191,
     4191, 4191, 4191, 4191, 4191, 1607, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1607, 1612, 1612, 4191, 1612, 1612, 4191,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 4191, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1627, 1627,
     1627, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1627, 1627, 4191, 4191, 4191, 4191, 4191,
     1627, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1627, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     4191, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1644, 1644, 4191, 1644, 4191, 4191, 4191, 1644, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1644, 2186, 4191, 4191,
     4191, 4191, 4191, 4191, 2186, 4191, 4191, 4191, 2186, 2186,
     4191, 4191, 2186, 2186, 4191, 4191, 4191, 2186, 4191, 2186,
     2195, 2195, 4191, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 4191, 2195, 2195, 2195, 2195,
     2195, 2195, 2197, 2197, 4191, 2197, 2197, 2197, 2197, 2197,

     2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197,
     2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197,
     2197, 2197, 2197, 2197, 2205, 4191, 2205, 2205, 2205, 2205,
     2205, 2205, 2205, 2205, 2205, 4191, 2205, 2205, 2205, 2205,
     2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 4191,
     2205, 2205, 2205, 2205, 2205, 2205, 1673, 1673, 1673, 4191,
     4191, 4191, 1673, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1673, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1673, 1676, 1676, 1676,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1676, 4191,

     4191, 4191, 1676, 4191, 4191, 4191, 4191, 4191, 4191, 1676,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1676, 1682, 1682,
     1682, 4191, 4191, 4191, 1682, 1682, 4191, 4191, 4191, 1682,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1682, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1682, 1684,
     1684, 1684, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1684, 4191, 4191, 4191, 4191, 4191,
     4191, 1684, 1684, 4191, 4191, 4191, 4191, 4191, 4191, 1684,
     2207, 2207, 4191, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
     2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,

     2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
     2207, 2207, 2213, 2213, 2213, 4191, 4191, 4191, 2213, 4191,
     4191, 4191, 4191, 2213, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2213, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 2213, 1694, 1694, 1694, 4191, 4191, 4191, 1694,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1694, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1694, 1699, 1699, 1699, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1699,
     1699, 4191, 4191, 4191, 4191, 4191, 1699, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 1699, 1706, 1706, 4191, 1706, 1706,
     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706,
     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706,
     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1708, 4191, 4191,
     4191, 1708, 4191, 4191, 1708, 1708, 4191, 4191, 4191, 1708,
     1708, 1708, 4191, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 2219,
     2219, 4191, 2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219,
     2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219,
     2219, 2219, 2219, 2219, 4191, 2219, 2219, 2219, 2219, 2219,

     2219, 2221, 2221, 4191, 2221, 2221, 2221, 2221, 2221, 2221,
     2221, 2221, 2221, 2221, 2221, 2221, 2221, 2221, 2221, 2221,
     2221, 2221, 2221, 2221, 2221, 2221, 2221, 2221, 2221, 2221,
     2221, 2221, 2221, 2227, 4191, 2227, 2227, 2227, 2227, 2227,
     2227, 2227, 2227, 2227, 4191, 2227, 2227, 2227, 2227, 2227,
     2227, 2227, 2227, 2227, 2227, 2227, 2227, 2227, 4191, 2227,
     2227, 2227, 2227, 2227, 2227, 1735, 1735, 4191, 1735, 1735,
     4191, 1735, 1735, 1735, 4191, 4191, 4191, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 2230, 2230, 4191,

     2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230,
     2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230,
     2230, 2230, 4191, 2230, 2230, 2230, 2230, 2230, 2230, 2232,
     2232, 4191, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232,
     2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232,
     2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232,
     2232, 1740, 1740, 4191, 1740, 1740, 4191, 1740, 1740, 1740,
     4191, 1740, 1740, 1740, 1740, 1740, 4191, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 4191,
     4191, 1740, 1740, 2234, 2234, 4191, 2234, 2234, 2234, 2234,

     2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234,
     2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 4191, 2234,
     2234, 2234, 2234, 2234, 2234, 2236, 2236, 4191, 2236, 2236,
     2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236,
     2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236,
     2236, 2236, 2236, 2236, 2236, 2236, 2236, 1743, 1743, 4191,
     1743, 1743, 4191, 1743, 1743, 1743, 4191, 4191, 4191, 1743,
     1743, 1743, 4191, 1743, 1743, 1743, 1743, 1743, 1743, 1743,
     1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 2238,
     2238, 4191, 2238, 2238, 2238, 2238, 2238, 2238, 2238, 2238,

     2238, 2238, 2238, 2238, 2238, 2238, 2238, 2238, 2238, 2238,
     2238, 2238, 2238, 2238, 4191, 2238, 2238, 2238, 2238, 2238,
     2238, 2240, 2240, 4191, 2240, 2240, 2240, 2240, 2240, 2240,
     2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240,
     2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240,
     2240, 2240, 2240, 1746, 1746, 4191, 1746, 1746, 4191, 1746,
     1746, 1746, 4191, 1746, 1746, 1746, 1746, 1746, 4191, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 4191, 4191, 1746, 1746, 2242, 2242, 4191, 2242, 2242,
     2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242,

     2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242,
     4191, 2242, 2242, 2242, 2242, 2242, 2242, 2244, 2244, 4191,
     2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244,
     2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244,
     2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2250,
     2250, 4191, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250,
     2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250,
     2250, 2250, 2250, 2250, 4191, 2250, 2250, 2250, 2250, 2250,
     2250, 2252, 2252, 4191, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,

     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 1767, 1767, 4191, 1767, 1767, 4191, 1767,
     1767, 1767, 4191, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 4191, 1767,
     1767, 1767, 1767, 1767, 1767, 1771, 1771, 4191, 1771, 1771,
     4191, 1771, 1771, 1771, 4191, 4191, 4191, 1771, 1771, 1771,
     4191, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1774, 1774, 4191,
     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 4191,
     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 4191,

     1774, 1774, 4191, 1774, 1774, 1774, 1774, 1774, 1774, 1782,
     1782, 4191, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 4191, 1782, 1782, 4191, 1782, 1782, 1782, 1782, 1782,
     1782, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807,
     1807, 1807, 4191, 1807, 1807, 1807, 1807, 1807, 1807, 1807,
     1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807,
     1807, 1807, 1807, 2270, 4191, 2270, 2270, 2270, 2270, 2270,
     2270, 2270, 2270, 4191, 4191, 2270, 2270, 2270, 2270, 2270,
     2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 4191, 2270,

     2270, 2270, 2270, 2270, 2270, 1812, 1812, 1812, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 4191, 1812, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 2272, 4191, 2272,
     2272, 2272, 2272, 2272, 2272, 2272, 2272, 4191, 4191, 2272,
     2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272, 2272,
     2272, 2272, 4191, 2272, 2272, 2272, 2272, 2272, 2272, 1820,
     1820, 1820, 4191, 4191, 4191, 1820, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1820, 1820, 4191, 4191, 4191, 4191, 4191, 4191, 1820,

     2275, 2275, 2275, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     2275, 4191, 2275, 4191, 4191, 2275, 4191, 4191, 4191, 4191,
     4191, 4191, 2275, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     2275, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1826, 1826, 1826, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1826, 4191, 1826, 4191, 4191, 1826, 4191,
     4191, 4191, 4191, 4191, 4191, 1826, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1826, 1831, 1831, 1831, 4191, 4191, 4191,

     1831, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1831, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1831, 2279, 2279, 2279, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     2279, 4191, 4191, 4191, 4191, 4191, 4191, 2279, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 2279, 1835, 1835, 1835, 4191,
     4191, 4191, 4191, 4191, 4191, 1835, 4191, 4191, 4191, 4191,
     4191, 1835, 4191, 4191, 4191, 4191, 4191, 4191, 1835, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1835, 1845, 1845, 1845,
     4191, 4191, 4191, 1845, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1845,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1845, 1850, 1850,
     1850, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1850, 1850, 4191, 4191, 4191, 4191, 4191,
     1850, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1850, 1860,
     1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,
     1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,
     1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,
     1860, 1866, 1866, 4191, 1866, 1866, 1866, 1866, 1866, 1866,
     1866, 1866, 1866, 4191, 1866, 1866, 4191, 1866, 1866, 1866,

     1866, 1866, 1866, 4191, 1866, 1866, 4191, 1866, 1866, 1866,
     1866, 1866, 1866, 1887, 1887, 1887, 1887, 1887, 1887, 1887,
     1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 4191, 4191,
     1887, 1887, 1887, 1887, 1887, 1887, 4191, 1887, 1887, 1887,
     1887, 1887, 1887, 1887, 1887, 1890, 1890, 4191, 1890, 1890,
     1890, 1890, 4191, 1890, 1890, 1890, 1890, 4191, 1890, 1890,
     4191, 1890, 1890, 1890, 4191, 1890, 1890, 4191, 1890, 1890,
     4191, 4191, 1890, 1890, 1890, 1890, 1890, 1904, 1904, 1904,
     4191, 4191, 4191, 4191, 4191, 4191, 1904, 4191, 4191, 1904,
     4191, 4191, 1904, 4191, 1904, 1904, 4191, 4191, 4191, 1904,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1904, 2310, 2310,
     2310, 4191, 4191, 4191, 4191, 4191, 4191, 2310, 4191, 4191,
     2310, 4191, 4191, 2310, 2310, 2310, 2310, 4191, 4191, 4191,
     2310, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2310, 1907,
     1907, 1907, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1907, 4191, 1907, 4191, 4191, 4191, 4191, 4191,
     4191, 1907, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1907,
     1910, 1910, 1910, 4191, 4191, 4191, 1910, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1910, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     1910, 1905, 1905, 1905, 1905, 4191, 4191, 1905, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1905, 4191, 4191,
     4191, 4191, 4191, 1905, 4191, 4191, 4191, 4191, 4191, 4191,
     1905, 1905, 1912, 1912, 1912, 4191, 4191, 4191, 4191, 4191,
     4191, 1912, 4191, 4191, 1912, 4191, 4191, 1912, 4191, 1912,
     1912, 4191, 4191, 4191, 1912, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1912, 1914, 1914, 1914, 4191, 4191, 4191, 4191,
     4191, 4191, 1914, 4191, 4191, 4191, 4191, 4191, 1914, 4191,
     4191, 4191, 4191, 4191, 4191, 1914, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1914, 2312, 2312, 2312, 4191, 4191, 4191,

     4191, 4191, 4191, 2312, 4191, 4191, 4191, 4191, 4191, 2312,
     2312, 4191, 4191, 4191, 4191, 4191, 2312, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2312, 2313, 2313, 2313, 2313, 2313,
     2313, 2313, 2313, 2313, 2313, 2313, 2313, 4191, 2313, 2313,
     4191, 2313, 2313, 2313, 2313, 2313, 2313, 2313, 2313, 2313,
     2313, 2313, 2313, 2313, 2313, 2313, 2313, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 4191, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 1915,
     1915, 1915, 1915, 4191, 4191, 1915, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 1915, 4191, 4191, 4191, 4191,
     4191, 1915, 4191, 4191, 4191, 4191, 4191, 4191, 1915, 1915,
     1268, 1268, 1268, 4191, 4191, 4191, 4191, 4191, 4191, 1268,
     4191, 4191, 4191, 4191, 4191, 1268, 1268, 4191, 4191, 4191,
     4191, 4191, 1268, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1268, 1278, 4191, 4191, 4191, 1278, 4191, 1278, 4191, 4191,
     1278, 4191, 4191, 4191, 1278, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1278, 2329, 2329, 2329, 2329, 4191, 4191, 2329,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2329,
     4191, 4191, 4191, 4191, 4191, 2329, 4191, 4191, 4191, 4191,

     4191, 4191, 2329, 2329, 1933, 1933, 1933, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1933, 4191, 1933,
     1933, 4191, 4191, 4191, 4191, 4191, 1933, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1933, 1937, 1937, 1937, 4191, 4191,
     4191, 1937, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1937, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1937, 2331, 2331, 2331, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 2331, 2331, 4191, 4191, 4191, 4191, 4191, 2331, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2331, 2339, 2339, 4191,

     2339, 2339, 2339, 2339, 2339, 2339, 2339, 2339, 2339, 2339,
     2339, 2339, 2339, 2339, 2339, 2339, 2339, 2339, 2339, 2339,
     2339, 2339, 4191, 2339, 2339, 2339, 2339, 2339, 2339, 1362,
     1362, 1362, 1362, 4191, 4191, 1362, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1362, 4191, 4191, 4191, 4191,
     4191, 1362, 4191, 4191, 4191, 4191, 4191, 4191, 1362, 1362,
     1989, 1989, 1989, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1989, 4191, 4191, 1989, 4191,
     4191, 4191, 1989, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1989, 1993, 1993, 4191, 1993, 1993, 1993, 1993, 1993, 1993,

     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 2391, 2391, 2391, 4191, 4191, 4191, 2391,
     2391, 4191, 4191, 4191, 2391, 4191, 4191, 4191, 4191, 2391,
     4191, 4191, 4191, 4191, 4191, 2391, 4191, 4191, 4191, 2391,
     4191, 4191, 4191, 2391, 2394, 2394, 2394, 4191, 4191, 4191,
     2394, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     2394, 4191, 4191, 4191, 4191, 4191, 2394, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2394, 2400, 2400, 2400, 4191, 4191,
     4191, 2400, 4191, 4191, 4191, 2400, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 2400, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 2400, 2000, 2000, 2000, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2000, 2000, 4191, 4191,
     4191, 2000, 2000, 4191, 2000, 4191, 4191, 4191, 2000, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2000, 2402, 4191, 4191,
     4191, 4191, 4191, 4191, 2402, 4191, 4191, 4191, 2402, 2402,
     4191, 4191, 2402, 2402, 4191, 4191, 4191, 2402, 4191, 2402,
     2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
     2404, 2404, 4191, 2404, 2404, 4191, 2404, 2404, 2404, 2404,
     2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,

     2404, 2404, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
     2410, 2410, 2410, 2410, 2410, 2410, 2410, 4191, 2410, 2410,
     2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
     2410, 2410, 2410, 2410, 2018, 2018, 2018, 4191, 4191, 4191,
     4191, 4191, 4191, 2018, 4191, 4191, 4191, 2018, 4191, 2018,
     4191, 4191, 4191, 4191, 4191, 4191, 2018, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2018, 1388, 1388, 1388, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1388, 1388, 4191, 1388, 4191, 4191, 4191, 1388, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1388, 2075, 2075, 2075, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 2075, 4191, 4191, 2075, 4191, 4191, 4191, 2075, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2075, 1436, 1436, 1436,
     1436, 4191, 4191, 1436, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1436, 4191, 4191, 4191, 4191, 4191, 1436,
     4191, 4191, 4191, 4191, 4191, 4191, 1436, 1436, 2500, 2500,
     2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
     2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
     2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
     1488, 1488, 1488, 1488, 1488, 4191, 1488, 1488, 1488, 4191,

     1488, 1488, 1488, 1488, 1488, 4191, 1488, 1488, 1488, 4191,
     1488, 1488, 4191, 1488, 1488, 1488, 1488, 1488, 4191, 4191,
     1488, 1488, 1492, 1492, 4191, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 2505, 2505, 4191, 2505, 2505, 2505,
     2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505,
     2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 4191,
     2505, 2505, 2505, 2505, 2505, 2505, 2124, 2124, 4191, 2124,
     2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,

     2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
     2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2130, 2130,
     2130, 4191, 4191, 4191, 2130, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     2130, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2130, 2511,
     2511, 2511, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 2511, 4191, 2511, 2511, 4191, 4191, 4191, 4191,
     4191, 2511, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2511,
     1505, 1505, 1505, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1505, 4191, 1505, 1505, 4191, 4191, 4191,

     4191, 4191, 1505, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1505, 1515, 1515, 1515, 1515, 4191, 4191, 1515, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1515, 4191, 4191,
     4191, 4191, 4191, 1515, 4191, 4191, 4191, 4191, 4191, 4191,
     1515, 1515, 2513, 2513, 4191, 2513, 2513, 2513, 2513, 2513,
     2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513,
     2513, 2513, 2513, 2513, 2513, 2513, 2513, 4191, 2513, 2513,
     2513, 2513, 2513, 2513, 1575, 4191, 4191, 4191, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 4191, 1575, 4191, 4191,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 2525, 4191, 2525, 4191,
     4191, 4191, 4191, 4191, 4191, 2525, 4191, 2525, 4191, 4191,
     4191, 4191, 4191, 2525, 2157, 2157, 2157, 4191, 4191, 4191,
     2157, 4191, 4191, 4191, 4191, 2157, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2157, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2157, 2526, 2526, 2526, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2526, 4191,
     2526, 4191, 4191, 4191, 4191, 4191, 4191, 2526, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 2526, 1590, 1590, 1590, 4191,
     4191, 4191, 1590, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1590, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1590, 2186, 4191, 4191,
     4191, 4191, 4191, 4191, 2186, 4191, 4191, 4191, 2186, 2186,
     4191, 4191, 2186, 2186, 4191, 4191, 4191, 2186, 4191, 2186,
     1644, 1644, 4191, 1644, 4191, 4191, 4191, 1644, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1644, 2551, 2551, 4191, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 4191, 2551, 2551, 2551, 2551, 2551, 2551, 2554, 4191,
     2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554, 4191,

     2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554,
     2554, 2554, 2554, 4191, 2554, 2554, 2554, 2554, 2554, 2554,
     2207, 2207, 4191, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
     2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
     2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
     2207, 2207, 2213, 2213, 2213, 4191, 4191, 4191, 2213, 4191,
     4191, 4191, 4191, 2213, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2213, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 2213, 2557, 2557, 2557, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2557, 2557,

     4191, 4191, 4191, 4191, 4191, 2557, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 2557, 1697, 1697, 1697, 1697, 4191, 4191,
     1697, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1697, 4191, 4191, 4191, 4191, 4191, 1697, 4191, 4191, 4191,
     4191, 4191, 4191, 1697, 1697, 2559, 2559, 4191, 2559, 2559,
     2559, 2559, 2559, 2559, 2559, 2559, 2559, 2559, 2559, 2559,
     2559, 2559, 2559, 2559, 2559, 2559, 2559, 2559, 2559, 2559,
     4191, 2559, 2559, 2559, 2559, 2559, 2559, 2565, 4191, 2565,
     2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 4191, 2565,
     2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565,

     2565, 2565, 4191, 2565, 2565, 2565, 2565, 2565, 2565, 2567,
     2567, 4191, 2567, 2567, 2567, 2567, 2567, 2567, 2567, 2567,
     2567, 2567, 2567, 2567, 2567, 2567, 2567, 2567, 2567, 2567,
     2567, 2567, 2567, 2567, 4191, 2567, 2567, 2567, 2567, 2567,
     2567, 2570, 2570, 4191, 2570, 2570, 2570, 2570, 2570, 2570,
     2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570,
     2570, 2570, 2570, 2570, 2570, 2570, 4191, 2570, 2570, 2570,
     2570, 2570, 2570, 2573, 2573, 4191, 2573, 2573, 2573, 2573,
     2573, 2573, 2573, 2573, 2573, 2573, 2573, 2573, 2573, 2573,
     2573, 2573, 2573, 2573, 2573, 2573, 2573, 2573, 4191, 2573,

     2573, 2573, 2573, 2573, 2573, 2576, 2576, 4191, 2576, 2576,
     2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576,
     2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576, 2576,
     4191, 2576, 2576, 2576, 2576, 2576, 2576, 1746, 1746, 4191,
     1746, 1746, 4191, 1746, 1746, 1746, 4191, 1746, 1746, 1746,
     1746, 1746, 4191, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 4191, 4191, 1746, 1746, 2582,
     2582, 4191, 2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582,
     2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582,
     2582, 2582, 2582, 2582, 4191, 2582, 2582, 2582, 2582, 2582,

     2582, 2595, 2595, 2595, 2595, 2595, 2595, 2595, 2595, 2595,
     2595, 2595, 2595, 2595, 2595, 2595, 2595, 4191, 2595, 2595,
     2595, 2595, 2595, 2595, 4191, 2595, 2595, 2595, 2595, 2595,
     2595, 2595, 2595, 2596, 4191, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 4191, 4191, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 4191, 2596,
     2596, 2596, 2596, 2596, 2596, 2598, 4191, 2598, 2598, 2598,
     2598, 2598, 2598, 2598, 2598, 4191, 4191, 2598, 2598, 2598,
     2598, 2598, 2598, 2598, 2598, 2598, 2598, 2598, 2598, 2598,
     4191, 2598, 2598, 2598, 2598, 2598, 2598, 2275, 2275, 2275,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 2275, 4191, 2275,
     4191, 4191, 2275, 4191, 4191, 4191, 4191, 4191, 4191, 2275,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 2275, 2279, 2279,
     2279, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 2279, 4191, 4191, 4191, 4191, 4191, 4191,
     2279, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2279, 1848,
     1848, 1848, 1848, 4191, 4191, 1848, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1848, 4191, 4191, 4191, 4191,
     4191, 1848, 4191, 4191, 4191, 4191, 4191, 4191, 1848, 1848,
     1866, 1866, 4191, 1866, 1866, 1866, 1866, 1866, 1866, 1866,

     1866, 1866, 4191, 1866, 1866, 4191, 1866, 1866, 1866, 1866,
     1866, 1866, 4191, 1866, 1866, 4191, 1866, 1866, 1866, 1866,
     1866, 1866, 2310, 2310, 2310, 4191, 4191, 4191, 4191, 4191,
     4191, 2310, 4191, 4191, 2310, 4191, 4191, 2310, 2310, 2310,
     2310, 4191, 4191, 4191, 2310, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 2310, 2312, 2312, 2312, 4191, 4191, 4191, 4191,
     4191, 4191, 2312, 4191, 4191, 4191, 4191, 4191, 2312, 2312,
     4191, 4191, 4191, 4191, 4191, 2312, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 2312, 1268, 1268, 1268, 4191, 4191, 4191,
     4191, 4191, 4191, 1268, 4191, 4191, 4191, 4191, 4191, 1268,

     1268, 4191, 4191, 4191, 4191, 4191, 1268, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1268, 1278, 4191, 4191, 4191, 1278,
     4191, 1278, 4191, 4191, 1278, 4191, 4191, 4191, 1278, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1278, 2329, 2329, 2329,
     2329, 4191, 4191, 2329, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 2329, 4191, 4191, 4191, 4191, 4191, 2329,
     4191, 4191, 4191, 4191, 4191, 4191, 2329, 2329, 2628, 2628,
     2628, 4191, 4191, 4191, 2628, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     2628, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2628, 2632,

     2632, 2632, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2632, 2632, 4191, 4191, 4191, 4191,
     4191, 2632, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2632,
     1933, 1933, 1933, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1933, 4191, 1933, 1933, 4191, 4191, 4191,
     4191, 4191, 1933, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1933, 2331, 2331, 2331, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2331, 2331, 4191, 4191,
     4191, 4191, 4191, 2331, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 2331, 1937, 1937, 1937, 4191, 4191, 4191, 1937, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1937, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1937, 2639, 2639, 4191, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 4191, 2639,
     2639, 2639, 2639, 2639, 2639, 2391, 2391, 2391, 4191, 4191,
     4191, 2391, 2391, 4191, 4191, 4191, 2391, 4191, 4191, 4191,
     4191, 2391, 4191, 4191, 4191, 4191, 4191, 2391, 4191, 4191,
     4191, 2391, 4191, 4191, 4191, 2391, 2691, 2691, 2691, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 2691, 2691, 4191, 2691, 4191, 4191, 4191, 2691, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2691, 2394, 2394, 2394,
     4191, 4191, 4191, 2394, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2394,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 2394, 2695, 2695,
     2695, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2695, 4191,
     4191, 4191, 4191, 2695, 2695, 4191, 2695, 4191, 4191, 4191,
     2695, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2695, 2400,
     2400, 2400, 4191, 4191, 4191, 2400, 4191, 4191, 4191, 2400,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 2400, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2400,
     2698, 4191, 4191, 4191, 2698, 4191, 4191, 4191, 4191, 2698,
     4191, 4191, 4191, 4191, 4191, 4191, 2698, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2698, 2402, 4191, 4191, 4191, 4191,
     4191, 4191, 2402, 4191, 4191, 4191, 2402, 2402, 4191, 4191,
     2402, 2402, 4191, 4191, 4191, 2402, 4191, 2402, 2699, 2699,
     2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699,
     2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699,
     2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699,
     2701, 2701, 4191, 2701, 2701, 2701, 2701, 2701, 2701, 2701,

     2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701,
     2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701,
     2701, 2701, 2704, 2704, 2704, 4191, 4191, 4191, 4191, 4191,
     4191, 2704, 4191, 4191, 4191, 2704, 4191, 2704, 4191, 4191,
     4191, 4191, 4191, 4191, 2704, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 2704, 2018, 2018, 2018, 4191, 4191, 4191, 4191,
     4191, 4191, 2018, 4191, 4191, 4191, 2018, 4191, 2018, 4191,
     4191, 4191, 4191, 4191, 4191, 2018, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 2018, 1388, 1388, 1388, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1388,

     1388, 4191, 1388, 4191, 4191, 4191, 1388, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1388, 2500, 2500, 2500, 2500, 2500,
     2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
     2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
     2500, 2500, 2500, 2500, 2500, 2500, 2500, 1488, 1488, 1488,
     1488, 1488, 4191, 1488, 1488, 1488, 4191, 1488, 1488, 1488,
     1488, 1488, 4191, 1488, 1488, 1488, 4191, 1488, 1488, 4191,
     1488, 1488, 1488, 1488, 1488, 4191, 4191, 1488, 1488, 1492,
     1492, 4191, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,

     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 2791, 2791, 4191, 2791, 2791, 2791, 2791, 2791, 2791,
     2791, 2791, 2791, 2791, 2791, 2791, 2791, 2791, 2791, 2791,
     2791, 2791, 2791, 2791, 2791, 2791, 4191, 2791, 2791, 2791,
     2791, 2791, 2791, 2794, 2794, 2794, 2794, 2794, 2794, 2794,
     2794, 2794, 2794, 2794, 2794, 2794, 2794, 2794, 2794, 4191,
     2794, 2794, 2794, 2794, 2794, 2794, 4191, 2794, 2794, 2794,
     2794, 2794, 2794, 2794, 2794, 2511, 2511, 2511, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2511, 4191,
     2511, 2511, 4191, 4191, 4191, 4191, 4191, 2511, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 2511, 1505, 1505, 1505, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1505,
     4191, 1505, 1505, 4191, 4191, 4191, 4191, 4191, 1505, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1505, 2796, 2796, 4191,
     2796, 2796, 2796, 2796, 2796, 2796, 2796, 2796, 2796, 2796,
     2796, 2796, 2796, 2796, 2796, 2796, 2796, 2796, 2796, 2796,
     2796, 2796, 4191, 2796, 2796, 2796, 2796, 2796, 2796, 1575,
     4191, 4191, 4191, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 4191, 1575, 4191, 4191, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 2525, 4191, 2525, 4191, 4191, 4191, 4191, 4191, 4191,
     2525, 4191, 2525, 4191, 4191, 4191, 4191, 4191, 2525, 2526,
     2526, 2526, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 2526, 4191, 2526, 4191, 4191, 4191, 4191, 4191,
     4191, 2526, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2526,
     1644, 1644, 4191, 1644, 4191, 4191, 4191, 1644, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1644, 2824, 2824, 4191, 2824,
     2824, 2824, 2824, 2824, 2824, 2824, 2824, 2824, 2824, 2824,
     2824, 2824, 2824, 2824, 2824, 2824, 2824, 2824, 2824, 2824,
     2824, 4191, 2824, 2824, 2824, 2824, 2824, 2824, 2826, 4191,

     2826, 2826, 2826, 2826, 2826, 2826, 2826, 2826, 2826, 4191,
     2826, 2826, 2826, 2826, 2826, 2826, 2826, 2826, 2826, 2826,
     2826, 2826, 2826, 4191, 2826, 2826, 2826, 2826, 2826, 2826,
     2557, 2557, 2557, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 2557, 2557, 4191, 4191, 4191,
     4191, 4191, 2557, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     2557, 2828, 2828, 4191, 2828, 2828, 2828, 2828, 2828, 2828,
     2828, 2828, 2828, 2828, 2828, 2828, 2828, 2828, 2828, 2828,
     2828, 2828, 2828, 2828, 2828, 2828, 4191, 2828, 2828, 2828,
     2828, 2828, 2828, 2831, 4191, 2831, 2831, 2831, 2831, 2831,

     2831, 2831, 2831, 2831, 4191, 2831, 2831, 2831, 2831, 2831,
     2831, 2831, 2831, 2831, 2831, 2831, 2831, 2831, 4191, 2831,
     2831, 2831, 2831, 2831, 2831, 2832, 2832, 4191, 2832, 2832,
     2832, 2832, 2832, 2832, 2832, 2832, 2832, 2832, 2832, 2832,
     2832, 2832, 2832, 2832, 2832, 2832, 2832, 2832, 2832, 2832,
     4191, 2832, 2832, 2832, 2832, 2832, 2832, 2834, 2834, 4191,
     2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834,
     2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834, 2834,
     2834, 2834, 4191, 2834, 2834, 2834, 2834, 2834, 2834, 2836,
     2836, 4191, 2836, 2836, 2836, 2836, 2836, 2836, 2836, 2836,

     2836, 2836, 2836, 2836, 2836, 2836, 2836, 2836, 2836, 2836,
     2836, 2836, 2836, 2836, 4191, 2836, 2836, 2836, 2836, 2836,
     2836, 2838, 2838, 4191, 2838, 2838, 2838, 2838, 2838, 2838,
     2838, 2838, 2838, 2838, 2838, 2838, 2838, 2838, 2838, 2838,
     2838, 2838, 2838, 2838, 2838, 2838, 4191, 2838, 2838, 2838,
     2838, 2838, 2838, 1746, 1746, 4191, 1746, 1746, 1746, 1746,
     1746, 1746, 4191, 1746, 1746, 1746, 1746, 1746, 4191, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 4191, 4191, 1746, 1746, 2842, 2842, 4191, 2842, 2842,
     2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842,

     2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842, 2842,
     4191, 2842, 2842, 2842, 2842, 2842, 2842, 2846, 2846, 2846,
     2846, 2846, 2846, 2846, 2846, 2846, 2846, 2846, 2846, 2846,
     2846, 2846, 2846, 4191, 2846, 2846, 2846, 2846, 2846, 2846,
     4191, 2846, 2846, 2846, 2846, 2846, 2846, 2846, 2846, 2859,
     4191, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 4191,
     4191, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 4191, 2859, 2859, 2859, 2859, 2859,
     2859, 2861, 4191, 2861, 2861, 2861, 2861, 2861, 2861, 2861,
     2861, 4191, 4191, 2861, 2861, 2861, 2861, 2861, 2861, 2861,

     2861, 2861, 2861, 2861, 2861, 2861, 4191, 2861, 2861, 2861,
     2861, 2861, 2861, 1839, 4191, 4191, 4191, 4191, 4191, 1839,
     1839, 4191, 4191, 4191, 1839, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1839, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1839, 1866, 1866, 4191, 1866, 1866, 1866,
     1866, 1866, 1866, 1866, 1866, 1866, 4191, 1866, 1866, 4191,
     1866, 1866, 1866, 1866, 1866, 1866, 4191, 1866, 1866, 4191,
     1866, 1866, 1866, 1866, 1866, 1866, 2871, 2871, 2871, 2871,
     2871, 2871, 2871, 2871, 2871, 2871, 2871, 2871, 2871, 2871,
     2871, 2871, 4191, 2871, 2871, 2871, 2871, 2871, 2871, 4191,

     2871, 2871, 2871, 2871, 2871, 2871, 2871, 2871, 1268, 1268,
     1268, 4191, 4191, 4191, 4191, 4191, 4191, 1268, 4191, 4191,
     4191, 4191, 4191, 1268, 1268, 4191, 4191, 4191, 4191, 4191,
     1268, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1268, 1278,
     4191, 4191, 4191, 1278, 4191, 1278, 4191, 4191, 1278, 4191,
     4191, 4191, 1278, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     1278, 2628, 2628, 2628, 4191, 4191, 4191, 2628, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 2628, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 2628, 2632, 2632, 2632, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 2632, 2632, 4191,
     4191, 4191, 4191, 4191, 2632, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 2632, 1933, 1933, 1933, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1933, 4191, 1933, 1933,
     4191, 4191, 4191, 4191, 4191, 1933, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 1933, 2391, 2391, 2391, 4191, 4191, 4191,
     2391, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     2391, 4191, 4191, 4191, 4191, 4191, 2391, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2391, 2691, 2691, 2691, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     2691, 2691, 4191, 2691, 4191, 4191, 4191, 2691, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 2691, 2943, 4191, 4191, 4191,
     4191, 4191, 4191, 2943, 4191, 4191, 4191, 2943, 2943, 4191,
     4191, 2943, 2943, 4191, 4191, 4191, 2943, 4191, 2943, 2695,
     2695, 2695, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2695,
     4191, 4191, 4191, 4191, 2695, 2695, 4191, 2695, 4191, 4191,
     4191, 2695, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2695,
     2698, 4191, 4191, 4191, 2698, 4191, 4191, 4191, 4191, 2698,
     4191, 4191, 4191, 4191, 4191, 4191, 2698, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2698, 2699, 2699, 2699, 2699, 2699,

     2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699,
     2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699,
     2699, 2699, 2699, 2699, 2699, 2699, 2699, 2701, 2701, 4191,
     2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701,
     2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701,
     2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701, 2701, 2704,
     2704, 2704, 4191, 4191, 4191, 4191, 4191, 4191, 2704, 4191,
     4191, 4191, 2704, 4191, 2704, 4191, 4191, 4191, 4191, 4191,
     4191, 2704, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2704,
     2018, 2018, 2018, 4191, 4191, 4191, 4191, 4191, 4191, 2018,

     4191, 4191, 4191, 2018, 4191, 2018, 4191, 4191, 4191, 4191,
     4191, 4191, 2018, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     2018, 1388, 1388, 1388, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1388, 1388, 4191, 1388,
     4191, 4191, 4191, 1388, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1388, 1488, 1488, 1488, 1488, 1488, 4191, 1488, 1488,
     1488, 4191, 1488, 1488, 1488, 1488, 1488, 4191, 1488, 1488,
     1488, 4191, 1488, 1488, 4191, 1488, 1488, 1488, 1488, 1488,
     4191, 4191, 1488, 1488, 1492, 1492, 4191, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,

     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1505, 1505, 1505, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1505,
     4191, 1505, 1505, 4191, 4191, 4191, 4191, 4191, 1505, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 1505, 1569, 1569, 1569,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 1569, 4191, 4191, 4191, 4191, 4191, 4191, 1569,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 1569, 1575, 4191,
     4191, 4191, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     4191, 1575, 4191, 4191, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1644, 1644, 4191, 1644, 4191, 4191, 4191, 1644, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 1644, 3051, 4191, 3051, 3051,
     3051, 3051, 3051, 3051, 3051, 3051, 3051, 4191, 3051, 3051,
     3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051,
     3051, 4191, 3051, 3051, 3051, 3051, 3051, 3051, 2213, 2213,
     2213, 4191, 4191, 4191, 2213, 4191, 4191, 4191, 4191, 2213,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     2213, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 2213, 3052,
     4191, 3052, 3052, 3052, 3052, 3052, 3052, 3052, 3052, 3052,

     4191, 3052, 3052, 3052, 3052, 3052, 3052, 3052, 3052, 3052,
     3052, 3052, 3052, 3052, 4191, 3052, 3052, 3052, 3052, 3052,
     3052, 3053, 3053, 4191, 3053, 3053, 4191, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3068, 4191, 3068, 3068, 3068, 3068, 3068,
     3068, 3068, 3068, 4191, 4191, 3068, 3068, 3068, 3068, 3068,
     3068, 3068, 3068, 3068, 3068, 3068, 3068, 3068, 4191, 3068,
     3068, 3068, 3068, 3068, 3068, 3070, 4191, 3070, 3070, 3070,
     3070, 3070, 3070, 3070, 3070, 4191, 4191, 3070, 3070, 3070,

     3070, 3070, 3070, 3070, 3070, 3070, 3070, 3070, 3070, 3070,
     4191, 3070, 3070, 3070, 3070, 3070, 3070, 1866, 1866, 4191,
     1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 4191,
     1866, 1866, 4191, 1866, 1866, 1866, 1866, 1866, 1866, 4191,
     1866, 1866, 4191, 1866, 1866, 1866, 1866, 1866, 1866, 1268,
     1268, 1268, 4191, 4191, 4191, 4191, 4191, 4191, 1268, 4191,
     4191, 4191, 4191, 4191, 1268, 1268, 4191, 4191, 4191, 4191,
     4191, 1268, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 1268,
     2329, 2329, 2329, 2329, 4191, 4191, 2329, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 2329, 4191, 4191, 4191,

     4191, 4191, 2329, 4191, 4191, 4191, 4191, 4191, 4191, 2329,
     2329, 1933, 1933, 1933, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 1933, 4191, 1933, 1933, 4191, 4191,
     4191, 4191, 4191, 1933, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 1933, 2391, 2391, 2391, 4191, 4191, 4191, 2391, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 2391, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 2391, 2943, 4191, 4191, 4191, 4191, 4191, 4191,
     2943, 4191, 4191, 4191, 2943, 2943, 4191, 4191, 2943, 2943,
     4191, 4191, 4191, 2943, 4191, 2943, 3249, 4191, 3249, 3249,

     3249, 3249, 3249, 3249, 3249, 3249, 3249, 4191, 3249, 3249,
     3249, 3249, 3249, 3249, 3249, 3249, 3249, 3249, 3249, 3249,
     3249, 4191, 3249, 3249, 3249, 3249, 3249, 3249, 3250, 4191,
     3250, 3250, 3250, 3250, 3250, 3250, 3250, 3250, 3250, 4191,
     3250, 3250, 3250, 3250, 3250, 3250, 3250, 3250, 3250, 3250,
     3250, 3250, 3250, 4191, 3250, 3250, 3250, 3250, 3250, 3250,
     3265, 4191, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265,
     4191, 4191, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265,
     3265, 3265, 3265, 3265, 3265, 4191, 3265, 3265, 3265, 3265,
     3265, 3265, 3267, 4191, 3267, 3267, 3267, 3267, 3267, 3267,

     3267, 3267, 4191, 4191, 3267, 3267, 3267, 3267, 3267, 3267,
     3267, 3267, 3267, 3267, 3267, 3267, 3267, 4191, 3267, 3267,
     3267, 3267, 3267, 3267, 3423, 4191, 3423, 3423, 3423, 3423,
     3423, 3423, 3423, 3423, 3423, 4191, 3423, 3423, 3423, 3423,
     3423, 3423, 3423, 3423, 3423, 3423, 3423, 3423, 3423, 4191,
     3423, 3423, 3423, 3423, 3423, 3423, 3424, 4191, 3424, 3424,
     3424, 3424, 3424, 3424, 3424, 3424, 3424, 4191, 3424, 3424,
     3424, 3424, 3424, 3424, 3424, 3424, 3424, 3424, 3424, 3424,
     3424, 4191, 3424, 3424, 3424, 3424, 3424, 3424, 3435, 4191,
     3435, 3435, 3435, 3435, 3435, 3435, 3435, 3435, 4191, 4191,

     3435, 3435, 3435, 3435, 3435, 3435, 3435, 3435, 3435, 3435,
     3435, 3435, 3435, 4191, 3435, 3435, 3435, 3435, 3435, 3435,
     3437, 4191, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
     4191, 4191, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
     3437, 3437, 3437, 3437, 3437, 4191, 3437, 3437, 3437, 3437,
     3437, 3437, 3444, 3444, 3444, 3444, 3444, 3444, 3444, 3444,
     3444, 3444, 3444, 3444, 3444, 3444, 3444, 3444, 4191, 3444,
     3444, 3444, 3444, 3444, 3444, 4191, 3444, 3444, 3444, 3444,
     3444, 3444, 3444, 3444, 3558, 4191, 3558, 3558, 3558, 3558,
     3558, 3558, 3558, 3558, 3558, 4191, 3558, 3558, 3558, 3558,

     3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4191,
     3558, 3558, 3558, 3558, 3558, 3558, 3559, 4191, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 4191, 3559, 3559,
     3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559, 3559,
     3559, 4191, 3559, 3559, 3559, 3559, 3559, 3559, 3569, 4191,
     3569, 3569, 3569, 3569, 3569, 3569, 3569, 3569, 4191, 4191,
     3569, 3569, 3569, 3569, 3569, 3569, 3569, 3569, 3569, 3569,
     3569, 3569, 3569, 4191, 3569, 3569, 3569, 3569, 3569, 3569,
     3571, 4191, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571,
     4191, 4191, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571,

     3571, 3571, 3571, 3571, 3571, 4191, 3571, 3571, 3571, 3571,
     3571, 3571, 3664, 4191, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 4191, 3664, 3664, 3664, 3664, 3664, 3664,
     3664, 3664, 3664, 3664, 3664, 3664, 3664, 4191, 3664, 3664,
     3664, 3664, 3664, 3664, 3665, 4191, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 4191, 3665, 3665, 3665, 3665,
     3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 4191,
     3665, 3665, 3665, 3665, 3665, 3665, 3675, 4191, 3675, 3675,
     3675, 3675, 3675, 3675, 3675, 3675, 4191, 4191, 3675, 3675,
     3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675,

     3675, 4191, 3675, 3675, 3675, 3675, 3675, 3675, 3677, 4191,
     3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 4191, 4191,
     3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677,
     3677, 3677, 3677, 4191, 3677, 3677, 3677, 3677, 3677, 3677,
     3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634,
     3634, 3634, 3634, 3634, 3634, 3634, 4191, 3634, 3634, 3634,
     3634, 3634, 3634, 4191, 3634, 3634, 3634, 3634, 3634, 3634,
     3634, 3634, 3745, 4191, 3745, 3745, 3745, 3745, 3745, 3745,
     3745, 3745, 3745, 4191, 3745, 3745, 3745, 3745, 3745, 3745,
     3745, 3745, 3745, 3745, 3745, 3745, 3745, 4191, 3745, 3745,

     3745, 3745, 3745, 3745, 3746, 4191, 3746, 3746, 3746, 3746,
     3746, 3746, 3746, 3746, 3746, 4191, 3746, 3746, 3746, 3746,
     3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 4191,
     3746, 3746, 3746, 3746, 3746, 3746, 3750, 4191, 3750, 3750,
     3750, 3750, 3750, 3750, 3750, 3750, 4191, 4191, 3750, 3750,
     3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750,
     3750, 4191, 3750, 3750, 3750, 3750, 3750, 3750, 3752, 4191,
     3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 4191, 4191,
     3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752,
     3752, 3752, 3752, 4191, 3752, 3752, 3752, 3752, 3752, 3752,

     3779, 3779, 3779, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 3779, 4191, 4191, 4191, 3779,
     4191, 4191, 3779, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     3779, 3800, 4191, 3800, 3800, 3800, 3800, 3800, 3800, 3800,
     3800, 3800, 4191, 3800, 3800, 3800, 3800, 3800, 3800, 3800,
     3800, 3800, 3800, 3800, 3800, 3800, 4191, 3800, 3800, 3800,
     3800, 3800, 3800, 3801, 4191, 3801, 3801, 3801, 3801, 3801,
     3801, 3801, 3801, 3801, 4191, 3801, 3801, 3801, 3801, 3801,
     3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 4191, 3801,
     3801, 3801, 3801, 3801, 3801, 3803, 4191, 3803, 3803, 3803,

     3803, 3803, 3803, 3803, 3803, 4191, 4191, 3803, 3803, 3803,
     3803, 3803, 3803, 3803, 3803, 3803, 3803, 3803, 3803, 3803,
     4191, 3803, 3803, 3803, 3803, 3803, 3803, 3805, 4191, 3805,
     3805, 3805, 3805, 3805, 3805, 3805, 3805, 4191, 4191, 3805,
     3805, 3805, 3805, 3805, 3805, 3805, 3805, 3805, 3805, 3805,
     3805, 3805, 4191, 3805, 3805, 3805, 3805, 3805, 3805, 3837,
     4191, 3837, 3837, 3837, 3837, 3837, 3837, 3837, 3837, 3837,
     4191, 3837, 3837, 3837, 3837, 3837, 3837, 3837, 3837, 3837,
     3837, 3837, 3837, 3837, 4191, 3837, 3837, 3837, 3837, 3837,
     3837, 3838, 4191, 3838, 3838, 3838, 3838, 3838, 3838, 3838,

     3838, 3838, 4191, 3838, 3838, 3838, 3838, 3838, 3838, 3838,
     3838, 3838, 3838, 3838, 3838, 3838, 4191, 3838, 3838, 3838,
     3838, 3838, 3838, 3839, 4191, 3839, 3839, 3839, 3839, 3839,
     3839, 3839, 3839, 4191, 4191, 3839, 3839, 3839, 3839, 3839,
     3839, 3839, 3839, 3839, 3839, 3839, 3839, 3839, 4191, 3839,
     3839, 3839, 3839, 3839, 3839, 3841, 4191, 3841, 3841, 3841,
     3841, 3841, 3841, 3841, 3841, 4191, 4191, 3841, 3841, 3841,
     3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841,
     4191, 3841, 3841, 3841, 3841, 3841, 3841, 3861, 4191, 3861,
     3861, 3861, 3861, 3861, 3861, 3861, 3861, 3861, 4191, 3861,

     3861, 3861, 3861, 3861, 3861, 3861, 3861, 3861, 3861, 3861,
     3861, 3861, 4191, 3861, 3861, 3861, 3861, 3861, 3861, 3862,
     4191, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862,
     4191, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862,
     3862, 3862, 3862, 3862, 4191, 3862, 3862, 3862, 3862, 3862,
     3862, 3863, 4191, 3863, 3863, 3863, 3863, 3863, 3863, 3863,
     3863, 4191, 4191, 3863, 3863, 3863, 3863, 3863, 3863, 3863,
     3863, 3863, 3863, 3863, 3863, 3863, 4191, 3863, 3863, 3863,
     3863, 3863, 3863, 3865, 4191, 3865, 3865, 3865, 3865, 3865,
     3865, 3865, 3865, 4191, 4191, 3865, 3865, 3865, 3865, 3865,

     3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 4191, 3865,
     3865, 3865, 3865, 3865, 3865, 3882, 4191, 3882, 3882, 3882,
     3882, 3882, 3882, 3882, 3882, 3882, 4191, 3882, 3882, 3882,
     3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882,
     4191, 3882, 3882, 3882, 3882, 3882, 3882, 3883, 4191, 3883,
     3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 4191, 3883,
     3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883,
     3883, 3883, 4191, 3883, 3883, 3883, 3883, 3883, 3883, 3884,
     4191, 3884, 3884, 3884, 3884, 3884, 3884, 3884, 3884, 4191,
     4191, 3884, 3884, 3884, 3884, 3884, 3884, 3884, 3884, 3884,

     3884, 3884, 3884, 3884, 4191, 3884, 3884, 3884, 3884, 3884,
     3884, 3886, 4191, 3886, 3886, 3886, 3886, 3886, 3886, 3886,
     3886, 4191, 4191, 3886, 3886, 3886, 3886, 3886, 3886, 3886,
     3886, 3886, 3886, 3886, 3886, 3886, 4191, 3886, 3886, 3886,
     3886, 3886, 3886, 3903, 4191, 3903, 3903, 3903, 3903, 3903,
     3903, 3903, 3903, 3903, 4191, 3903, 3903, 3903, 3903, 3903,
     3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 4191, 3903,
     3903, 3903, 3903, 3903, 3903, 3904, 4191, 3904, 3904, 3904,
     3904, 3904, 3904, 3904, 3904, 3904, 4191, 3904, 3904, 3904,
     3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904,

     4191, 3904, 3904, 3904, 3904, 3904, 3904, 3905, 4191, 3905,
     3905, 3905, 3905, 3905, 3905, 3905, 3905, 4191, 4191, 3905,
     3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905,
     3905, 3905, 4191, 3905, 3905, 3905, 3905, 3905, 3905, 3907,
     4191, 3907, 3907, 3907, 3907, 3907, 3907, 3907, 3907, 4191,
     4191, 3907, 3907, 3907, 3907, 3907, 3907, 3907, 3907, 3907,
     3907, 3907, 3907, 3907, 4191, 3907, 3907, 3907, 3907, 3907,
     3907, 3919, 4191, 3919, 3919, 3919, 3919, 3919, 3919, 3919,
     3919, 3919, 4191, 3919, 3919, 3919, 3919, 3919, 3919, 3919,
     3919, 3919, 3919, 3919, 3919, 3919, 4191, 3919, 3919, 3919,

     3919, 3919, 3919, 3920, 4191, 3920, 3920, 3920, 3920, 3920,
     3920, 3920, 3920, 3920, 4191, 3920, 3920, 3920, 3920, 3920,
     3920, 3920, 3920, 3920, 3920, 3920, 3920, 3920, 4191, 3920,
     3920, 3920, 3920, 3920, 3920, 3921, 4191, 3921, 3921, 3921,
     3921, 3921, 3921, 3921, 3921, 4191, 4191, 3921, 3921, 3921,
     3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921,
     4191, 3921, 3921, 3921, 3921, 3921, 3921, 3923, 4191, 3923,
     3923, 3923, 3923, 3923, 3923, 3923, 3923, 4191, 4191, 3923,
     3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923,
     3923, 3923, 4191, 3923, 3923, 3923, 3923, 3923, 3923, 3932,

     4191, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932,
     4191, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932,
     3932, 3932, 3932, 3932, 4191, 3932, 3932, 3932, 3932, 3932,
     3932, 3933, 4191, 3933, 3933, 3933, 3933, 3933, 3933, 3933,
     3933, 3933, 4191, 3933, 3933, 3933, 3933, 3933, 3933, 3933,
     3933, 3933, 3933, 3933, 3933, 3933, 4191, 3933, 3933, 3933,
     3933, 3933, 3933,  275, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191
    } ;

static yyconst flex_int16_t yy_chk[32951] =
    {   0,
        0,    0,    1,    0,    2,    0,    1,    1,    2,    2,
      423,    1,    0,    2,  423,  281,  291,  291,    0,    1,
      281,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,
        5,    5,  290,    5,    5,  422,  422,  290,    5,    6,
        6,    6,    6,   19,    6,    6,    5,   19,   19,    6,
      432,  312,   19,   19,   19,  301,  312,    6,  301,  325,
       19,   33,  432,   20,  325,   33,   33,   20,   20,   19,
       33,   19,   20,   20,   20,   33,  283, 2402,   33,  283,
       20,    5,  310,  310,  310,  310,   33,  283,  821,   20,
      821,   20,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,  526,   16,
      343,   15,   15,   16,   16,  343,   15,  526,   16,  293,
      293,  293,  293,   34,   15,   39,   16,   34,   34,   39,
       39, 2408,   34,  330,   39,  347,  293,   34,  347,  330,
       34,  353,   39,  814,  293,  362,  353,  530,   34,  330,
      362,   39,  295,  295,  295,  295,  530,  814,   15,  295,
       16,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,  854,   24,  370,   23,   23,   24,
       24,  370,   23, 2415,   24,  304,  304,  304,  304,   40,
       23,  390,   24,   40,   40, 1062,  390,  854,   40,   45,
       45,   45,   45,   51,   45,   45,   40,   51,   51,   45,
      304, 1062,   51,   51,   51,   40,  383,   45,  392,  383,
       51,  392,  405,  609,  609, 2416,   23,  405,   24,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   29,   29,   29,   29,  564,   29,   29,  564,  465,
      331,   29,   30,   30,   30,   30,  331,   30,   30,   29,
      413, 2471,   30,   31,  428,  413,  331,   31,   31,  428,

       30,  464,   31,   31,  479,  572,  464,   31,  484,  479,
       31,  420,   32,  484,  420,   89,   32,   32,   31,   89,
       89,   32,   32,  465,   89,  475,   32,  596,  475,   32,
      596,  605,   89,  331,  605,   35,   29,   32,  499,   35,
       35,   36,   29,  499,   35,   36,   36,   30,   29,   35,
       36,  506,   35,   30, 2472,   36,  506,  727,   36,   30,
       35,  572,   46,   46,   46,   46,   36,   46,   46,  512,
      420,  420,   46,   31,  512, 1873,   49,   49,   49,   49,
       46,   49,   49, 2475,  475,  475,   49,   49,   49,  628,
      628,   49,   32,  727,   49,   50,   50,   50,   50,   90,

       50,   50, 1873,   90,   90,   50,   50,   50,   90,  520,
       50,  633,  633,   50,  520,   35,   90,  425,  425,  425,
      425,   36,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       47, 1218,   48,  538,   47,   47,   48,   48,  538,   47,
       47,   48,   48,  549,   47, 1218,   48,   47,  549,   48,

      380,  380,  380,  380,   47,   47,   48,   48,   52,  556,
     2476,   53,   52,   52,  556,   53,   53,   52,   52,   52,
       53, 2478,   54,  641,  566,   52,   54,   54,   53,  566,
      584,   54,  915,   59, 2479,  584,   53,   59,   59,   54,
      598,  608,   59,   59,   60,  598,  608,   54,   60,   60,
       59,  617,  623,   60,   60,  915,  617,  623,   59,   59,
       47,   60,   48,   71,  921, 2480,  632,   71,   71,   60,
       60,  632,   71,   72, 1052,  641,  635,   72,   72,  635,
       71,  380,   72,  285,  285,  285,  285,  921,   71,  635,
       72,   53,  302,  302,  302,  302,  746, 1052,   72,  302,

      746,  285,   54,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   57,
       57,   57,   57,   61,   57,   57,   62,   61,   61,   57,

       62,   62,   61,  593, 1982,   62,  593,   57,  604,  593,
       61,  604,  643,   62,  604,   57,  644,   57, 1077, 1077,
     1982,   63,   63,   63,   63,  107,   63,   63,  640,  107,
      107,   63, 1637,  640,  107,   64,   64,   64,   64,   63,
       64,   64,  107, 2481,   61,   64,   61,   62,   63,   62,
     1637,   57,   63,   64,  305,  305,  305,  305,  658,   57,
      645, 1365,   64,  658,  643, 1365,   64, 2483,  644, 1217,
       57,   58,   58,   58,   58,  647,   58,   58, 1217,  305,
     2484,   58,   65,   65,   65,   65,  670,   65,   65,   58,
     1273,  670,   65,  303,  303,  303,  303,   58,  784,   58,

       65,  784,   63,   63, 1273,   66,   66,   66,   66,   65,
       66,   66,  645,   65, 2485,   66,   64,   64,  303,   67,
       67,   67,   67,   66,   67,   67,   79,  647, 1349,   67,
       79,   79,   66,   58,  678,   79,   66,   67, 1349,  678,
       80,   58,  686,   79,   80,   80,   67,  686,  805,   80,
       67,  805,   58,  306,  306,  306,  306,   80,  818,  986,
      306,  818,  986,   65,   65,   68,   68,   68,   68, 2290,
       68,   68,   81,  694,  303,   68,   81,   81,  694, 1225,
      705,   81, 1225,   68,   81,  705,   66,   66, 1244,   81,
      713, 1244,   68,   82, 2290,  713,   68,   82,   82,  108,

       67,   67,   82,  108,  108,   82,  723,   79,  108,  743,
       82,  723,   91,   91,  743,   91,  108,   91,   91, 1206,
     1206,   80,   91,  756,   81,   91,   92,   92,  756,   92,
       91,   92,   92,  758, 1292, 2486,   92, 1292,  758,   92,
      498,  498,  498,  498,   92,   82,   68,   68,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       75,   75,  763,   75,  772,   75,   75,  763,  781,  772,
       75,   76,   76,  781,   76,   97,   76,   76,   75,   97,
       97,   76, 2487,  794,   97,   97,   97,   75,  794,   76,
     1063,   75,   97, 1063,   77,   77,  806,   77,   76,   77,
       77,  806,   76, 1063,   77,   78,   78, 1262,   78,  845,
       78,   78,   77,   75,  845,   78, 1262,  286,  286,  286,
      286,   77,   83,   78,   76,   77,   83,   83,  724, 1553,
      724,   83,   78,  868,   83,  286,   78, 1302,  868,   83,

     1302,   75,   75,  880, 2304,   84,  724,   77,  880,   84,
       84,  891,   76,   76,   84,   85,  891,   84,   78,   85,
       85, 1272,   84, 1275,   85,  397,  397,  397,  397, 1275,
     1272, 2304,   85,   86,   83,   77,   77,   86,   86, 1275,
       85, 1553,   86,  397,   93,   85,   78,   78,   93,   93,
       86,   87,   87,   93, 2488,   87,   87,   84,   86,  860,
       87,   93,  860,   86,  860,   88,   88,   94,   87,   88,
       88,   94,   94,  822,   88,  822,   94,  548,  548,  548,
      548,   95,   88,   96,   94,   95,   95,   96,   96,  548,
       95, 1643,   96, 1643,  900,   85,   93,   98,   95,  900,

       96,   98,   98,   87, 1534, 1534,   98,   98,   98,  417,
      417,  417,  417,   86,   98, 1544, 1544,   88,  822,   94,
       99,   99,   99,   99,  912,   99,   99,  101,  927,  912,
       99,  101,  101,  927,  417,  823,  101,  823,   99, 1457,
      100,  100,  100,  100,  101,  100,  100,   99, 1457,   99,
      100,  940,  950,  101,  961,  101,  940,  950,  100,  961,
      967,   95,   95,   96,   96,  967,  102,  100,  103,  100,
      102,  102,  103,  103, 2490,  102,  977,  103,  103,  103,
      823,  977,  983,  102,  105,  103,  104,  983,  105,  105,
      104,  104,  102,  105,  102,  104,  104,  104, 1341, 2491,

      106,  105,  995,  104,  106,  106, 1341,  995, 1341,  106,
      109,  109,  109,  109,  133,  109,  109,  106,  133,  133,
      109,  109, 1966,  133,  117,  117,  117,  117,  109,  117,
      117,  133, 1966,  646,  117,  105, 1555,  105,  110,  110,
      110,  110,  117,  110,  110,  646, 1461, 1004,  110,  110,
      646,  106, 1004,  106, 2492, 1461,  110,  111,  111,  111,
      111,  131,  111,  111, 1014,  131,  131,  111,  111, 1014,
      131,  112,  112,  112,  112,  111,  112,  112,  131, 1024,
     2493,  112,  112,  117, 1024,  646, 2494,  131, 1555,  112,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  115, 1191,  116, 1034,
      115,  115,  116,  116, 1034,  115, 2497,  116,  335,  335,
      335,  335, 1191,  115, 2498,  116,  118,  118,  118,  118,

      988,  118,  118,  988, 1191, 2499,  118,  119,  119,  119,
      119,  988,  119,  119,  118,  335, 1041,  119, 1049, 1319,
      119, 1041, 1319, 1049,  119,  119,  120,  120,  120,  120,
     1061,  120,  120, 1546, 1546, 1061,  120,  132,  119,  120,
     1070,  132,  132,  120,  120, 1070,  132,  294,  294,  294,
      294, 1644, 2500, 1644,  132,  118,  115,  120,  116, 2505,
      119,  134, 1076,  132,  294,  134,  134, 1076, 1339,  335,
      134, 1339,  294,  561,  561,  561,  561, 2508,  134,  120,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,

      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  129, 1465,  130, 1085,  129,  129,
      130,  130, 1085,  129, 1465,  130,  418,  418,  418,  418,
      137,  129,  138,  130,  137,  137,  138,  138, 1971,  137,
     1971,  138,  316,  316,  316,  316, 1278,  137, 1971,  138,
     2513,  418, 1278,  316,  141,  137,  142,  138,  141,  141,
      142,  142, 1278,  141, 1096,  142, 1652,  316, 2516, 1096,
      129,  141,  130,  142, 1523,  171,  129, 1105,  130,  171,
      171, 1652, 1105, 1523,  171,  171,  129,  129,  130,  130,

     1347, 2517,  171, 1347,  129,  129,  130,  130,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  145, 1112, 2519,  146,
      145,  145, 1112,  146,  146,  145, 1117,  145,  146, 1127,
      146, 1117, 1491,  145, 1127, 1491,  146,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  149, 1140, 1556,  150,  149,  149, 1140,
      150,  150,  149, 1152,  149,  150, 1161,  150, 1152, 1161,
      149,  151, 2520,  150,  152,  151,  151,  155,  152,  152,

      151,  155,  155,  152, 1160, 1161,  155, 1156,  151, 1160,
     1156,  152, 1332, 1171,  155, 1332, 2521,  151, 1171,  156,
      152,  153,  155,  156,  156,  153,  153, 1556,  156, 1176,
      153, 2522,  153, 2374, 1176, 1156,  156, 2374,  153, 1178,
     1139,  161, 1178, 1139,  156,  161,  161, 1139, 1715, 1139,
      161,  172,  161, 1139, 1189,  172,  172, 1178,  161, 1189,
      172,  172, 1715, 1557, 1184,  173, 1156, 1184,  172,  173,
      173, 1332, 1332, 1190,  173,  161,  173,  153, 1190,  153,
     1182, 2524,  173,  153, 1156, 1530,  161,  161, 1530,  153,
      161, 1184, 1182,  153,  153, 1195,  153, 1182,  153,  154,

     1195, 2529,  162,  154,  154, 2530,  162,  162,  154, 1196,
      154,  162, 2533,  162, 1196, 1557,  154,  174, 1204,  162,
      183,  174,  174, 1204,  183,  183,  174, 1216,  174,  183,
      183, 2535, 1216, 1321,  174,  177,  162,  183, 1321,  177,
      177,  191, 1958, 1958,  177,  191,  191,  162,  162,  177,
      191,  162,  177, 1207, 2536,  154, 1207,  154,  191, 1211,
      177,  154, 1211, 1327, 1329,  191, 1207,  154, 1327, 1329,
     1211,  154,  154, 2538,  154, 2539,  154,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,

      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  167,  167,  167,  167,  184,  167,  167, 2540,  184,
      184,  167,  167,  167,  184,  184,  167,  167, 1528,  167,
      178, 1536,  184, 1528,  178,  178, 1536,  167,  167,  178,
      167,  167,  167, 1194,  178, 1352, 1194,  178,  560,  560,
      560,  560,  167, 1352,  560,  178, 1194,  167, 1352, 1605,
      167, 1194,  179,  167, 1605,  167,  179,  179, 1787, 1609,
     1194,  179,  179,  179,  419,  419,  419,  419, 1609,  179,
     1714,  419, 1900,  398,  398,  398,  398,  167,  179, 1714,

      179, 1900,  167,  167,  168,  168,  168,  168,  192,  168,
      168,  398,  192,  192,  168,  168,  168,  192,  435,  168,
      168, 1541,  168, 1787, 1541,  192,  381,  381,  381,  381,
      168,  168,  192,  168,  168,  168, 2541,  180, 2546, 1541,
     2548,  180,  180,  381, 1607,  168,  180,  180,  180, 1607,
      168,  381, 1787,  168,  180,  243,  168,  205,  168,  243,
      243,  205,  205,  180,  243,  180,  205,  205,  205, 1901,
      435, 2549,  243, 2550,  205, 1617,  435, 2551, 1617,  381,
      168,  435,  435, 1901,  435,  168,  168,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  185, 2006, 2006,  186,  185,
      185, 1345,  186,  186,  185,  185,  185,  186,  186,  186,
     1345, 1583,  185,  197, 2554,  186, 1345,  197,  197,  198,
     2010, 2010,  197,  198,  198,  197, 1212, 2558,  198, 1212,
      197,  198,  373,  373,  373,  373,  198, 1212, 1648,  373,
     1648, 1585,  292,  292,  292,  292,  185, 1583, 2153,  186,

      187,  187,  187,  187, 1263,  187,  187, 1263, 1263,  292,
      187,  187,  187, 1548, 2559,  197, 1548,  292,  187,  199,
     1713,  198, 1263,  199,  199, 1713, 1548, 1585,  199, 1214,
     1648,  199, 1214,  200, 2153, 2562,  199,  200,  200,  201,
     1214,  187,  200,  201,  201,  200,  187,  373,  201,  187,
      200,  201, 1926,  202, 1952,  203,  201,  202,  202,  203,
      203, 1926,  202,  373,  203,  202, 1630,  203, 1952, 1630,
      202,  199,  203,  292, 2565, 2305,  187,  188,  188,  188,
      188, 1642,  188,  188, 1642,  200, 1954,  188,  188,  188,
     1856,  201,  204, 1856,  207,  188,  204,  204,  207,  207,

     1954,  204, 2305,  207,  204,  202, 2525,  203,  208,  204,
      206,  207,  208,  208,  206,  206, 1931,  208,  188,  206,
      206,  206, 1931,  188,  209,  208,  188,  206,  209,  209,
     2406, 2406, 1931,  209,  209,  209,  296,  296,  296,  296,
      296,  209, 2525,  296,  204,  404,  404,  404,  404,  562,
      562,  562,  562,  188,  189,  189,  189,  189, 2523,  189,
      189,  296,  221,  404,  189,  189,  221,  221, 2413, 2413,
     2140,  221,  189,  221,  207,  207, 2523, 1754, 1931,  221,
     1754,  189,  210,  189, 2140, 1869,  210,  210,  208,  208,
     1869,  210,  210,  210, 1466,  189, 2567, 1466, 1466,  210,

      189,  211, 1754,  189,  212,  211,  211, 2570,  212,  212,
      211,  222, 1466,  212, 1779,  222,  222, 1779,  211,  296,
      222,  212,  222,  491,  491,  491,  491, 1779,  222, 2143,
      189,  190,  190,  190,  190,  247,  190,  190,  491,  247,
      247,  190,  190, 2143,  247,  213,  213, 2573,  213,  190,
      213,  213,  247, 1280, 2576,  213,  213,  213,  190, 1280,
      190, 1867,  249,  213, 1867, 1861,  249,  249, 1861, 1280,
     1334,  249,  190,  249, 2581, 1334, 1334,  190, 1334,  249,
      190,  211,  211, 1861,  212,  212,  214,  214, 1867,  214,
     1677,  214,  214, 1677, 2582, 1677,  214,  214,  214,  468,

      468,  468,  468, 1280,  214, 2585,  468,  190,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      215,  215,  215,  215, 1888,  215,  215, 2586, 1951, 1888,
      215,  215,  215,  492,  492,  492,  492, 1951,  215, 1978,

      219,  219,  219,  219, 1978,  219,  219,  215,  492,  215,
      219,  219,  219, 1889, 1960,  219, 1889, 1960,  219,  220,
      220,  220,  220,  227,  220,  220, 1889,  227,  227,  220,
      220,  220,  227, 1442,  220, 1519, 1442,  220, 1519, 1529,
      227, 1519, 1529,  250, 1953, 1529, 1524,  250,  250, 1524,
     1524, 2172,  250, 1953,  250,  215,  216,  216,  216,  216,
      250,  216,  216, 2587, 1524, 2172,  216,  216,  216, 2589,
      521,  521,  521,  521,  216,  227,  223,  223,  223,  223,
     2590,  223,  223,  216, 2591,  216,  223,  223,  223,  521,
     2224,  223, 1442, 1442,  223,  224,  224,  224,  224, 1610,

      224,  224, 1610, 1610, 2224,  224,  224,  224, 2592, 1862,
      224,  251, 1862,  224, 2097,  251,  251, 1610, 1750, 2097,
      251, 1750,  251,  570,  570,  570,  570, 1862,  251, 1750,
      521,  216,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  225, 2593,
     1970,  226,  225,  225,  228,  226,  226,  225,  228,  228,
      226, 1852, 1970,  228, 1852,  225, 1970, 1443,  226,  229,
     1443,  228,  230,  229,  229, 2139,  230,  230,  229, 2285,
     1852,  230, 2285,  231, 2139, 1794,  229,  231,  231,  230,
     2596, 1878,  231,  231,  231,  653,  653,  653,  653,  225,
      231,  225,  226,  232,  226, 1894,  228,  232,  232, 1647,
     2597, 1647,  232,  232,  232, 1894,  466,  466,  466,  466,
      232,  229, 2598,  231,  230, 2599, 1443, 1443,  231,  233,

     1894,  231, 1794,  233,  233,  234, 1878, 2602,  233,  234,
      234,  466, 1894,  232,  234,  252,  233, 1896,  232,  252,
      252,  232,  234, 1647,  252,  233,  252,  233,  231, 2142,
     1794,  234,  252,  234, 2544, 1878, 2544,  235, 2142,  233,
     1855,  235,  235, 1855,  233,  234,  235,  233,  232,  235,
      234, 2603, 2349,  234,  235,  236,  236, 2349,  236, 1855,
      236,  236, 2604, 2605, 1896,  236,  237,  235,  236, 1897,
      237,  237, 1897,  236,  233,  237,  317,  317,  317,  317,
      234, 2607, 1897,  237, 2544, 1918,  236,  317, 1918,  235,
      238, 2608, 1896,  239,  238,  238,  237,  239,  239,  238,

      240,  317,  239, 1918,  240,  240, 2223,  238,  236,  240,
      239,  406,  406,  406,  406, 2223, 2226,  240,  237, 2189,
      238, 2189,  265,  239, 2612, 2226,  265,  265, 2614,  406,
      240,  265,  266,  265,  317, 1836,  266,  266, 1836,  265,
     2615,  266,  238,  266, 1836,  239, 2616, 2617, 1836,  266,
     2618, 2189,  240,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  253, 2188,  254,

     2188,  253,  253,  254,  254, 2634,  253, 2289,  254,  412,
      412,  412,  412,  267,  253,  268,  254,  267,  267,  268,
      268, 2289,  267, 2635,  268, 2636, 2619,  412, 2316,  269,
      267,  270,  268,  269,  269,  270,  270, 2316,  269, 2637,
      270,  414,  414,  414,  414, 2638,  269, 2188,  270, 2412,
      253, 2619,  254,  588,  588,  588,  588, 2518, 2412,  414,
      588,  654,  654,  654,  654, 2639, 2518,  253, 2640,  254,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  259, 2645,  260, 2646,  259,  259,  260,  260,
     2647,  259,  259,  260,  260, 2648, 2537,  271,  271,  259,
      271,  260,  271,  271, 2537, 2247, 2649,  271, 2247, 2650,
      271,  345,  345,  345,  345,  271,  300,  300,  300,  300,
      426,  426,  426,  426,  271, 2651, 1838,  300,  271, 1838,
     2247,  300, 2652,  300, 2093, 1838,  345, 2093,  426, 1838,

      345,  300,  300,  300,  680,  680,  680,  680, 2653, 2654,
      271,  259, 2093,  260,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      263,  263, 2655,  263, 2385,  263,  263, 2385, 2656, 2385,
      263,  264,  264, 2620,  264, 2657,  264,  264,  263, 2302,
     2003,  264, 2302, 2003,  431,  431,  431,  431,  263,  264,
      272,  272, 2302,  272, 2658,  272,  272, 2660, 2620,  264,
      272,  273,  431,  272, 2661,  273,  273,  273,  272, 2504,
      273, 2003, 2504,  273, 2504, 2662, 2663,  272,  273,  263,
     2600,  272,  297,  297,  297,  297, 2625,  273, 2600,  297,
      264,  273, 2625, 2003, 2324,  263, 2622,  263, 2664,  297,
     2324,  263, 2625,  272, 2303, 2622,  264, 2303,  264, 2665,
     2324, 2666,  264,  273,  273,  274,  274, 2303,  274, 2667,

      274,  274,  274, 2668, 2669,  274, 2670, 2671,  274,  318,
      318,  318,  318,  274,  307,  307,  307,  307,  307, 2672,
      318,  307,  274, 2673, 2324, 2545,  274, 2545,  424,  424,
      424,  424, 2674, 2579,  318,  424, 2579,  424, 2579,  307,
     2675,  424, 2676, 2677, 2678,  297, 2679, 2680,  274,  274,
     2682, 2683, 2684,  424,  436,  436,  436,  436, 2677,  467,
      467,  467,  467,  471,  471,  471,  471, 2681, 2685, 2687,
      318,  472,  472,  472,  472, 2545, 2681,  472, 2688,  436,
     2692,  436, 2693,  424,  467, 2699, 2700, 2702,  471,  472,
      471,  681,  681,  681,  681, 2725, 2726,  307,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374, 2750,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
     2751,  374,  374,  374,  375,  375,  375,  375, 2765, 2766,
     2767,  375,  421,  421,  421,  421,  421, 2768, 2769,  421,

      437,  437,  437,  437,  440,  440,  440,  440,  473,  473,
      473,  473,  441,  441,  441,  441, 2770,  421,  442,  442,
      442,  442, 2771, 2772, 2773,  437,  473,  437, 2774,  440,
     2775,  440,  445,  445,  445,  445, 2778,  441, 2779,  441,
     2780, 2781, 2783,  442, 2785,  442, 2791, 2792, 2793,  375,
     2796,  443,  443,  443,  443, 2797,  437,  445, 2804,  445,
      440,  586,  586,  586,  586,  375,  416,  416,  416,  416,
      441, 1884,  416, 2805, 1884,  421,  443, 2806,  443,  444,
      444,  444,  444, 2808, 1884,  442,  586, 2809,  442, 1884,
     2810,  416,  446,  446,  446,  446, 2811,  416, 1884,  587,

      587,  587,  587, 2812,  444,  445,  444,  688,  688,  688,
      688,  416,  443, 2813, 2814, 2815,  443,  446,  416,  446,
     2816, 2817,  416,  416,  587,  416,  416,  416, 2818, 2820,
     2818,  416,  416,  416,  416,  416, 2822,  416,  444,  416,
      416,  416,  416,  416,  447,  447,  447,  447,  444,  448,
      448,  448,  448,  446, 2004, 2824,  444, 2004,  444,  449,
      449,  449,  449, 2825,  450,  450,  450,  450, 2826,  447,
     2821,  447, 2828, 2821,  448, 2829,  448, 2831, 2832,  451,
      451,  451,  451, 2833,  449, 2004,  449, 1851, 2834,  450,
     1851,  450,  452,  452,  452,  452,  453,  453,  453,  453,

      474,  474,  474,  474,  451,  448,  451, 2004,  454,  454,
      454,  454, 2819,  447, 2819, 1851, 2835,  452,  474,  452,
     2836,  453, 2837,  453,  449,  450,  455,  455,  455,  455,
     2838, 2839, 2841,  454,  450,  454,  451, 2842, 2843, 2844,
      450, 2845,  456,  456,  456,  456, 1851,  457,  457,  457,
      457,  455, 2819,  455, 2847, 2848, 2849,  453, 2850,  469,
      469,  469,  469,  469, 1851,  452,  469,  456,  452,  456,
     2851, 2852,  457,  454,  457,  478,  478,  478,  478,  489,
      489,  489,  489,  454,  469, 2853, 2854,  455,  577,  577,
      577,  577, 2855,  478, 2856, 2857, 2858,  489,  533,  533,

      533,  533, 2859, 2860,  457,  577,  455,  534,  534,  534,
      534,  456,  457,  577, 2861, 2862,  456,  457,  540,  540,
      540,  540,  578,  578,  578,  578,  533,  589,  589,  589,
      589,  589, 2863, 2864,  589,  534, 2865,  540, 2866,  578,
     2868, 2866,  469,  515,  515,  515,  515,  578,  591,  591,
      591,  591,  589, 2870,  603,  603,  603,  603, 2872,  515,
      533, 2873,  610,  610,  610,  610, 2874, 2875,  533,  534,
     2876,  515,  603,  591, 2877, 2878, 2879,  534,  540,  578,
      610,  689,  689,  689,  689,  708,  708,  708,  708,  709,
      709,  709,  709,  716,  716,  716,  716, 2880, 2881, 2877,

      515, 2882,  515, 2883, 2884,  515,  717,  717,  717,  717,
      589, 2885,  515,  515, 2891, 2892,  515,  515,  515, 2893,
      515,  730,  730,  730,  730,  733,  733,  733,  733,  734,
      734,  734,  734,  735,  735,  735,  735, 2895,  730,  766,
      766,  766,  766, 2898,  708, 2899, 2900, 2901,  709,  771,
      771,  771,  771,  773,  773,  773,  773,  766,  785,  785,
      785,  785,  797,  797,  797,  797, 2867,  771, 2903, 2867,
     2904,  773,  799,  799,  799,  799, 2902, 2867,  733,  797,
      836,  836,  836,  836, 2905, 2902,  734, 2906, 2907, 2909,
      735,  837,  837,  837,  837, 2911, 2914,  799,  836,  843,

      843,  843,  843,  846,  846,  846,  846, 2915, 2916,  837,
     2917,  856,  856,  856,  856, 2918, 1373,  843,  856, 1373,
     1373,  846,  857,  857,  857,  857, 2920, 2921, 2919,  857,
      858,  858,  858,  858, 1373, 2919, 2922,  858,  859,  859,
      859,  859, 2923,  862,  862,  862,  862, 1373, 2924, 2925,
      862,  859,  862, 2926, 2927, 2928,  862,  863,  863,  863,
      863, 2929, 2005, 2930,  863, 2005,  863, 2931, 2932, 1373,
      863,  864,  864,  864,  864, 2933, 2934, 2937,  864, 2936,
      864, 2938, 2939, 2940,  864,  865,  865,  865,  865, 2943,
     2946, 2967,  865, 2005,  865, 2968, 2990, 2991,  865,  867,

      867,  867,  867,  869,  869,  869,  869,  871,  871,  871,
      871,  882,  882,  882,  882, 2005, 3006,  867, 3007, 3009,
     3010,  869,  882,  884,  884,  884,  884,  885,  885,  885,
      885,  886,  886,  886,  886, 3011,  882, 3013,  886, 3014,
      882, 3015,  889,  889,  889,  889,  889, 3016,  884,  889,
     3019, 2936,  885,  893,  893,  893,  893, 3020, 3026,  871,
      899,  899,  899,  899, 3027, 3030, 3034,  889,  902,  902,
      902,  902,  899,  905,  905,  905,  905, 3035,  893,  902,
      906,  906,  906,  906,  911,  911,  911,  911,  997,  997,
      997,  997, 3036, 3039,  902,  998,  998,  998,  998, 3040,

     3041, 3042,  911, 1023, 1023, 1023, 1023, 1026, 1026, 1026,
     1026, 3044, 3046, 3048, 1023, 1027, 1027, 1027, 1027, 3050,
      902, 2007, 1026, 2008, 2007,  889, 2008, 3051, 3052, 1023,
     1027, 1033, 1033, 1033, 1033, 1064, 1064, 1064, 1064, 2007,
     3049, 1071, 1071, 3049, 1071, 3053, 1071, 3049, 1064, 1071,
     1071, 3054, 2007, 1064, 2008, 1023, 3047, 3055, 3047, 1071,
     3055, 1071, 1121, 1121, 1121, 1121, 3056, 3057, 3058, 1121,
     1122, 1122, 1122, 1122, 2007, 3059, 2008, 1122, 1129, 1129,
     1129, 1129, 3060, 3061, 1023, 1131, 1131, 1131, 1131, 3062,
     1129, 3063, 1131, 1129, 1132, 1132, 1132, 1132, 3047, 3064,

     3065, 1132, 1134, 1134, 1134, 1134, 1143, 1143, 1143, 1143,
     3066, 3067, 3068, 1134, 1121, 1144, 1144, 1144, 1144, 1192,
     3069, 3070, 1122, 1145, 1145, 1145, 1145, 3071, 3072, 3073,
     1145, 1143, 1148, 1148, 1148, 1148, 1148, 3074, 3078, 1148,
     1144, 1154, 1154, 1154, 1154, 3080, 3075, 1192, 1192, 3075,
     1192, 3081, 1192, 3082, 3083, 1192, 1192, 1148, 1235, 1235,
     1235, 1235, 1193, 3084, 3085, 1192, 1154, 1192, 1193, 1193,
     3087, 1193, 3088, 1193, 3089, 1235, 1193, 1193, 1208, 1208,
     1208, 1208, 1215, 1215, 1215, 1215, 1193, 3076, 1193, 3090,
     3076, 1208, 1221, 1221, 1221, 1221, 1208, 3091, 3076, 3092,

     1215, 1222, 1222, 1222, 1222, 1223, 1223, 1223, 1223, 1221,
     1372, 3093, 1223, 1372, 1372, 1148, 3096, 1221, 1222, 3099,
     3101, 3106, 1223, 1372, 3107, 3108, 1222, 1226, 1226, 1226,
     1226, 3109, 3110, 3111, 1226, 1227, 1227, 1227, 1227, 3112,
     3113, 1372, 1227, 1228, 1228, 1228, 1228, 1229, 1229, 1229,
     1229, 3114, 3115, 1446, 1228, 3116, 1446, 1446, 1228, 1230,
     1230, 1230, 1230, 1372, 3118, 3120, 1230, 3122, 3123, 1228,
     1228, 1446, 1229, 1221, 1232, 1232, 1232, 1232, 3125, 1233,
     1233, 1233, 1233, 3127, 1446, 1232, 1233, 3128, 1223, 1232,
     3130, 1232, 1261, 1261, 1261, 1261, 1233, 3131, 3133, 1232,

     1232, 1232, 1234, 1234, 1234, 1234, 1446, 3134, 3135, 1234,
     1236, 1236, 1236, 1236, 3136, 3137, 3139, 1236, 3142, 1234,
     1237, 1237, 1237, 1237, 1237, 3143, 3146, 1237, 3145, 1238,
     1238, 1238, 1238, 3147, 1245, 1245, 1245, 1245, 3148, 3150,
     1238, 1245, 3165, 3145, 1238, 1237, 1238, 3166, 1241, 1241,
     1241, 1241, 3170, 3171, 1238, 1238, 1238, 3175, 3197, 1241,
     3198, 3199, 1233, 1241, 3207, 1241, 3208, 3213, 3214, 1246,
     1246, 1246, 1246, 1241, 1241, 1241, 1246, 3218, 1247, 1247,
     1247, 1247, 3219, 3221, 3222, 1234, 3223, 2199, 3228, 1247,
     2199, 3229, 3232, 1247, 1248, 1248, 1248, 1248, 1249, 1249,

     1249, 1249, 3235, 1237, 1247, 1247, 1252, 1252, 1252, 1252,
     1253, 1253, 1253, 1253, 1255, 1255, 1255, 1255, 2199, 1248,
     3236, 1255, 3237, 1249, 3238, 1256, 1256, 1256, 1256, 3239,
     3240, 1252, 1256, 3241, 3242, 1253, 1257, 1257, 1257, 1257,
     2199, 1258, 1258, 1258, 1258, 3243, 3245, 1257, 1258, 1260,
     1260, 1260, 1260, 3248, 1264, 1264, 1264, 1264, 1264, 3249,
     1260, 1264, 1266, 1266, 1266, 1266, 1268, 1268, 1268, 1268,
     3250, 3252, 3254, 1266, 1260, 1248, 3255, 1268, 3256, 1264,
     3257, 1269, 1269, 1269, 1269, 1663, 3258, 1266, 1663, 1663,
     3259, 1268, 1269, 1270, 1270, 1270, 1270, 1284, 1284, 1284,

     1284, 3260, 3251, 1663, 1270, 3251, 1269, 1289, 1289, 1289,
     1289, 3261, 1297, 1297, 1297, 1297, 1663, 3262, 1270, 1297,
     1298, 1298, 1298, 1298, 1284, 3263, 3264, 1298, 1299, 1299,
     1299, 1299, 1289, 3253, 3265, 1299, 3253, 1264, 1663, 1300,
     1300, 1300, 1300, 1301, 1301, 1301, 1301, 3244, 3266, 3244,
     1270, 1309, 1309, 1309, 1309, 1269, 1300, 3267, 1309, 3246,
     1301, 3268, 3246, 3271, 1300, 3272, 3246, 3273, 1301, 1306,
     1306, 1306, 1306, 1312, 1312, 1312, 1312, 1297, 1284, 1325,
     1325, 1325, 1325, 3244, 3274, 1298, 1306, 1326, 1326, 1326,
     1326, 3275, 3276, 1297, 1306, 3277, 3279, 2601, 1312, 3281,

     2601, 1298, 3282, 3283, 2601, 1326, 2601, 3284, 3285, 1299,
     2601, 1301, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 3289, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 3293, 1303, 1303, 1303, 1305, 1305,

     1305, 1305, 3294, 3295, 3296, 1305, 1307, 1307, 1307, 1307,
     1308, 1308, 1308, 1308, 1310, 1310, 1310, 1310, 3297, 1314,
     1314, 1314, 1314, 1307, 3298, 3300, 3301, 1308, 3302, 3303,
     3305, 1307, 3306, 3307, 3309, 1308, 1314, 1328, 1328, 1328,
     1328, 3311, 3312, 3319, 1314, 1331, 1331, 1331, 1331, 1353,
     1353, 1353, 1353, 3322, 3321, 1328, 1353, 1354, 1354, 1354,
     1354, 3325, 3326, 1308, 1354, 1355, 1355, 1355, 1355, 3321,
     1331, 3331, 1314, 3332, 1307, 1359, 1359, 1359, 1359, 1305,
     1371, 1371, 1371, 1371, 1356, 3334, 3335, 1356, 1362, 1362,
     1362, 1362, 1355, 3350, 3354, 1310, 1330, 1330, 1330, 1330,

     1359, 3355, 1330, 1356, 1356, 1356, 1356, 1356, 1356, 1360,
     1360, 1360, 1360, 1362, 3359, 1362, 1360, 1381, 1381, 1381,
     1381, 1330, 1366, 1366, 1366, 1366, 3360, 1330, 1381, 1366,
     3361, 1366, 3363, 3383, 1381, 1366, 1441, 1441, 1441, 1441,
     3358, 1330, 1441, 1356, 1356, 3384, 3390, 1366, 1330, 3358,
     3391, 3395, 1330, 1330, 1441, 1330, 1330, 1330, 3396, 3397,
     3407, 1330, 1330, 1330, 1330, 1330, 3410, 1330, 3411, 1330,
     1330, 1330, 1330, 1330, 3412, 3414, 3416, 1366, 1367, 1367,
     1367, 1367, 3417, 3419, 3420, 1367, 3422, 1367, 3423, 2077,
     3424, 1367, 2077, 1368, 1368, 1368, 1368, 1370, 1370, 1370,

     1370, 3427, 1368, 1367, 1368, 3428, 1368, 3429, 3430, 1370,
     1370, 1376, 1376, 1376, 1376, 1376, 2077, 3431, 1376, 3432,
     2077, 3433, 1370, 3434, 1370, 3435, 1382, 1382, 1382, 1382,
     3436, 3437, 3438, 1367, 3441, 3442, 1376, 1382, 1383, 1383,
     1383, 1383, 2077, 1382, 1387, 1387, 1387, 1387, 1368, 1383,
     1384, 1384, 1384, 1384, 3443, 1383, 3445, 1385, 1385, 1385,
     1385, 1384, 1386, 1386, 1386, 1386, 3446, 1384, 1385, 1387,
     3447, 1387, 3448, 1386, 1385, 1388, 1388, 1388, 1388, 1386,
     1392, 1392, 1392, 1392, 1390, 1390, 1390, 1390, 1393, 1393,
     1393, 1393, 3449, 1382, 1376, 1394, 1394, 1394, 1394, 3455,

     1388, 3439, 1388, 3456, 3439, 3425, 1383, 1383, 3425, 1390,
     3457, 1390, 3439, 1393, 3459, 1393, 1449, 1449, 1449, 1449,
     1394, 1384, 1394, 1386, 3460, 3425, 3425, 1390, 1390, 3440,
     1385, 1390, 3440, 1385, 3462, 1395, 1395, 1395, 1395, 3463,
     3464, 1392, 3467, 1396, 1396, 1396, 1396, 1397, 1397, 1397,
     1397, 1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399, 1393,
     1395, 3468, 1395, 1400, 1400, 1400, 1400, 3471, 1396, 1394,
     1396, 3476, 1397, 3479, 1397, 3480, 1398, 3481, 1398, 3483,
     1399, 3484, 1399, 1401, 1401, 1401, 1401, 3485, 1400, 3490,
     1400, 3503, 1395, 1402, 1402, 1402, 1402, 1403, 1403, 1403,

     1403, 3504, 1396, 1404, 1404, 1404, 1404, 3508, 1401, 1397,
     1401, 3509, 1396, 1406, 1406, 1406, 1406, 3510, 1402, 1399,
     1402, 3511, 1403, 3528, 1403, 1398, 3531, 3532, 1404, 3531,
     1404, 1405, 1405, 1405, 1405, 3534, 3535, 3537, 1406, 1400,
     1406, 3550, 3555, 3556, 1401, 1429, 1429, 1429, 1429, 3557,
     3558, 3559, 1402, 3563, 3560, 3560, 1405, 3560, 1405, 3564,
     3561, 3561, 1403, 3561, 1402, 3565, 3566, 3567, 1402, 3568,
     1429, 3569, 1404, 1406, 1407, 1407, 1407, 1407, 1408, 1408,
     1408, 1408, 1409, 1409, 1409, 1409, 1410, 1410, 1410, 1410,
     1405, 1411, 1411, 1411, 1411, 3570, 1405, 3571, 1405, 1407,

     3572, 1407, 3576, 1408, 3577, 1408, 1405, 1409, 3578, 1409,
     3579, 1410, 2202, 1410, 3575, 2202, 1411, 3575, 1411, 1412,
     1412, 1412, 1412, 1413, 1413, 1413, 1413, 1415, 1415, 1415,
     1415, 3580, 1407, 1414, 1414, 1414, 1414, 1416, 1416, 1416,
     1416, 3581, 1409, 2202, 1412, 3586, 1412, 3587, 1413, 3590,
     1413, 3593, 1415, 1408, 1415, 3595, 3603, 3604, 1414, 1411,
     1414, 1410, 1416, 3605, 1416, 2202, 1417, 1417, 1417, 1417,
     3608, 1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 3609,
     3622, 1413, 3626, 3627, 1412, 1431, 1431, 1431, 1431, 1412,
     1415, 1417, 1431, 1417, 1416, 1414, 1418, 3628, 1418, 3629,

     1419, 3636, 1419, 3637, 3652, 1414, 1420, 1420, 1420, 1420,
     1416, 1421, 1421, 1421, 1421, 3653, 1422, 1422, 1422, 1422,
     1423, 1423, 1423, 1423, 3654, 1432, 1432, 1432, 1432, 3655,
     3660, 1420, 1432, 1420, 1417, 3661, 1421, 3664, 1421, 3665,
     1419, 1422, 1418, 1422, 3670, 1423, 3671, 1423, 1433, 1433,
     1433, 1433, 1434, 1434, 1434, 1434, 3672, 3662, 3673, 1434,
     3662, 1436, 1436, 1436, 1436, 1437, 1437, 1437, 1437, 1437,
     1445, 1420, 1437, 1445, 1445, 1433, 3674, 3675, 1421, 1438,
     1438, 1438, 1438, 1445, 3676, 3677, 1436, 1423, 1436, 1422,
     1437, 1439, 1439, 1439, 1439, 1448, 1448, 1448, 1448, 3663,

     3678, 1445, 3663, 3681, 1438, 3574, 1438, 3682, 3574, 3683,
     1448, 1450, 1450, 1450, 1450, 3684, 1439, 3574, 1439, 1453,
     1453, 1453, 1453, 1445, 1464, 1464, 1464, 1464, 1467, 1467,
     1467, 1467, 1468, 1468, 1468, 1468, 3685, 3689, 1453, 1482,
     1482, 1482, 1482, 1485, 1485, 1485, 1485, 1467, 1437, 1451,
     1451, 1451, 1451, 3666, 3666, 1485, 3666, 1486, 1486, 1486,
     1486, 1490, 1490, 1490, 1490, 1451, 3695, 1482, 1486, 1489,
     1489, 1489, 1489, 1493, 3696, 1489, 1493, 1451, 3701, 1453,
     1495, 1495, 1495, 1495, 1486, 3702, 1662, 3706, 1467, 1662,
     1662, 3707, 1493, 1493, 1493, 1493, 1493, 1493, 3708, 1662,

     3709, 1482, 1496, 1496, 1496, 1496, 1451, 3715, 1451, 1482,
     3716, 1451, 1500, 1500, 1500, 1500, 3717, 1662, 1451, 1451,
     3719, 3720, 1451, 1451, 1451, 3737, 1451, 1502, 1502, 1502,
     1502, 1503, 1503, 1503, 1503, 1504, 1504, 1504, 1504, 1662,
     3573, 3738, 1504, 3573, 1502, 3741, 3668, 3668, 1503, 3668,
     2078, 3573, 1502, 2078, 3742, 3745, 1503, 1505, 1505, 1505,
     1505, 1507, 1507, 1507, 1507, 1508, 1508, 1508, 1508, 1510,
     1510, 1510, 1510, 3746, 1505, 3747, 1510, 2078, 1507, 3748,
     3749, 2078, 1505, 3750, 3751, 3679, 1507, 1500, 3679, 3752,
     1508, 1511, 1511, 1511, 1511, 3753, 3754, 3679, 1511, 1513,

     1513, 1513, 1513, 2078, 3755, 3756, 1513, 1515, 1515, 1515,
     1515, 1516, 1516, 1516, 1516, 1516, 3760, 3763, 1516, 1517,
     1517, 1517, 1517, 1522, 1522, 1522, 1522, 1520, 3743, 1507,
     1520, 3743, 1515, 3764, 3765, 3743, 1516, 1527, 1527, 1527,
     1527, 3768, 3769, 3770, 1517, 3775, 1520, 1520, 1520, 1520,
     1520, 1520, 3776, 3777, 3792, 1527, 1535, 1535, 1535, 1535,
     1559, 1559, 1559, 1559, 1566, 1566, 1566, 1566, 1567, 1567,
     1567, 1567, 3795, 3800, 1535, 1572, 1572, 1572, 1572, 1576,
     1576, 1576, 1576, 1586, 1586, 1586, 1586, 1587, 1587, 1587,
     1587, 3801, 3802, 3803, 1516, 1588, 1588, 1588, 1588, 3804,

     1586, 3805, 1588, 3806, 1587, 3807, 3810, 3811, 1588, 1589,
     1589, 1589, 1589, 1590, 1590, 1590, 1590, 1591, 1591, 1591,
     1591, 3812, 1592, 1592, 1592, 1592, 1589, 3814, 1593, 1593,
     1593, 1593, 3815, 3816, 1572, 1593, 1594, 1594, 1594, 1594,
     1606, 1606, 1606, 1606, 1618, 1618, 1618, 1618, 1623, 1623,
     1623, 1623, 3821, 3822, 3831, 1606, 3834, 3837, 3838, 1624,
     1624, 1624, 1624, 3839, 3744, 3796, 1590, 3744, 3796, 3840,
     1591, 3744, 3796, 1623, 1591, 1592, 1624, 1626, 1626, 1626,
     1626, 1627, 1627, 1627, 1627, 1660, 1660, 1660, 1660, 1671,
     1671, 1671, 1671, 1594, 3841, 3842, 1671, 1672, 1672, 1672,

     1672, 3845, 2405, 3846, 1672, 2405, 1627, 1673, 1673, 1673,
     1673, 1674, 1674, 1674, 1674, 1676, 1676, 1676, 1676, 3798,
     1673, 3849, 3798, 3850, 1674, 1618, 3798, 3852, 1676, 1679,
     1679, 1679, 1679, 2405, 2009, 3853, 1679, 2009, 1679, 3857,
     3860, 3861, 1679, 1680, 1680, 1680, 1680, 2009, 3862, 3863,
     1680, 3864, 1680, 3865, 3866, 2405, 1680, 1681, 1681, 1681,
     1681, 3869, 3870, 3874, 1681, 2009, 1681, 3878, 3881, 3882,
     1681, 1682, 1682, 1682, 1682, 1683, 1683, 1683, 1683, 1684,
     1684, 1684, 1684, 1687, 1687, 1687, 1687, 2009, 1688, 1688,
     1688, 1688, 3883, 3884, 1687, 1688, 1690, 1690, 1690, 1690,

     3885, 1688, 1692, 1692, 1692, 1692, 3886, 3887, 1687, 1692,
     1693, 1693, 1693, 1693, 3891, 3902, 3903, 1693, 3904, 3905,
     3906, 1690, 3907, 1682, 3908, 3919, 3920, 1683, 3921, 3922,
     3923, 1684, 1695, 1695, 1695, 1695, 3924, 3928, 3929, 1695,
     1697, 1697, 1697, 1697, 1698, 1698, 1698, 1698, 1698, 3932,
     3933, 1698, 1699, 1699, 1699, 1699, 1700, 1700, 1700, 1700,
     1701, 1701, 1701, 1701, 3938, 1697, 2399, 2390, 1700, 1698,
     2387, 1701, 1702, 1702, 1702, 1702, 2386, 1699, 1709, 1709,
     1709, 1709, 2384, 1702, 1711, 1711, 1711, 1711, 1712, 1712,
     1712, 1712, 1737, 1737, 1737, 1737, 4263, 4274, 1702, 1742,

     1742, 1742, 1742, 2383, 4263, 4274, 1712, 1745, 1745, 1745,
     1745, 1748, 1748, 1748, 1748, 1749, 2382, 4276, 1749, 1752,
     1752, 1752, 1752, 2381, 1702, 4276, 2380, 1698, 1758, 1758,
     1758, 1758, 2379, 2378, 1749, 1749, 1749, 1749, 1749, 1749,
     1760, 1760, 1760, 1760, 1764, 1764, 1764, 1764, 2377, 4275,
     4279, 1760, 1765, 1765, 1765, 1765, 4275, 4281, 4279, 1764,
     1766, 1766, 1766, 1766, 4275, 4281, 1760, 1780, 1780, 1780,
     1780, 1781, 1781, 1781, 1781, 1818, 1818, 1818, 1818, 4283,
     1780, 4286, 1818, 1819, 1819, 1819, 1819, 4283, 2376, 4286,
     1819, 4288, 1760, 1820, 1820, 1820, 1820, 1822, 1822, 1822,

     1822, 1823, 1823, 1823, 1823, 1820, 4301, 4288, 1820, 1822,
     2375, 2373, 1822, 1823, 4301, 4288, 1823, 1824, 1824, 1824,
     1824, 1760, 1826, 1826, 1826, 1826, 4293, 1818, 1828, 1828,
     1828, 1828, 2372, 2371, 1826, 1819, 4280, 1826, 1829, 1829,
     1829, 1829, 4293, 4280, 4303, 1829, 1830, 1830, 1830, 1830,
     4293, 4280, 4303, 1830, 1831, 1831, 1831, 1831, 1832, 1832,
     1832, 1832, 1833, 1833, 1833, 1833, 2370, 2369, 2409, 1832,
     2368, 2409, 2367, 1833, 1835, 1835, 1835, 1835, 1841, 1841,
     1841, 1841, 2366, 4282, 4294, 1835, 1843, 1843, 1843, 1843,
     4282, 2365, 2364, 1843, 1844, 1844, 1844, 1844, 4282, 2409,

     4294, 1844, 4308, 1841, 1846, 1846, 1846, 1846, 4294, 2363,
     4308, 1846, 1848, 1848, 1848, 1848, 1849, 1849, 1849, 1849,
     1849, 2409, 2362, 1849, 1850, 1850, 1850, 1850, 2361, 1898,
     1898, 1898, 1898, 1899, 1899, 1899, 1899, 1848, 2360, 2359,
     4284, 1849, 1898, 1903, 1903, 1903, 1903, 4284, 4320, 1850,
     1904, 1904, 1904, 1904, 1903, 4284, 4320, 2358, 1903, 2357,
     4302, 1904, 2356, 2355, 2354, 1904, 2353, 4302, 2352, 1903,
     1903, 1905, 1905, 1905, 1905, 4302, 1904, 1904, 1906, 1906,
     1906, 1906, 1905, 2351, 2350, 2348, 1905, 1907, 1907, 1907,
     1907, 2030, 2030, 2030, 2030, 1906, 1905, 1905, 1905, 1849,

     1908, 1908, 1908, 1908, 1907, 2347, 4304, 1908, 1909, 1909,
     1909, 1909, 2346, 4304, 4323, 1909, 1911, 1911, 1911, 1911,
     1911, 4304, 4323, 1911, 1912, 1912, 1912, 1912, 4325, 1913,
     1913, 1913, 1913, 2343, 2342, 1912, 4325, 2339, 2338, 1912,
     1913, 1911, 1914, 1914, 1914, 1914, 1915, 1915, 1915, 1915,
     1912, 1912, 2030, 1914, 2337, 4327, 4329, 1915, 1921, 1921,
     1921, 1921, 1921, 4327, 4329, 1921, 2336, 1923, 1923, 1923,
     1923, 1915, 2335, 1924, 1924, 1924, 1924, 4332, 1923, 1933,
     1933, 1933, 1933, 1921, 1924, 4332, 1932, 1932, 1932, 1932,
     1932, 2334, 1923, 1932, 2332, 2328, 1933, 2323, 1924, 1911,

     1934, 1934, 1934, 1934, 1933, 1935, 1935, 1935, 1935, 2322,
     4334, 1932, 1935, 1936, 1936, 1936, 1936, 1934, 4334, 2314,
     1936, 1937, 1937, 1937, 1937, 1934, 1940, 1940, 1940, 1940,
     2306, 4337, 2301, 1940, 1956, 1956, 1956, 1956, 1950, 4337,
     1924, 1921, 1923, 2300, 2299, 2298, 1937, 1950, 1950, 1950,
     1950, 1957, 1957, 1957, 1957, 1957, 2297, 2295, 1957, 1956,
     1988, 1988, 1988, 1988, 1989, 1989, 1989, 1989, 2294, 1932,
     2291, 1934, 1955, 1955, 1955, 1955, 1957, 2288, 1955, 2287,
     2286, 1994, 1994, 1994, 1994, 1990, 2282, 1988, 1990, 2281,
     1994, 1989, 1994, 2280, 1994, 2274, 2273, 1955, 1997, 1997,

     1997, 1997, 2272, 1955, 1990, 1990, 1990, 1990, 1990, 1990,
     1997, 1997, 2090, 2090, 2090, 2090, 2271, 1955, 2270, 1996,
     1996, 1996, 1996, 1997, 1955, 2269, 1996, 2079, 1955, 1955,
     2079, 1955, 1955, 1955, 1957, 2267, 1994, 1955, 1955, 1955,
     1955, 1955, 2264, 1955, 1996, 1955, 1955, 1955, 1955, 1955,
     1995, 1995, 1995, 1995, 2079, 2263, 4340, 1995, 2079, 1995,
     2262, 4343, 2261, 1995, 4340, 1998, 1998, 1998, 1998, 4343,
     1999, 1999, 1999, 1999, 2260, 1995, 1998, 1999, 2259, 2257,
     2079, 2256, 1999, 2000, 2000, 2000, 2000, 2012, 2012, 2012,
     2012, 2012, 2255, 2254, 2012, 2000, 2000, 2252, 2015, 2015,

     2015, 2015, 2250, 4345, 2249, 1995, 2248, 2244, 2000, 2015,
     2000, 4345, 2012, 2018, 2018, 2018, 2018, 2019, 2019, 2019,
     2019, 4347, 2242, 4349, 2018, 4362, 2240, 2238, 2019, 4347,
     2018, 4349, 2236, 4362, 2019, 2020, 2020, 2020, 2020, 2021,
     2021, 2021, 2021, 4364, 2234, 2200, 2020, 4376, 2200, 4384,
     2021, 4364, 2020, 2232, 2230, 4376, 2021, 4384, 2022, 2022,
     2022, 2022, 2023, 2023, 2023, 2023, 2229, 2227, 2225, 2022,
     2012, 2221, 2200, 2023, 2019, 2022, 2200, 2219, 2208, 2023,
     2024, 2024, 2024, 2024, 2025, 2025, 2025, 2025, 2207, 2205,
     2204, 2024, 4321, 2411, 2201, 2025, 2411, 2024, 2200, 4321,

     4387, 2025, 2096, 2096, 2096, 2096, 2020, 4321, 4387, 2027,
     2027, 2027, 2027, 2197, 2021, 2195, 2028, 2028, 2028, 2028,
     2029, 2029, 2029, 2029, 2411, 2194, 2193, 2023, 2032, 2032,
     2032, 2032, 2023, 2022, 2027, 2192, 2027, 4330, 2024, 2191,
     2190, 2028, 2027, 2028, 4330, 2029, 2411, 2029, 2033, 2033,
     2033, 2033, 4330, 2032, 2187, 2032, 2025, 2186, 2185, 2029,
     2184, 2183, 2028, 2034, 2034, 2034, 2034, 2035, 2035, 2035,
     2035, 2182, 2181, 2033, 2180, 2033, 2036, 2036, 2036, 2036,
     2037, 2037, 2037, 2037, 2038, 2038, 2038, 2038, 2034, 2179,
     2034, 4389, 2035, 4335, 2035, 2039, 2039, 2039, 2039, 4389,

     4335, 2036, 4392, 2036, 2032, 2037, 2178, 2037, 4335, 2038,
     4392, 2038, 2177, 2040, 2040, 2040, 2040, 2176, 2175, 2174,
     2039, 4338, 2039, 2033, 2041, 2041, 2041, 2041, 4338, 2042,
     2042, 2042, 2042, 2171, 2035, 2170, 4338, 2034, 2040, 4399,
     2040, 2043, 2043, 2043, 2043, 2037, 2169, 4399, 2165, 2041,
     2036, 2041, 2164, 2158, 2042, 2038, 2042, 2044, 2044, 2044,
     2044, 2045, 2045, 2045, 2045, 2039, 2043, 4385, 2043, 2046,
     2046, 2046, 2046, 2047, 2047, 2047, 2047, 2048, 2048, 2048,
     2048, 2040, 2044, 4385, 2044, 2151, 2045, 4403, 2045, 4417,
     2042, 4385, 4346, 2041, 2046, 4403, 2046, 4417, 2047, 4346,

     2047, 2150, 2048, 2149, 2048, 2148, 4348, 4346, 2043, 2049,
     2049, 2049, 2049, 4348, 2050, 2050, 2050, 2050, 2044, 2147,
     4350, 4348, 2045, 2051, 2051, 2051, 2051, 4350, 2146, 4426,
     2046, 4363, 2145, 4390, 2049, 4350, 2049, 4426, 4363, 2050,
     2047, 2050, 2052, 2052, 2052, 2052, 4363, 2144, 2051, 4390,
     2051, 2141, 2048, 2053, 2053, 2053, 2053, 4390, 2054, 2054,
     2054, 2054, 2055, 2055, 2055, 2055, 2136, 2052, 4448, 2052,
     2056, 2056, 2056, 2056, 2049, 2050, 4448, 2134, 2053, 2127,
     2053, 4378, 2051, 2054, 2126, 2054, 2119, 2055, 4378, 2055,
     2117, 2057, 2057, 2057, 2057, 2056, 4378, 2056, 2058, 2058,

     2058, 2058, 2113, 2059, 2059, 2059, 2059, 4386, 2060, 2060,
     2060, 2060, 4453, 4455, 4386, 2052, 2057, 2053, 2057, 2055,
     4453, 4455, 4386, 2058, 4460, 2058, 2110, 2109, 2059, 2108,
     2059, 2056, 4460, 2060, 2054, 2060, 2061, 2061, 2061, 2061,
     2062, 2062, 2062, 2062, 2106, 2105, 2104, 2063, 2063, 2063,
     2063, 2064, 2064, 2064, 2064, 2065, 2065, 2065, 2065, 2103,
     2102, 2061, 2100, 2061, 4388, 2062, 2099, 2062, 2057, 2058,
     2059, 4388, 2063, 2058, 2063, 2098, 2064, 2095, 2064, 4388,
     2065, 2089, 2065, 2066, 2066, 2066, 2066, 2088, 2067, 2067,
     2067, 2067, 2068, 2068, 2068, 2068, 2069, 2069, 2069, 2069,

     4430, 2087, 2086, 2070, 2070, 2070, 2070, 2085, 2066, 2062,
     2066, 2084, 2061, 2067, 2083, 2067, 4430, 2068, 2082, 2068,
     2081, 2069, 2063, 2069, 4430, 2073, 2065, 2064, 2070, 2072,
     2070, 2031, 2071, 2071, 2071, 2071, 2074, 2074, 2074, 2074,
     2075, 2075, 2075, 2075, 2066, 2076, 2076, 2076, 2076, 2076,
     2017, 2014, 2076, 2080, 2013, 2002, 2080, 2071, 2067, 2071,
     4473, 2068, 4391, 2074, 4365, 4365, 2080, 2075, 4473, 4391,
     2076, 4365, 2069, 2101, 2101, 2101, 2101, 4391, 2070, 4365,
     2080, 2001, 1992, 4431, 2080, 2107, 2107, 2107, 2107, 2071,
     2111, 2111, 2111, 2111, 2114, 2114, 2114, 2114, 1991, 4431,

     2114, 2111, 2115, 2115, 2115, 2115, 2080, 4431, 4515, 2120,
     2107, 2116, 1987, 1986, 2116, 1985, 4515, 2111, 2120, 2120,
     2120, 2120, 2121, 2121, 2121, 2121, 1984, 1983, 2076, 4440,
     2116, 2116, 2116, 2116, 2116, 2116, 2123, 2123, 2123, 2123,
     2128, 2128, 2128, 2128, 4544, 4440, 1981, 2128, 2129, 2129,
     2129, 2129, 4544, 4440, 4441, 2129, 2130, 2130, 2130, 2130,
     2131, 2131, 2131, 2131, 2133, 2133, 2133, 2133, 2133, 4393,
     4441, 2133, 4428, 2130, 1980, 4548, 4393, 2131, 4441, 4428,
     4562, 2130, 2137, 4548, 4393, 2131, 1979, 4428, 4562, 2133,
     1977, 2137, 2137, 2137, 2137, 2154, 2154, 2154, 2154, 1976,

     4433, 1975, 2154, 2155, 2155, 2155, 2155, 4433, 2154, 4485,
     2155, 2157, 2157, 2157, 2157, 4433, 2155, 2159, 2159, 2159,
     2159, 2131, 1974, 1973, 2159, 4485, 4566, 4586, 2157, 2160,
     2160, 2160, 2160, 4485, 4566, 4586, 2160, 2161, 2161, 2161,
     2161, 2167, 2167, 2167, 2167, 1972, 1969, 2133, 2168, 2168,
     2168, 2168, 2198, 4570, 2203, 1968, 2167, 2203, 1967, 1965,
     1964, 2198, 2198, 2198, 2198, 2210, 2210, 2210, 2210, 4570,
     1963, 4587, 2210, 2211, 2211, 2211, 2211, 4570, 2210, 4587,
     2211, 2203, 1962, 1961, 1959, 2203, 2211, 2212, 2212, 2212,
     2212, 2213, 2213, 2213, 2213, 2216, 2216, 2216, 2216, 2216,

     2212, 2222, 2216, 2217, 2217, 2217, 2217, 2203, 1949, 4594,
     2222, 2222, 2222, 2222, 2217, 2233, 2213, 4594, 2246, 2237,
     2216, 2246, 1947, 2241, 2233, 2233, 2233, 2233, 2237, 2237,
     2237, 2237, 2241, 2241, 2241, 2241, 2245, 2246, 2246, 2246,
     2246, 2246, 2246, 2253, 1946, 2245, 2245, 2245, 2245, 1945,
     1944, 1943, 2253, 2253, 2253, 2253, 2275, 2275, 2275, 2275,
     2276, 2276, 2276, 2276, 2277, 2277, 2277, 2277, 2275, 4628,
     1942, 2275, 2278, 2278, 2278, 2278, 1941, 4628, 2216, 2279,
     2279, 2279, 2279, 2284, 2284, 2284, 2284, 2284, 4434, 1939,
     2284, 2309, 2309, 2309, 2309, 4434, 2310, 2310, 2310, 2310,

     1930, 4663, 2309, 4434, 1925, 1922, 2309, 2310, 2284, 4663,
     1920, 2310, 2326, 2326, 2326, 2326, 2309, 2309, 2309, 2326,
     1902, 2310, 2310, 2310, 2312, 2312, 2312, 2312, 2329, 2329,
     2329, 2329, 1895, 1886, 4609, 2312, 2331, 2331, 2331, 2331,
     2333, 2333, 2333, 2333, 4435, 2341, 1885, 2333, 1883, 2312,
     4609, 4435, 4687, 2329, 2341, 2341, 2341, 2341, 4609, 4435,
     4687, 2331, 2477, 2477, 2477, 2477, 2284, 2293, 2293, 2293,
     2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293,
     2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293,
     2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293,

     2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293,
     2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293,
     2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293,
     2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293,
     2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293,
     2293, 2293, 2293, 2318, 2318, 2318, 2318, 2319, 2319, 2319,
     2319, 1882, 1881, 1880, 2318, 1879, 1877, 4704, 2319, 2325,
     2325, 2325, 2325, 2325, 4454, 4704, 2325, 1876, 2318, 1875,
     4711, 4454, 2319, 2327, 2327, 2327, 2327, 2327, 4711, 4454,
     2327, 1874, 1868, 1865, 2325, 2330, 2330, 2330, 2330, 2345,

     2345, 2345, 2345, 1864, 2388, 2388, 2388, 2388, 2327, 1863,
     1860, 2388, 2330, 2388, 4728, 4789, 1859, 2388, 2319, 1858,
     2330, 1857, 4728, 4789, 2345, 1854, 2318, 4442, 1853, 2388,
     2389, 2389, 2389, 2389, 4442, 1842, 4442, 2389, 4462, 2389,
     1840, 4633, 4442, 2389, 1839, 4462, 1827, 2391, 2391, 2391,
     2391, 1821, 2325, 4462, 1817, 2389, 4463, 4633, 1814, 2388,
     1813, 1809, 2330, 4463, 1808, 4633, 2327, 2344, 2344, 2344,
     2344, 4463, 2391, 2344, 2391, 2392, 2392, 2392, 2392, 1803,
     1797, 1793, 2392, 1792, 1791, 2389, 2393, 2393, 2393, 2393,
     1790, 1789, 2344, 2393, 2489, 2489, 2489, 2489, 2344, 2395,

     2395, 2395, 2395, 1788, 2394, 2394, 2394, 2394, 1786, 1785,
     2395, 1778, 2344, 1777, 1773, 4472, 2394, 1772, 1757, 2344,
     1755, 1747, 4472, 2344, 2344, 1744, 2344, 2344, 2344, 2394,
     4472, 2394, 2344, 2344, 2344, 2344, 2344, 1741, 2344, 1736,
     2344, 2344, 2344, 2344, 2344, 2397, 2397, 2397, 2397, 1726,
     1725, 1724, 2397, 2398, 2398, 2398, 2398, 2397, 2400, 1720,
     2398, 1719, 1718, 2400, 4645, 2398, 2495, 2495, 2495, 2495,
     2400, 2400, 2400, 2400, 2400, 2400, 2401, 2401, 2401, 2401,
     4645, 1717, 1716, 2401, 1710, 2401, 1706, 1691, 4645, 2401,
     2403, 2403, 2403, 2403, 2418, 2418, 2418, 2418, 4766, 1689,

     4767, 2401, 2403, 1686, 1685, 2418, 2419, 2419, 2419, 2419,
     1670, 2418, 1669, 1668, 4766, 2403, 4767, 2419, 2420, 2420,
     2420, 2420, 4766, 2419, 4767, 2421, 2421, 2421, 2421, 2420,
     1659, 2401, 1654, 1653, 1651, 2420, 2421, 2422, 2422, 2422,
     2422, 1646, 2421, 1645, 2423, 2423, 2423, 2423, 2422, 2424,
     2424, 2424, 2424, 1641, 2422, 2423, 2425, 2425, 2425, 2425,
     2424, 2423, 2502, 2502, 2502, 2502, 2424, 2425, 2502, 2427,
     2427, 2427, 2427, 2425, 1640, 1639, 2426, 2426, 2426, 2426,
     2419, 2429, 2429, 2429, 2429, 2420, 2421, 2426, 2428, 2428,
     2428, 2428, 1638, 2426, 2427, 4761, 2427, 2482, 2482, 2482,

     2482, 4761, 2422, 4482, 1636, 4490, 2429, 1635, 2429, 2427,
     4482, 1634, 4490, 2428, 1633, 2428, 1625, 4761, 4482, 2429,
     4490, 2423, 2482, 2425, 2424, 4761, 2430, 2430, 2430, 2430,
     1603, 2428, 2431, 2431, 2431, 2431, 2432, 2432, 2432, 2432,
     2433, 2433, 2433, 2433, 2434, 2434, 2434, 2434, 1602, 4493,
     1601, 2430, 2426, 2430, 1600, 4495, 4493, 2431, 1599, 2431,
     1598, 2432, 4495, 2432, 4493, 2433, 1595, 2433, 1584, 2434,
     4495, 2434, 1582, 2435, 2435, 2435, 2435, 1581, 1580, 2436,
     2436, 2436, 2436, 1574, 2430, 1573, 2438, 2438, 2438, 2438,
     2439, 2439, 2439, 2439, 2594, 2594, 1571, 2433, 2435, 2594,

     2435, 4501, 2594, 2594, 2436, 2431, 2436, 1570, 4501, 1549,
     2432, 2438, 2594, 2438, 2594, 2439, 4501, 2439, 1545, 2434,
     2501, 2501, 2501, 2501, 2503, 2503, 2503, 2503, 2507, 1543,
     1542, 2501, 2528, 2528, 2528, 2528, 1533, 2507, 2507, 2507,
     2507, 1525, 2435, 1521, 2436, 2437, 2437, 2437, 2437, 2437,
     2437, 2437, 2437, 2437, 2437, 2437, 2437, 2437, 2437, 2437,
     2437, 2437, 2437, 2437, 2437, 2439, 1509, 2438, 1506, 1501,
     1498, 2437, 1494, 2437, 2437, 2437, 2437, 2437, 2440, 2440,
     2440, 2440, 2441, 2441, 2441, 2441, 2442, 2442, 2442, 2442,
     1484, 2443, 2443, 2443, 2443, 4502, 1483, 4503, 2437, 2437,

     2437, 2437, 4502, 2440, 4503, 2440, 1481, 2441, 1480, 2441,
     4502, 2442, 4503, 2442, 1479, 1478, 2443, 1477, 2443, 2444,
     2444, 2444, 2444, 2445, 2445, 2445, 2445, 2437, 2437, 2437,
     2437, 2446, 2446, 2446, 2446, 1476, 2447, 2447, 2447, 2447,
     2448, 2448, 2448, 2448, 2444, 1475, 2444, 2441, 2445, 2440,
     2445, 2449, 2449, 2449, 2449, 1474, 2446, 1473, 2446, 2442,
     2443, 2447, 1472, 2447, 1471, 2448, 1469, 2448, 2450, 2450,
     2450, 2450, 2531, 2531, 2531, 2531, 2449, 1462, 2449, 2451,
     2451, 2451, 2451, 2452, 2452, 2452, 2452, 2453, 2453, 2453,
     2453, 1460, 2444, 2450, 1459, 2450, 4514, 1458, 1456, 2445,

     1455, 2446, 1454, 4514, 2451, 2447, 2451, 1452, 2452, 1430,
     2452, 4514, 2453, 2448, 2453, 2454, 2454, 2454, 2454, 1428,
     1427, 2449, 1391, 1389, 1378, 2450, 2455, 2455, 2455, 2455,
     2456, 2456, 2456, 2456, 2457, 2457, 2457, 2457, 2621, 2621,
     2454, 1377, 2454, 2621, 1369, 2453, 2621, 2621, 1358, 2451,
     2452, 2455, 1357, 2455, 1351, 2456, 2621, 2456, 2621, 2457,
     1350, 2457, 1348, 2458, 2458, 2458, 2458, 2459, 2459, 2459,
     2459, 2460, 2460, 2460, 2460, 2461, 2461, 2461, 2461, 2462,
     2462, 2462, 2462, 2455, 2463, 2463, 2463, 2463, 2458, 2454,
     2458, 2456, 2459, 1346, 2459, 2457, 2460, 1344, 2460, 1343,

     2461, 1342, 2461, 1340, 2462, 1338, 2462, 2515, 1337, 2463,
     1336, 2463, 2464, 2464, 2464, 2464, 2515, 2515, 2515, 2515,
     2465, 2465, 2465, 2465, 1335, 1333, 2459, 4522, 2458, 1324,
     1323, 4536, 2461, 1322, 4522, 1320, 2460, 2464, 4536, 2464,
     1318, 2459, 4522, 2463, 2462, 2465, 4536, 2465, 2466, 2466,
     2466, 2466, 2556, 2556, 2556, 2556, 2467, 2467, 2467, 2467,
     2468, 2468, 2468, 2468, 1317, 2469, 2469, 2469, 2469, 2470,
     2470, 2470, 2470, 2466, 1316, 2466, 1315, 2556, 1313, 2464,
     2465, 2467, 1290, 2467, 1281, 2468, 1279, 2468, 1277, 2465,
     2469, 1276, 2469, 1265, 2470, 1254, 2470, 2510, 2510, 2510,

     2510, 2511, 2511, 2511, 2511, 1250, 2512, 2512, 2512, 2512,
     2526, 2526, 2526, 2526, 2510, 1224, 1220, 2466, 2511, 2467,
     1205, 2468, 2510, 2512, 2553, 1203, 2511, 2526, 1181, 1180,
     1179, 2512, 1177, 2553, 2553, 2553, 2553, 2555, 2555, 2555,
     2555, 2469, 2561, 1164, 2470, 2557, 2557, 2557, 2557, 2569,
     2555, 2561, 2561, 2561, 2561, 2572, 1163, 1162, 2569, 2569,
     2569, 2569, 2575, 1153, 2572, 2572, 2572, 2572, 1141, 1130,
     2557, 2575, 2575, 2575, 2575, 2578, 1119, 1111, 1104, 2584,
     2512, 1089, 1079, 1060, 2578, 2578, 2578, 2578, 2584, 2584,
     2584, 2584, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,

     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2623, 2623,
     2623, 2623, 2624, 2624, 2624, 2624, 1051, 1050, 1013, 2623,
     1007, 4523, 4523, 2624, 2626, 2626, 2626, 2626, 4523, 1006,

     1005, 2626,  982, 2623,  974,  966, 4523, 2624, 2627, 2627,
     2627, 2627,  958,  949,  939, 2627, 2629, 2629, 2629, 2629,
     2631, 2631, 2631, 2631, 2631,  933,  928, 2631, 2632, 2632,
     2632, 2632,  920,  919,  914, 2623, 4543, 2633, 2633, 2633,
     2633, 2629, 2624, 4543,  913, 2631, 2644, 2644, 2644, 2644,
      909, 4543, 4546, 2632, 2633, 2659, 2659, 2659, 2659, 4546,
      903, 4547, 2633, 2689, 2689, 2689, 2689, 4546, 4547,  892,
     2689, 2644, 2690, 2690, 2690, 2690, 4547, 2694, 2694, 2694,
     2694,  881,  852,  851, 2691, 2691, 2691, 2691, 2689, 2694,
      850, 2713, 2713, 2713, 2713, 4791,  849, 2690, 2633,  848,

      847, 4791, 2694, 2631, 2643, 2643, 2643, 2643,  844, 2691,
     2643, 2691, 2695, 2695, 2695, 2695, 2713, 4791, 2713, 2776,
     2776, 2776, 2776, 4550, 2695, 4791,  840, 2713, 2697, 2643,
     4550,  830,  829, 2697,  828, 2643, 2659, 2695, 4550, 2695,
     2697, 2697, 2697, 2697, 2697, 2697,  827,  816,  815, 2643,
      813, 2704, 2704, 2704, 2704,  812, 2643,  811,  810, 4565,
     2643, 2643, 2704, 2643, 2643, 2643, 4565,  809, 2704, 2643,
     2643, 2643, 2643, 2643, 4565, 2643,  778, 2643, 2643, 2643,
     2643, 2643, 2698, 2777, 2777, 2777, 2777, 2698,  753, 2705,
     2705, 2705, 2705,  747, 2698, 2698, 2698, 2698, 2698, 2698,

     2705, 2706, 2706, 2706, 2706,  745, 2705,  744, 2707, 2707,
     2707, 2707, 2706, 2708, 2708, 2708, 2708,  721, 2706, 2707,
     2709, 2709, 2709, 2709, 2708, 2707, 2714, 2714, 2714, 2714,
     2708, 2709, 2710, 2710, 2710, 2710,  714, 2709,  699, 2711,
     2711, 2711, 2711, 2710, 2712, 2712, 2712, 2712,  698, 2710,
     2711, 2714,  639, 2714,  627, 2712, 2711, 2715, 2715, 2715,
     2715, 2712, 2706, 2705, 2716, 2716, 2716, 2716,  616,  600,
     2714, 2717, 2717, 2717, 2717,  599,  597, 2709,  590,  568,
      567, 2707, 2715, 2708, 2715, 2718, 2718, 2718, 2718, 2716,
      565, 2716,  551, 2710,  542,  541, 2717,  531, 2717, 2715,

      529,  528, 2710,  527, 2711, 2719, 2719, 2719, 2719, 2712,
     2718,  525, 2718, 2720, 2720, 2720, 2720, 2721, 2721, 2721,
     2721, 2722, 2722, 2722, 2722,  524,  523,  519, 2717,  470,
     2719, 2716, 2719, 2724, 2724, 2724, 2724,  438, 2720,  434,
     2720,  430, 2721,  429, 2721,  395, 2722,  393, 2722, 2727,
     2727, 2727, 2727, 2784, 2784, 2784, 2784,  391, 2724,  382,
     2724, 2728, 2728, 2728, 2728, 4792, 2718, 2730, 2730, 2730,
     2730, 4792,  378,  344, 2727,  333, 2727,  315, 2721, 2719,
     2731, 2731, 2731, 2731,  313,  298, 2728, 4792, 2728,  275,
     2722,    0, 2730,    0, 2730, 4792,    0, 2732, 2732, 2732,

     2732, 2733, 2733, 2733, 2733, 2731,    0, 2731,    0, 2734,
     2734, 2734, 2734, 2735, 2735, 2735, 2735,    0, 4563, 4563,
     2728,    0, 2732,    0, 2732, 4563, 2733,    0, 2733, 2789,
     2789, 2789, 2789, 4563, 2734, 2728, 2734,    0, 2735,    0,
     2735, 2736, 2736, 2736, 2736,    0, 2737, 2737, 2737, 2737,
     2738, 2738, 2738, 2738,    0, 2731, 2732, 2739, 2739, 2739,
     2739, 2740, 2740, 2740, 2740, 4545, 2736,    0, 2736, 2734,
     2733, 2737, 4545, 2737,    0, 2738,    0, 2738, 2735, 4545,
        0,    0, 2739,    0, 2739,    0, 2740, 4545, 2740, 2741,
     2741, 2741, 2741, 2742, 2742, 2742, 2742, 2743, 2743, 2743,

     2743, 2736, 2744, 2744, 2744, 2744, 2745, 2745, 2745, 2745,
     4577, 2738,    0,    0, 2741, 2737, 2741, 4577, 2742, 2739,
     2742,    0, 2743,    0, 2743, 4577, 2739, 2744,    0, 2744,
        0, 2745, 2740, 2745, 2746, 2746, 2746, 2746, 2747, 2747,
     2747, 2747,    0, 2748, 2748, 2748, 2748, 2749, 2749, 2749,
     2749,    0,    0, 2742, 2752, 2752, 2752, 2752, 2743, 2746,
     4608, 2746, 2741, 2747,    0, 2747,    0, 4608, 2748, 2744,
     2748,    0, 2749,    0, 2749, 4608,    0, 2745,    0, 2752,
        0, 2752,    0, 2753, 2753, 2753, 2753, 2754, 2754, 2754,
     2754, 2755, 2755, 2755, 2755, 2756, 2756, 2756, 2756,    0,

     4588,    0, 2748,    0,    0, 4588, 2749, 4588, 2753, 2746,
     2753, 2747, 2754,    0, 2754, 4588, 2755,    0, 2755,    0,
     2756,    0, 2756, 2800, 2800, 2800, 2800, 2752, 2757, 2757,
     2757, 2757,    0, 2758, 2758, 2758, 2758, 2759, 2759, 2759,
     2759, 4614, 2760, 2760, 2760, 2760, 2754,    0, 4614,    0,
     2753,    0, 2756, 2757,    0, 2757, 4614,    0, 2758,    0,
     2758,    0, 2759,    0, 2759,    0, 2755, 2760,    0, 2760,
     2761, 2761, 2761, 2761, 2762, 2762, 2762, 2762, 2763, 2763,
     2763, 2763, 2782, 2782, 2782, 2782,    0, 4596,    0, 2757,
     2758,    0,    0, 2782, 4596, 2761, 4596, 2761,    0, 2762,

        0, 2762, 4596, 2763,    0, 2763, 2786, 2786, 2786, 2786,
     2788, 2788, 2788, 2788,    0,    0, 2788, 2786, 2759, 2795,
     2795, 2795, 2795, 2801, 2801, 2801, 2801, 2827, 2827, 2827,
     2827, 2762,    0,    0, 2827,    0, 2795,    0,    0,    0,
     2827,    0,    0, 2763, 2795, 2761, 2886, 2886, 2886, 2886,
     2887, 2887, 2887, 2887,    0,    0, 2782, 2886,    0,    0,
        0, 2887, 2889, 2889, 2889, 2889, 2889,    0,    0, 2889,
        0, 2886,    0,    0,    0, 2887, 2890, 2890, 2890, 2890,
     2894, 2894, 2894, 2894, 4623, 4626,    0, 2889, 2801,    0,
     2795, 4623, 4626, 2890, 2897, 2897, 2897, 2897,    0, 4623,

     4626, 2890,    0,    0,    0, 2886, 2908, 2908, 2908, 2908,
     2910, 2910, 2910, 2910, 2912, 2912, 2912, 2912,    0, 2897,
     2913, 2913, 2913, 2913,    0,    0,    0, 2935, 2935, 2935,
     2935, 2887, 2941, 2941, 2941, 2941,    0,    0,    0, 2941,
     2944, 2944, 2944, 2944, 2890, 2889, 2896, 2896, 2896, 2896,
        0, 4595, 2896, 4595, 2942, 2942, 2942, 2942,    0, 4641,
     4595, 2942,    0, 2942,    0, 2944, 4641, 2942, 4595,    0,
        0, 2896,    0, 2912, 4641,    0,    0, 2896,    0, 2942,
        0,    0, 2947, 2947, 2947, 2947,    0, 2908, 2912,    0,
        0, 2896,    0, 2947, 3008, 3008, 3008, 3008, 2896, 2947,

        0,    0, 2896, 2896,    0, 2896, 2896, 2896, 2935, 2942,
        0, 2896, 2896, 2896, 2896, 2896,    0, 2896,    0, 2896,
     2896, 2896, 2896, 2896, 2948, 2948, 2948, 2948, 2949, 2949,
     2949, 2949,    0,    0,    0, 2948,    0,    0,    0, 2949,
        0, 2948,    0,    0,    0, 2949, 2950, 2950, 2950, 2950,
     2951, 2951, 2951, 2951,    0,    0,    0, 2950,    0,    0,
        0, 2951,    0, 2950,    0,    0,    0, 2951, 2952, 2952,
     2952, 2952, 2953, 2953, 2953, 2953,    0,    0,    0, 2952,
        0,    0,    0, 2953,    0, 2952,    0,    0,    0, 2953,
     2949,    0, 2948, 2954, 2954, 2954, 2954, 2955, 2955, 2955,

     2955,    0,    0,    0, 2954,    0,    0,    0, 2955,    0,
     2954,    0,    0,    0, 2955, 2950, 2956, 2956, 2956, 2956,
     2957, 2957, 2957, 2957,    0, 2951,    0, 2952,    0,    0,
        0, 2953, 2958, 2958, 2958, 2958, 2959, 2959, 2959, 2959,
        0, 2956,    0, 2956,    0, 2957,    0, 2957,    0,    0,
     2956,    0, 2954,    0,    0,    0, 2957, 2958,    0, 2958,
        0, 2959,    0, 2959, 2958, 2960, 2960, 2960, 2960,    0,
     2955, 2961, 2961, 2961, 2961, 2963, 2963, 2963, 2963, 2964,
     2964, 2964, 2964, 2965, 2965, 2965, 2965,    0, 4659, 4659,
     2960,    0, 2960,    0, 2965, 4659, 2961,    0, 2961,    0,

     2963, 2959, 2963, 4659, 2964,    0, 2964,    0, 2965,    0,
     2965,    0, 2966, 2966, 2966, 2966, 2969, 2969, 2969, 2969,
     2970, 2970, 2970, 2970, 2960, 2971, 2971, 2971, 2971, 4660,
        0, 2964, 3017, 3017, 3017, 3017, 4660, 2966, 2964, 2966,
     2964, 2969,    0, 2969, 4660, 2970,    0, 2970,    0, 2963,
     2971,    0, 2971, 2964,    0, 2964, 2972, 2972, 2972, 2972,
        0, 2972,    0,    0, 2973, 2973, 2973, 2973, 2974, 2974,
     2974, 2974, 2975, 2975, 2975, 2975, 2976, 2976, 2976, 2976,
        0, 2972,    0, 2972,    0, 2970,    0, 2966,    0, 2973,
     2971, 2973,    0, 2974,    0, 2974,    0, 2975,    0, 2975,

        0, 2976,    0, 2976, 2977, 2977, 2977, 2977,    0, 2978,
     2978, 2978, 2978, 2979, 2979, 2979, 2979, 2980, 2980, 2980,
     2980, 2981, 2981, 2981, 2981, 4549,    0, 2974,    0, 2977,
     4665, 2977, 4549, 2975, 2978,    0, 2978, 4665, 2979, 4549,
     2979,    0, 2980, 2976, 2980, 4665, 2981, 4549, 2981, 2982,
     2982, 2982, 2982, 2983, 2983, 2983, 2983, 2984, 2984, 2984,
     2984, 4653, 2985, 2985, 2985, 2985, 2978,    0, 4653,    0,
     2979,    0, 4654,    0, 2982, 4653, 2982,    0, 2983, 4654,
     2983,    0, 2984, 4653, 2984,    0, 4654, 2985,    0, 2985,
     2986, 2986, 2986, 2986, 4654, 2987, 2987, 2987, 2987,    0,

        0, 2981, 2988, 2988, 2988, 2988,    0, 2989, 2989, 2989,
     2989, 2992, 2992, 2992, 2992, 2986,    0, 2986, 2984, 2985,
     2987,    0, 2987, 2982,    0,    0,    0, 2988, 4668, 2988,
        0,    0, 2989, 4668, 2989, 4668, 2992,    0, 2992, 2993,
     2993, 2993, 2993, 4668, 2994, 2994, 2994, 2994,    0,    0,
        0, 2986, 2989, 2995, 2995, 2995, 2995, 2996, 2996, 2996,
     2996,    0,    0,    0, 2993,    0, 2993,    0,    0, 2994,
     2987, 2994, 2992, 2997, 2997, 2997, 2997, 2988, 2995,    0,
     2995, 2989, 2996,    0, 2996, 2998, 2998, 2998, 2998, 2999,
     2999, 2999, 2999, 3001, 3001, 3001, 3001,    0, 2997,    0,

     2997, 3002, 3002, 3002, 3002,    0, 3003, 3003, 3003, 3003,
     2998,    0, 2998, 2993, 2999,    0, 2999,    0, 3001,    0,
     3001, 3004, 3004, 3004, 3004,    0, 3002,    0, 3002,    0,
        0, 3003, 2996, 3003, 2995, 2997, 3005, 3005, 3005, 3005,
     3012, 3012, 3012, 3012,    0,    0, 3004,    0, 3004,    0,
        0, 3012,    0, 2998, 3018, 3018, 3018, 3018,    0,    0,
     3002, 3005,    0, 3005,    0, 3021, 3021, 3021, 3021, 3022,
     3022, 3022, 3022,    0,    0, 3002, 3021,    0, 3023, 3023,
     3023, 3023, 3025, 3025, 3025, 3025, 3003, 4691, 3004, 3023,
     3028, 3028, 3028, 3028, 4691,    0, 3028, 3029, 3029, 3029,

     3029,    0, 4691, 3005, 3031, 3031, 3031, 3031, 3033, 3033,
     3033, 3033, 4700, 4727, 3012, 3094, 3094, 3094, 3094, 4700,
     4727, 3031, 3095, 3095, 3095, 3095, 3094, 4700, 4727, 3031,
        0, 4741,    0, 3095, 3098, 3098, 3098, 3098, 4741,    0,
     3094, 3100, 3100, 3100, 3100,    0, 4741, 3095,    0,    0,
        0, 3098, 3102, 3102, 3102, 3102,    0,    0,    0, 3098,
        0, 3031, 3103, 3103, 3103, 3103, 3104, 3104, 3104, 3104,
        0, 3105, 3105, 3105, 3105, 3033, 3117, 3117, 3117, 3117,
     3119, 3119, 3119, 3119, 3121, 3121, 3121, 3121,    0,    0,
     3094, 3124, 3124, 3124, 3124, 3098, 3105, 3126, 3126, 3126,

     3126,    0,    0, 3095, 3129, 3129, 3129, 3129, 3132, 3132,
     3132, 3132, 3138, 3138, 3138, 3138, 3140, 3140, 3140, 3140,
     3141, 3141, 3141, 3141, 3144, 3144, 3144, 3144,    0, 3129,
        0,    0, 3119, 3151, 3151, 3151, 3151, 3138,    0, 3119,
        0, 3119,    0,    0, 3151, 3159, 3159, 3159, 3159,    0,
     3151,    0,    0,    0, 3119,    0, 3119, 3138, 3152, 3152,
     3152, 3152, 3153, 3153, 3153, 3153,    0,    0,    0, 3152,
     3159,    0, 3159, 3153,    0, 3152,    0, 4756,    0, 3153,
     3154, 3154, 3154, 3154, 4756,    0, 3138, 3155, 3155, 3155,
     3155, 3154, 4756, 3159, 3151,    0,    0, 3154, 3155,    0,

        0, 3141,    0,    0, 3155, 3156, 3156, 3156, 3156, 3157,
     3157, 3157, 3157,    0,    0, 3152, 3156,    0,    0, 3153,
     3157,    0, 3156,    0,    0,    0, 3157, 3158, 3158, 3158,
     3158, 3160, 3160, 3160, 3160,    0,    0,    0, 3158,    0,
        0, 3154,    0,    0, 3158, 3161, 3161, 3161, 3161, 3162,
     3162, 3162, 3162, 4768, 4774,    0, 3160,    0, 3160,    0,
     4768, 4774, 3155,    0, 3163, 3163, 3163, 3163, 4768, 4774,
     3161,    0, 3161,    0, 3162, 3156, 3162, 3160, 3164, 3164,
     3164, 3164, 3167, 3167, 3167, 3167, 3161,    0, 3158, 3163,
        0, 3163,    0, 3167, 3168, 3168, 3168, 3168,    0, 3168,

        0,    0,    0, 3164, 3168, 3164,    0, 3167,    0, 3167,
     3169, 3169, 3169, 3169,    0, 3172, 3172, 3172, 3172, 3173,
     3173, 3173, 3173, 3162, 3174, 3174, 3174, 3174,    0, 3174,
     3176, 3176, 3176, 3176,    0, 3169, 4675, 3169, 4675, 3163,
     3172, 4775, 3172, 4797, 3173, 4675, 3173,    0, 4775, 3174,
     4797, 3174,    0, 4675,    0, 3176, 4775, 3176, 4797, 3177,
     3177, 3177, 3177, 3179, 3179, 3179, 3179, 3184, 3184, 3184,
     3184, 3169, 3180, 3180, 3180, 3180, 4798,    0, 3182, 3182,
     3182, 3182,    0, 4798, 3177, 3172, 3177,    0, 3179, 3176,
     3179, 4798, 3184,    0, 3173,    0,    0, 3180,    0, 3180,

        0,    0,    0, 3182, 3176, 3182, 3176, 3178, 3178, 3178,
     3178, 3178, 3178, 3178, 3178, 3178, 3178, 3178, 3178, 3178,
     3178, 3178, 3178, 3178, 3178, 3178, 3178, 3181, 3181, 3181,
     3181,    0,    0, 3178,    0, 3178, 3178, 3178, 3178, 3178,
        0,    0,    0, 3179,    0, 3182, 3183, 3183, 3183, 3183,
        0,    0, 3181,    0, 3181, 3185, 3185, 3185, 3185,    0,
     3178, 3178, 3178, 3178, 3178, 3212, 3212, 3212, 3212,    0,
        0, 3183,    0, 3183, 3186, 3186, 3186, 3186,    0,    0,
     3185,    0, 3185,    0,    0,    0, 3181,    0,    0, 3178,
     3178, 3178, 3178, 3187, 3187, 3187, 3187,    0,    0, 3186,

        0, 3186, 3188, 3188, 3188, 3188, 3189, 3189, 3189, 3189,
     3190, 3190, 3190, 3190, 3191, 3191, 3191, 3191, 3187,    0,
     3187, 3192, 3192, 3192, 3192,    0,    0, 3188,    0, 3188,
        0, 3189,    0, 3189,    0, 3190,    0, 3190,    0, 3191,
        0, 3191, 3193, 3193, 3193, 3193, 3192,    0, 3192, 3194,
     3194, 3194, 3194,    0,    0, 3190, 3195, 3195, 3195, 3195,
        0, 3196, 3196, 3196, 3196, 3189,    0, 3193,    0, 3193,
     3200, 3200, 3200, 3200, 3194, 3201, 3201, 3201, 3201, 3191,
        0, 3195, 3192, 3195, 3190,    0, 3196, 3193, 3196,    0,
     3202, 3202, 3202, 3202, 3191, 3200,    0, 3200,    0,    0,

     3201,    0, 3201,    0, 3204, 3204, 3204, 3204, 3205, 3205,
     3205, 3205, 3195,    0,    0, 3202, 3193, 3202, 3206, 3206,
     3206, 3206, 3209, 3209, 3209, 3209,    0,    0, 3196, 3204,
        0, 3204,    0, 3205,    0, 3205, 3210, 3210, 3210, 3210,
        0,    0,    0, 3206,    0, 3206,    0, 3209,    0, 3209,
     3211, 3211, 3211, 3211,    0, 3215, 3215, 3215, 3215,    0,
        0, 3210,    0, 3210,    0, 3204, 3215, 3216, 3216, 3216,
     3216, 3217, 3217, 3217, 3217, 3211,    0, 3211,    0, 3206,
     3220, 3220, 3220, 3220, 3224, 3224, 3224, 3224, 3226, 3226,
     3226, 3226,    0, 3209,    0, 3224, 3227, 3227, 3227, 3227,

     3230, 3230, 3230, 3230,    0,    0, 3230, 3231, 3231, 3231,
     3231, 3211, 3233, 3233, 3233, 3233, 3234, 3234, 3234, 3234,
        0, 3286, 3286, 3286, 3286, 3287, 3287, 3287, 3287, 3233,
     3288, 3288, 3288, 3288,    0,    0,    0, 3233, 3286, 3290,
     3290, 3290, 3290,    0,    0,    0, 3286, 3291, 3291, 3291,
     3291, 3292, 3292, 3292, 3292, 3299, 3299, 3299, 3299, 3304,
     3304, 3304, 3304, 3308, 3308, 3308, 3308, 3310, 3310, 3310,
     3310, 3233, 3313, 3313, 3313, 3313, 3292, 3234, 3314, 3314,
     3314, 3314, 3315, 3315, 3315, 3315, 3316, 3316, 3316, 3316,
     3286, 3317, 3317, 3317, 3317,    0,    0, 3313, 3318, 3318,

     3318, 3318, 3320, 3320, 3320, 3320, 3323, 3323, 3323, 3323,
        0, 3316, 3324, 3324, 3324, 3324, 3327, 3327, 3327, 3327,
     3328, 3328, 3328, 3328,    0,    0,    0, 3320,    0,    0,
        0, 3323, 3329, 3329, 3329, 3329, 3330, 3330, 3330, 3330,
        0, 3327, 3333, 3333, 3333, 3333,    0, 3320,    0,    0,
        0, 3323, 3336, 3336, 3336, 3336, 3337, 3337, 3337, 3337,
        0,    0,    0, 3336,    0,    0,    0, 3337,    0, 3336,
        0,    0,    0, 3337,    0,    0, 3320,    0,    0,    0,
     3323, 3338, 3338, 3338, 3338, 3339, 3339, 3339, 3339,    0,
        0,    0, 3338,    0,    0,    0, 3339,    0, 3338,    0,

        0,    0, 3339, 3340, 3340, 3340, 3340, 3341, 3341, 3341,
     3341,    0,    0,    0, 3340, 3337,    0,    0, 3341,    0,
     3340, 3336,    0,    0, 3341, 3342, 3342, 3342, 3342, 3343,
     3343, 3343, 3343,    0,    0,    0, 3342,    0,    0,    0,
     3343, 3344, 3344, 3344, 3344,    0, 3343,    0, 3338,    0,
     3345, 3345, 3345, 3345, 3346, 3346, 3346, 3346, 3347, 3347,
     3347, 3347,    0,    0, 3340,    0, 3344,    0, 3344, 3348,
     3348, 3348, 3348,    0, 3341, 3345,    0, 3345,    0, 3346,
        0, 3346,    0, 3347,    0, 3347,    0,    0,    0, 3343,
     3349, 3349, 3349, 3349, 3348,    0, 3348,    0, 3345,    0,

        0, 3346, 3351, 3351, 3351, 3351,    0, 3351, 3353, 3353,
     3353, 3353, 3351,    0,    0, 3349,    0, 3349, 3356, 3356,
     3356, 3356, 3347, 3357, 3357, 3357, 3357, 3362, 3362, 3362,
     3362,    0,    0, 3353,    0, 3353, 3364, 3364, 3364, 3364,
        0,    0,    0, 3356,    0, 3356,    0,    0, 3357,    0,
     3357,    0, 3362,    0, 3362, 3365, 3365, 3365, 3365,    0,
        0, 3364,    0, 3364, 3366, 3366, 3366, 3366, 3367, 3367,
     3367, 3367, 3368, 3368, 3368, 3368, 3369, 3369, 3369, 3369,
     3365, 3353, 3365, 3370, 3370, 3370, 3370, 3356,    0, 3366,
        0, 3366,    0, 3367,    0, 3367, 3371, 3371, 3371, 3371,

        0, 3369,    0, 3369,    0,    0, 3364,    0, 3370,    0,
     3370, 3372, 3372, 3372, 3372, 3373, 3373, 3373, 3373,    0,
        0, 3371,    0, 3371,    0, 3366, 3374, 3374, 3374, 3374,
     3375, 3375, 3375, 3375,    0,    0, 3372,    0, 3372,    0,
     3373,    0, 3373, 3376, 3376, 3376, 3376, 3380, 3380, 3380,
     3380, 3374,    0,    0,    0, 3375,    0, 3375,    0,    0,
     3373,    0,    0, 3377, 3377, 3377, 3377,    0, 3376,    0,
     3376,    0, 3372, 3378, 3378, 3378, 3378, 3379, 3379, 3379,
     3379, 3381, 3381, 3381, 3381,    0, 3375,    0, 3377, 3373,
     3377, 3382, 3382, 3382, 3382,    0,    0,    0, 3378,    0,

     3378,    0, 3379,    0, 3379,    0, 3381,    0, 3381,    0,
     3376, 3385, 3385, 3385, 3385,    0, 3382,    0, 3382, 3386,
     3386, 3386, 3386,    0, 3377,    0,    0,    0, 3381, 3387,
     3387, 3387, 3387,    0,    0,    0, 3385, 3379, 3385, 3388,
     3388, 3388, 3388,    0, 3386,    0, 3386, 3389, 3389, 3389,
     3389,    0,    0,    0, 3387,    0,    0, 3392, 3392, 3392,
     3392, 3382,    0,    0, 3388,    0, 3388, 3393, 3393, 3393,
     3393,    0, 3389,    0, 3389, 3394, 3394, 3394, 3394,    0,
        0, 3385, 3392,    0, 3392, 3398, 3398, 3398, 3398,    0,
        0, 3388, 3393,    0, 3393,    0,    0,    0, 3388,    0,

     3388, 3399, 3399, 3399, 3399, 3400, 3400, 3400, 3400, 3401,
     3401, 3401, 3401, 3388,    0, 3388, 3388,    0, 3392, 3402,
     3402, 3402, 3402, 3403, 3403, 3403, 3403, 3404, 3404, 3404,
     3404, 3405, 3405, 3405, 3405,    0,    0, 3405, 3406, 3406,
     3406, 3406, 3394, 3408, 3408, 3408, 3408, 3426, 3426, 3426,
     3426,    0, 3450, 3450, 3450, 3450, 3451, 3451, 3451, 3451,
     3408, 3452, 3452, 3452, 3452,    0,    0,    0, 3408, 3450,
     3453, 3453, 3453, 3453,    0,    0,    0, 3450, 3454, 3454,
     3454, 3454, 3458, 3458, 3458, 3458, 3461, 3461, 3461, 3461,
     3465, 3465, 3465, 3465, 3466, 3466, 3466, 3466, 3469, 3469,

     3469, 3469,    0, 3454, 3408, 3470, 3470, 3470, 3470, 3472,
     3472, 3472, 3472, 3473, 3473, 3473, 3473, 3474, 3474, 3474,
     3474, 3475, 3475, 3475, 3475,    0,    0, 3450, 3477, 3477,
     3477, 3477,    0,    0, 3472, 3478, 3478, 3478, 3478,    0,
        0,    0, 3474, 3482, 3482, 3482, 3482, 3486, 3486, 3486,
     3486,    0,    0, 3477, 3487, 3487, 3487, 3487, 3488, 3488,
     3488, 3488, 3489, 3489, 3489, 3489, 3491, 3491, 3491, 3491,
        0,    0, 3486, 3477, 3492, 3492, 3492, 3492, 3493, 3493,
     3493, 3493,    0,    0,    0, 3492,    0,    0,    0, 3493,
        0, 3492,    0,    0,    0, 3493, 3494, 3494, 3494, 3494,

        0,    0, 3477, 3495, 3495, 3495, 3495, 3494,    0,    0,
     3488,    0,    0, 3494, 3495,    0,    0, 3488,    0, 3488,
     3496, 3496, 3496, 3496,    0, 3497, 3497, 3497, 3497,    0,
        0, 3496, 3488,    0, 3488, 3488, 3497, 3496,    0, 3493,
        0,    0, 3497, 3498, 3498, 3498, 3498,    0,    0, 3492,
     3499, 3499, 3499, 3499, 3498,    0, 3500, 3500, 3500, 3500,
     3498, 3501, 3501, 3501, 3501, 3502, 3502, 3502, 3502, 3505,
     3505, 3505, 3505,    0,    0, 3499,    0, 3499,    0,    0,
     3496, 3500,    0, 3500,    0,    0, 3501,    0, 3501,    0,
     3502,    0, 3502,    0, 3505,    0, 3505, 3506, 3506, 3506,

     3506, 3499, 3507, 3507, 3507, 3507, 3513, 3513, 3513, 3513,
     3514, 3514, 3514, 3514,    0,    0,    0, 3500, 3515, 3515,
     3515, 3515, 3506,    0, 3506,    0,    0, 3502,    0,    0,
        0, 3513,    0, 3513,    0, 3514,    0, 3514, 3516, 3516,
     3516, 3516,    0, 3515,    0, 3515, 3517, 3517, 3517, 3517,
     3519, 3519, 3519, 3519, 3527, 3527, 3527, 3527, 3530, 3530,
     3530, 3530,    0, 3516,    0, 3516, 3538, 3538, 3538, 3538,
        0, 3517,    0,    0,    0, 3513,    0,    0,    0, 3520,
     3520, 3520, 3520, 3507, 3518, 3518, 3518, 3518, 3518, 3518,
     3518, 3518, 3518, 3518, 3518, 3518, 3518, 3518, 3518, 3518,

     3518, 3518, 3518, 3518, 3520,    0, 3520,    0,    0,    0,
     3518, 3518, 3518, 3518, 3518, 3518, 3518, 3521, 3521, 3521,
     3521, 3522, 3522, 3522, 3522,    0, 3520, 3523, 3523, 3523,
     3523, 3524, 3524, 3524, 3524, 3527,    0, 3518, 3518, 3518,
     3518,    0, 3521,    0, 3521,    0, 3522,    0, 3522,    0,
        0,    0, 3523,    0, 3523,    0, 3524,    0, 3524, 3525,
     3525, 3525, 3525,    0,    0,    0, 3518, 3518, 3518, 3518,
        0, 3526, 3526, 3526, 3526,    0, 3524,    0,    0, 3529,
     3529, 3529, 3529,    0, 3525,    0, 3525, 3521, 3533, 3533,
     3533, 3533,    0,    0,    0, 3522, 3526,    0, 3526,    0,

     3525,    0,    0,    0, 3529, 3524, 3529, 3536, 3536, 3536,
     3536,    0,    0, 3533,    0, 3533, 3539, 3539, 3539, 3539,
     3540, 3540, 3540, 3540, 3541, 3541, 3541, 3541, 3542, 3542,
     3542, 3542, 3536,    0, 3536, 3543, 3543, 3543, 3543, 3544,
     3544, 3544, 3544,    0,    0,    0, 3526,    0, 3529, 3545,
     3545, 3545, 3545, 3546, 3546, 3546, 3546,    0,    0, 3546,
     3547, 3547, 3547, 3547, 3548, 3548, 3548, 3548, 3549, 3549,
     3549, 3549, 3562, 3562, 3562, 3562,    0, 3582, 3582, 3582,
     3582, 3583, 3583, 3583, 3583, 3549, 3584, 3584, 3584, 3584,
        0,    0,    0, 3549, 3582, 3585, 3585, 3585, 3585,    0,

        0,    0, 3582, 3588, 3588, 3588, 3588, 3589, 3589, 3589,
     3589, 3591, 3591, 3591, 3591, 3592, 3592, 3592, 3592,    0,
     3585, 3594, 3594, 3594, 3594, 3596, 3596, 3596, 3596, 3597,
     3597, 3597, 3597, 3598, 3598, 3598, 3598, 3599, 3599, 3599,
     3599, 3600, 3600, 3600, 3600, 3601, 3601, 3601, 3601,    0,
        0, 3582, 3602, 3602, 3602, 3602, 3606, 3606, 3606, 3606,
     3607, 3607, 3607, 3607,    0,    0, 3600, 3610, 3610, 3610,
     3610, 3611, 3611, 3611, 3611, 3612, 3612, 3612, 3612, 3613,
     3613, 3613, 3613,    0,    0, 3607, 3612,    0,    0,    0,
     3613,    0, 3612,    0,    0,    0, 3613, 3614, 3614, 3614,

     3614, 3615, 3615, 3615, 3615, 3607,    0,    0, 3614,    0,
        0,    0, 3615, 3616, 3616, 3616, 3616,    0, 3615, 3617,
     3617, 3617, 3617,    0, 3616, 3618, 3618, 3618, 3618,    0,
     3617,    0, 3612,    0, 3607, 3619, 3619, 3619, 3619, 3620,
     3620, 3620, 3620, 3621, 3621, 3621, 3621,    0,    0,    0,
     3618,    0, 3618, 3623, 3623, 3623, 3623,    0,    0,    0,
     3619,    0, 3619,    0, 3620,    0, 3620, 3624, 3624, 3624,
     3624,    0, 3630, 3630, 3630, 3630,    0,    0, 3623,    0,
     3623, 3631, 3631, 3631, 3631, 3632, 3632, 3632, 3632, 3633,
     3633, 3633, 3633,    0,    0, 3619, 3620, 3630,    0, 3630,

     3638, 3638, 3638, 3638,    0,    0, 3631,    0, 3631,    0,
     3632,    0, 3632, 3639, 3639, 3639, 3639,    0, 3641, 3641,
     3641, 3641,    0,    0, 3621, 3638,    0, 3638,    0,    0,
        0, 3630, 3643, 3643, 3643, 3643,    0,    0, 3639,    0,
     3639,    0,    0, 3641, 3632, 3641,    0,    0, 3624, 3648,
     3648, 3648, 3648,    0, 3639,    0,    0, 3643,    0, 3632,
     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3657, 3657, 3657, 3657,    0,    0, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,

     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3635, 3640, 3640, 3640, 3640,
     3642, 3642, 3642, 3642, 3644, 3644, 3644, 3644, 3645, 3645,
     3645, 3645, 3646, 3646, 3646, 3646, 3647, 3647, 3647, 3647,
        0, 3640,    0, 3640,    0, 3642,    0, 3642,    0, 3644,
        0, 3644,    0, 3645,    0, 3645,    0, 3646,    0, 3646,
        0, 3647,    0, 3647,    0, 3642, 3650, 3650, 3650, 3650,

        0, 3651, 3651, 3651, 3651, 3646, 3656, 3656, 3656, 3656,
     3644,    0, 3656, 3658, 3658, 3658, 3658, 3659, 3659, 3659,
     3659, 3640,    0,    0, 3642, 3645, 3651,    0, 3651, 3686,
     3686, 3686, 3686,    0, 3659, 3687, 3687, 3687, 3687,    0,
     3647,    0, 3659,    0,    0,    0, 3686, 3688, 3688, 3688,
     3688,    0,    0,    0, 3686, 3690, 3690, 3690, 3690,    0,
     3651, 3691, 3691, 3691, 3691, 3692, 3692, 3692, 3692,    0,
        0,    0, 3688, 3693, 3693, 3693, 3693, 3650, 3694, 3694,
     3694, 3694, 3697, 3697, 3697, 3697, 3698, 3698, 3698, 3698,
     3699, 3699, 3699, 3699, 3700, 3700, 3700, 3700, 3703, 3703,

     3703, 3703, 3704, 3704, 3704, 3704, 3705, 3705, 3705, 3705,
        0, 3710, 3710, 3710, 3710, 3711, 3711, 3711, 3711,    0,
        0,    0, 3710, 3703,    0,    0, 3711, 3704, 3710, 3712,
     3712, 3712, 3712, 3713, 3713, 3713, 3713,    0,    0,    0,
     3712, 3714, 3714, 3714, 3714,    0,    0, 3704,    0, 3699,
     3718, 3718, 3718, 3718, 3722, 3722, 3722, 3722, 3713,    0,
     3713,    0,    0,    0, 3699, 3723, 3723, 3723, 3723, 3724,
     3724, 3724, 3724,    0,    0, 3718, 3704, 3718, 3725, 3725,
     3725, 3725, 3722,    0,    0,    0, 3710,    0, 3726, 3726,
     3726, 3726, 3713, 3723, 3724,    0, 3724, 3727, 3727, 3727,

     3727,    0,    0, 3725,    0, 3725, 3728, 3728, 3728, 3728,
        0, 3718, 3724, 3726,    0, 3726, 3729, 3729, 3729, 3729,
        0,    0, 3727, 3730, 3730, 3730, 3730,    0, 3731, 3731,
     3731, 3731, 3732, 3732, 3732, 3732, 3733, 3733, 3733, 3733,
        0, 3729,    0, 3729, 3735, 3735, 3735, 3735, 3730,    0,
     3730,    0, 3725, 3731,    0, 3731,    0, 3732,    0, 3732,
        0,    0,    0, 3729, 3736, 3736, 3736, 3736,    0, 3735,
        0, 3735, 3739, 3739, 3739, 3739, 3731,    0, 3739, 3740,
     3740, 3740, 3740, 3757, 3757, 3757, 3757, 3758, 3758, 3758,
     3758,    0,    0, 3730, 3759, 3759, 3759, 3759, 3761, 3761,

     3761, 3761,    0,    0,    0, 3735,    0,    0, 3757, 3762,
     3762, 3762, 3762, 3766, 3766, 3766, 3766,    0,    0, 3759,
     3767, 3767, 3767, 3767, 3771, 3771, 3771, 3771,    0, 3772,
     3772, 3772, 3772,    0, 3773, 3773, 3773, 3773, 3766,    0,
     3772, 3774, 3774, 3774, 3774, 3736, 3772,    0,    0, 3771,
     3778, 3778, 3778, 3778, 3779, 3779, 3779, 3779,    0, 3773,
        0, 3773, 3781, 3781, 3781, 3781, 3782, 3782, 3782, 3782,
     3783, 3783, 3783, 3783, 3784, 3784, 3784, 3784, 3778,    0,
        0,    0, 3779, 3789, 3789, 3789, 3789, 3781,    0, 3781,
        0, 3782,    0, 3782, 3772, 3773,    0,    0,    0, 3784,

        0, 3784, 3785, 3785, 3785, 3785, 3786, 3786, 3786, 3786,
     3781, 3787, 3787, 3787, 3787, 3784, 3788, 3788, 3788, 3788,
     3791, 3791, 3791, 3791,    0,    0,    0, 3785,    0, 3785,
        0, 3786,    0, 3786,    0,    0, 3787,    0, 3787,    0,
        0, 3788, 3793, 3793, 3793, 3793,    0,    0, 3793, 3794,
     3794, 3794, 3794, 3786, 3808, 3808, 3808, 3808, 3809, 3809,
     3809, 3809, 3813, 3813, 3813, 3813, 3817, 3817, 3817, 3817,
     3818, 3818, 3818, 3818,    0,    0,    0, 3785, 3819, 3819,
     3819, 3819,    0, 3809,    0,    0,    0, 3813,    0, 3819,
        0, 3817,    0,    0,    0, 3819, 3820, 3820, 3820, 3820,

        0, 3791, 3823, 3823, 3823, 3823, 3824, 3824, 3824, 3824,
     3825, 3825, 3825, 3825, 3826, 3826, 3826, 3826, 3827, 3827,
     3827, 3827, 3828, 3828, 3828, 3828,    0, 3823,    0, 3823,
        0, 3824,    0, 3824,    0, 3825,    0,    0,    0, 3826,
        0, 3826,    0, 3827,    0, 3827,    0,    0, 3819, 3823,
     3829, 3829, 3829, 3829,    0,    0,    0, 3826, 3832, 3832,
     3832, 3832,    0,    0, 3832, 3833, 3833, 3833, 3833, 3843,
     3843, 3843, 3843, 3844, 3844, 3844, 3844, 3847, 3847, 3847,
     3847, 3848, 3848, 3848, 3848,    0, 3851, 3851, 3851, 3851,
        0,    0, 3827, 3854, 3854, 3854, 3854, 3851, 3844,    0,

        0,    0, 3847, 3851, 3855, 3855, 3855, 3855, 3856, 3856,
     3856, 3856, 3858, 3858, 3858, 3858,    0,    0, 3858, 3859,
     3859, 3859, 3859, 3867, 3867, 3867, 3867,    0,    0, 3855,
        0, 3855,    0, 3856,    0, 3856, 3868, 3868, 3868, 3868,
     3871, 3871, 3871, 3871,    0, 3872, 3872, 3872, 3872,    0,
        0,    0, 3855,    0,    0, 3851, 3872, 3873, 3873, 3873,
     3873, 3868, 3872,    0,    0, 3871, 3875, 3875, 3875, 3875,
     3876, 3876, 3876, 3876, 3877, 3877, 3877, 3877, 3879, 3879,
     3879, 3879,    0,    0, 3879, 3880, 3880, 3880, 3880,    0,
        0, 3875,    0, 3875,    0, 3876,    0, 3876,    0, 3877,

     3888, 3888, 3888, 3888, 3889, 3889, 3889, 3889, 3890, 3890,
     3890, 3890,    0, 3875, 3892, 3892, 3892, 3892, 3893, 3893,
     3893, 3893, 3894, 3894, 3894, 3894,    0,    0,    0, 3889,
        0,    0,    0, 3894, 3895, 3895, 3895, 3895, 3873, 3892,
     3897, 3897, 3897, 3897, 3898, 3898, 3898, 3898, 3899, 3899,
     3899, 3899, 3900, 3900, 3900, 3900,    0,    0, 3900, 3901,
     3901, 3901, 3901, 3909, 3909, 3909, 3909, 3910, 3910, 3910,
     3910, 3911, 3911, 3911, 3911,    0, 3899, 3912, 3912, 3912,
     3912, 3914, 3914, 3914, 3914, 3915, 3915, 3915, 3915,    0,
     3915,    0, 3910,    0,    0, 3915, 3916, 3916, 3916, 3916,

        0,    0, 3916, 3917, 3917, 3917, 3917,    0,    0, 3914,
     3925, 3925, 3925, 3925, 3926, 3926, 3926, 3926,    0,    0,
        0, 3897, 3927, 3927, 3927, 3927,    0, 3927, 3930, 3930,
     3930, 3930, 3927,    0, 3930, 3931, 3931, 3931, 3931, 3926,
     3936, 3936, 3936, 3936, 3937, 3937, 3937, 3937, 3939, 3939,
     3939, 3939,    0,    0, 3939,    0, 3915, 3940, 3940, 3940,
     3940, 3941, 3941, 3941, 3941, 3942, 3942, 3942, 3942, 3937,
     3943, 3943, 3943, 3943,    0, 3943, 3944, 3944, 3944, 3944,
     3943,    0, 3944, 3945, 3945, 3945, 3945,    0,    0,    0,
     3942,    0,    0, 3927, 3946, 3946, 3946, 3946,    0, 3943,

     3947, 3947, 3947, 3947, 3948, 3948, 3948, 3948, 3949, 3949,
     3949, 3949, 3951, 3951, 3951, 3951,    0,    0, 3951, 3952,
     3952, 3952, 3952,    0,    0, 3947, 3953, 3953, 3953, 3953,
        0,    0,    0, 3948,    0,    0,    0, 3949, 3954, 3954,
     3954, 3954, 3955, 3955, 3955, 3955,    0,    0, 3955, 3956,
     3956, 3956, 3956, 3957, 3957, 3957, 3957, 3958, 3958, 3958,
     3958,    0,    0, 3954, 3959, 3959, 3959, 3959,    0,    0,
     3959, 3960, 3960, 3960, 3960, 3961, 3961, 3961, 3961,    0,
        0,    0, 3958, 3962, 3962, 3962, 3962, 3963, 3963, 3963,
     3963,    0,    0, 3963, 3964, 3964, 3964, 3964, 3965, 3965,

     3965, 3965, 3966, 3966, 3966, 3966,    0,    0, 3962, 3967,
     3967, 3967, 3967,    0,    0, 3967, 3968, 3968, 3968, 3968,
     3969, 3969, 3969, 3969,    0,    0,    0, 3966, 3970, 3970,
     3970, 3970, 3971, 3971, 3971, 3971,    0,    0, 3971, 3972,
     3972, 3972, 3972, 3973, 3973, 3973, 3973, 3974, 3974, 3974,
     3974,    0,    0, 3970, 3975, 3975, 3975, 3975,    0,    0,
     3975, 3976, 3976, 3976, 3976, 3977, 3977, 3977, 3977,    0,
        0,    0, 3974, 3978, 3978, 3978, 3978, 3979, 3979, 3979,
     3979,    0,    0, 3979, 3980, 3980, 3980, 3980, 3981, 3981,
     3981, 3981, 3982, 3982, 3982, 3982,    0,    0, 3978, 3983,

     3983, 3983, 3983,    0,    0, 3983, 3984, 3984, 3984, 3984,
     3985, 3985, 3985, 3985,    0,    0,    0, 3982, 3986, 3986,
     3986, 3986, 3987, 3987, 3987, 3987,    0,    0, 3987, 3988,
     3988, 3988, 3988, 3989, 3989, 3989, 3989, 3990, 3990, 3990,
     3990,    0,    0, 3986, 3991, 3991, 3991, 3991,    0,    0,
     3991, 3992, 3992, 3992, 3992, 3993, 3993, 3993, 3993,    0,
        0,    0, 3990, 3994, 3994, 3994, 3994, 3995, 3995, 3995,
     3995,    0,    0, 3995, 3996, 3996, 3996, 3996, 3997, 3997,
     3997, 3997, 3998, 3998, 3998, 3998,    0,    0, 3994, 3999,
     3999, 3999, 3999,    0,    0, 3999, 4000, 4000, 4000, 4000,

     4001, 4001, 4001, 4001,    0,    0,    0, 3998, 4002, 4002,
     4002, 4002, 4003, 4003, 4003, 4003,    0,    0, 4003, 4004,
     4004, 4004, 4004, 4005, 4005, 4005, 4005, 4006, 4006, 4006,
     4006,    0,    0, 4002, 4007, 4007, 4007, 4007,    0,    0,
     4007, 4008, 4008, 4008, 4008, 4009, 4009, 4009, 4009,    0,
        0,    0, 4006, 4010, 4010, 4010, 4010, 4011, 4011, 4011,
     4011,    0,    0, 4011, 4012, 4012, 4012, 4012, 4013, 4013,
     4013, 4013, 4014, 4014, 4014, 4014,    0,    0, 4010, 4015,
     4015, 4015, 4015,    0,    0, 4015, 4016, 4016, 4016, 4016,
     4017, 4017, 4017, 4017,    0,    0,    0, 4014, 4018, 4018,

     4018, 4018, 4019, 4019, 4019, 4019,    0,    0, 4019, 4020,
     4020, 4020, 4020, 4021, 4021, 4021, 4021, 4022, 4022, 4022,
     4022,    0,    0, 4018, 4023, 4023, 4023, 4023,    0,    0,
     4023, 4024, 4024, 4024, 4024, 4025, 4025, 4025, 4025,    0,
        0,    0, 4022, 4026, 4026, 4026, 4026, 4027, 4027, 4027,
     4027,    0,    0, 4027, 4028, 4028, 4028, 4028, 4029, 4029,
     4029, 4029, 4030, 4030, 4030, 4030,    0,    0, 4026, 4031,
     4031, 4031, 4031,    0,    0, 4031, 4032, 4032, 4032, 4032,
     4033, 4033, 4033, 4033,    0,    0,    0, 4030, 4034, 4034,
     4034, 4034, 4035, 4035, 4035, 4035,    0,    0, 4035, 4036,

     4036, 4036, 4036, 4037, 4037, 4037, 4037, 4038, 4038, 4038,
     4038,    0,    0, 4034, 4039, 4039, 4039, 4039,    0,    0,
     4039, 4040, 4040, 4040, 4040, 4041, 4041, 4041, 4041,    0,
        0,    0, 4038, 4042, 4042, 4042, 4042, 4043, 4043, 4043,
     4043,    0,    0, 4043, 4044, 4044, 4044, 4044, 4045, 4045,
     4045, 4045, 4046, 4046, 4046, 4046,    0,    0, 4042, 4047,
     4047, 4047, 4047,    0,    0, 4047, 4048, 4048, 4048, 4048,
     4049, 4049, 4049, 4049,    0,    0,    0, 4046, 4050, 4050,
     4050, 4050, 4051, 4051, 4051, 4051,    0,    0, 4051, 4052,
     4052, 4052, 4052, 4053, 4053, 4053, 4053, 4054, 4054, 4054,

     4054,    0,    0, 4050, 4055, 4055, 4055, 4055,    0,    0,
     4055, 4056, 4056, 4056, 4056, 4057, 4057, 4057, 4057,    0,
        0,    0, 4054, 4058, 4058, 4058, 4058, 4059, 4059, 4059,
     4059,    0,    0, 4059, 4060, 4060, 4060, 4060, 4061, 4061,
     4061, 4061, 4062, 4062, 4062, 4062,    0,    0, 4058, 4063,
     4063, 4063, 4063,    0,    0, 4063, 4064, 4064, 4064, 4064,
     4065, 4065, 4065, 4065,    0,    0,    0, 4062, 4066, 4066,
     4066, 4066, 4067, 4067, 4067, 4067,    0,    0, 4067, 4068,
     4068, 4068, 4068, 4069, 4069, 4069, 4069, 4070, 4070, 4070,
     4070,    0,    0, 4066, 4071, 4071, 4071, 4071,    0,    0,

     4071, 4072, 4072, 4072, 4072, 4073, 4073, 4073, 4073,    0,
        0,    0, 4070, 4074, 4074, 4074, 4074, 4075, 4075, 4075,
     4075,    0,    0, 4075, 4076, 4076, 4076, 4076, 4077, 4077,
     4077, 4077, 4078, 4078, 4078, 4078,    0,    0, 4074, 4079,
     4079, 4079, 4079,    0,    0, 4079, 4080, 4080, 4080, 4080,
     4081, 4081, 4081, 4081,    0,    0,    0, 4078, 4082, 4082,
     4082, 4082, 4083, 4083, 4083, 4083,    0,    0, 4083, 4084,
     4084, 4084, 4084, 4085, 4085, 4085, 4085, 4086, 4086, 4086,
     4086,    0,    0, 4082, 4087, 4087, 4087, 4087,    0,    0,
     4087, 4088, 4088, 4088, 4088, 4089, 4089, 4089, 4089,    0,

        0,    0, 4086, 4090, 4090, 4090, 4090, 4091, 4091, 4091,
     4091,    0,    0, 4091, 4092, 4092, 4092, 4092, 4093, 4093,
     4093, 4093, 4094, 4094, 4094, 4094,    0,    0, 4090, 4095,
     4095, 4095, 4095,    0,    0, 4095, 4096, 4096, 4096, 4096,
     4097, 4097, 4097, 4097,    0,    0,    0, 4094, 4098, 4098,
     4098, 4098, 4099, 4099, 4099, 4099,    0,    0, 4099, 4100,
     4100, 4100, 4100, 4101, 4101, 4101, 4101, 4102, 4102, 4102,
     4102,    0,    0, 4098, 4103, 4103, 4103, 4103,    0,    0,
     4103, 4104, 4104, 4104, 4104, 4105, 4105, 4105, 4105,    0,
        0,    0, 4102, 4106, 4106, 4106, 4106, 4107, 4107, 4107,

     4107,    0,    0, 4107, 4108, 4108, 4108, 4108, 4109, 4109,
     4109, 4109, 4110, 4110, 4110, 4110,    0,    0, 4106, 4111,
     4111, 4111, 4111,    0,    0, 4111, 4112, 4112, 4112, 4112,
     4113, 4113, 4113, 4113,    0,    0,    0, 4110, 4114, 4114,
     4114, 4114, 4115, 4115, 4115, 4115,    0,    0, 4115, 4116,
     4116, 4116, 4116, 4117, 4117, 4117, 4117, 4118, 4118, 4118,
     4118,    0,    0, 4114, 4119, 4119, 4119, 4119,    0,    0,
     4119, 4120, 4120, 4120, 4120, 4121, 4121, 4121, 4121,    0,
        0,    0, 4118, 4122, 4122, 4122, 4122, 4123, 4123, 4123,
     4123,    0,    0, 4123, 4124, 4124, 4124, 4124, 4125, 4125,

     4125, 4125, 4126, 4126, 4126, 4126,    0,    0, 4122, 4127,
     4127, 4127, 4127,    0,    0, 4127, 4128, 4128, 4128, 4128,
     4129, 4129, 4129, 4129,    0,    0,    0, 4126, 4130, 4130,
     4130, 4130, 4131, 4131, 4131, 4131,    0,    0, 4131, 4132,
     4132, 4132, 4132, 4133, 4133, 4133, 4133, 4134, 4134, 4134,
     4134,    0,    0, 4130, 4135, 4135, 4135, 4135,    0,    0,
     4135, 4136, 4136, 4136, 4136, 4137, 4137, 4137, 4137,    0,
        0,    0, 4134, 4138, 4138, 4138, 4138, 4139, 4139, 4139,
     4139,    0,    0, 4139, 4140, 4140, 4140, 4140, 4141, 4141,
     4141, 4141, 4142, 4142, 4142, 4142,    0,    0, 4138, 4143,

     4143, 4143, 4143,    0,    0, 4143, 4144, 4144, 4144, 4144,
     4145, 4145, 4145, 4145,    0,    0,    0, 4142, 4146, 4146,
     4146, 4146, 4147, 4147, 4147, 4147,    0,    0, 4147, 4148,
     4148, 4148, 4148, 4149, 4149, 4149, 4149, 4150, 4150, 4150,
     4150,    0,    0, 4146, 4151, 4151, 4151, 4151,    0,    0,
     4151, 4152, 4152, 4152, 4152, 4153, 4153, 4153, 4153,    0,
        0,    0, 4150, 4154, 4154, 4154, 4154, 4155, 4155, 4155,
     4155,    0,    0, 4155, 4156, 4156, 4156, 4156, 4157, 4157,
     4157, 4157, 4158, 4158, 4158, 4158,    0,    0, 4154, 4159,
     4159, 4159, 4159,    0,    0, 4159, 4160, 4160, 4160, 4160,

     4161, 4161, 4161, 4161,    0,    0,    0, 4158, 4162, 4162,
     4162, 4162, 4163, 4163, 4163, 4163,    0,    0, 4163, 4164,
     4164, 4164, 4164, 4165, 4165, 4165, 4165, 4166, 4166, 4166,
     4166,    0,    0, 4162, 4167, 4167, 4167, 4167,    0,    0,
     4167, 4168, 4168, 4168, 4168, 4169, 4169, 4169, 4169,    0,
        0,    0, 4166, 4170, 4170, 4170, 4170, 4171, 4171, 4171,
     4171,    0,    0, 4171, 4172, 4172, 4172, 4172, 4173, 4173,
     4173, 4173, 4174, 4174, 4174, 4174,    0,    0, 4170, 4175,
     4175, 4175, 4175,    0,    0, 4175, 4176, 4176, 4176, 4176,
     4177, 4177, 4177, 4177,    0,    0,    0, 4174, 4178, 4178,

     4178, 4178, 4179, 4179, 4179, 4179,    0,    0, 4179, 4180,
     4180, 4180, 4180, 4181, 4181, 4181, 4181, 4182, 4182, 4182,
     4182,    0,    0, 4178, 4183, 4183, 4183, 4183,    0,    0,
     4183, 4184, 4184, 4184, 4184, 4185, 4185, 4185, 4185,    0,
        0,    0, 4182, 4186, 4186, 4186, 4186, 4187, 4187, 4187,
     4187,    0,    0, 4187, 4189, 4189, 4189, 4189, 4190, 4190,
     4190, 4190,    0,    0, 4190,    0,    0,    0, 4186, 4192,
     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192,
     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192,
     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192,

     4192, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193,
     4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193,
     4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193,
     4193, 4193, 4193, 4194, 4194, 4194, 4194, 4194, 4194, 4194,
     4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194,
     4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194,
     4194, 4194, 4194, 4194, 4194, 4195, 4195, 4195, 4195, 4195,
     4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195,
     4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195,
     4195, 4195, 4195, 4195, 4195, 4195, 4195, 4196, 4196, 4196,

     4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
     4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
     4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4197,
     4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197,
     4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197,
     4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197,
     4197, 4198, 4198, 4198, 4198, 4198, 4198, 4198, 4198, 4198,
     4198, 4198, 4198, 4198, 4198, 4198, 4198, 4198, 4198, 4198,
     4198, 4198, 4198, 4198, 4198, 4198, 4198, 4198, 4198, 4198,
     4198, 4198, 4198, 4199, 4199, 4199, 4199, 4199, 4199, 4199,

     4199, 4199, 4199, 4199, 4199, 4199, 4199, 4199, 4199, 4199,
     4199, 4199, 4199, 4199, 4199, 4199, 4199, 4199, 4199, 4199,
     4199, 4199, 4199, 4199, 4199, 4200, 4200, 4200, 4200, 4200,
     4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200,
     4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200,
     4200, 4200, 4200, 4200, 4200, 4200, 4200, 4201, 4201, 4201,
     4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201,
     4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201,
     4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201, 4201, 4202,
     4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202,

     4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202,
     4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202,
     4202, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4205, 4205, 4205, 4205, 4205,
     4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205,

     4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205,
     4205, 4205, 4205, 4205, 4205, 4205, 4205, 4206, 4206, 4206,
     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206,
     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206,
     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4207,
     4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207,
     4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207,
     4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207,
     4207, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208,
     4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208,

     4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208,
     4208, 4208, 4208, 4209, 4209, 4209, 4209, 4209, 4209, 4209,
     4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209,
     4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209,
     4209, 4209, 4209, 4209, 4209, 4210, 4210, 4210, 4210, 4210,
     4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210,
     4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210, 4210,
     4210, 4210, 4210, 4210, 4210, 4210, 4210, 4211, 4211, 4211,
     4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211,
     4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211,

     4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4212,
     4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212,
     4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212,
     4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212, 4212,
     4212, 4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213,
     4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213,
     4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213, 4213,
     4213, 4213, 4213, 4214, 4214, 4214, 4214, 4214, 4214, 4214,
     4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214,
     4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214,

     4214, 4214, 4214, 4214, 4214, 4215, 4215, 4215, 4215, 4215,
     4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215,
     4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215,
     4215, 4215, 4215, 4215, 4215, 4215, 4215, 4216, 4216, 4216,
     4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216,
     4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216,
     4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4216, 4217,
     4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217,
     4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217,
     4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217,

     4217, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218,
     4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218,
     4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218,
     4218, 4218, 4218, 4219, 4219, 4219, 4219, 4219, 4219, 4219,
     4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219,
     4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219, 4219,
     4219, 4219, 4219, 4219, 4219, 4220, 4220, 4220, 4220, 4220,
     4220, 4220, 4220, 4220, 4220, 4220, 4220, 4220, 4220, 4220,
     4220, 4220, 4220, 4220, 4220, 4220, 4220, 4220, 4220, 4220,
     4220, 4220, 4220, 4220, 4220, 4220, 4220, 4221, 4221, 4221,

     4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221,
     4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221,
     4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221, 4221, 4222,
     4222, 4222, 4222, 4222, 4222, 4222, 4222, 4222, 4222, 4222,
     4222, 4222, 4222, 4222, 4222, 4222, 4222, 4222, 4222, 4222,
     4222, 4222, 4222, 4222, 4222, 4222, 4222, 4222, 4222, 4222,
     4222, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223,
     4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223,
     4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223,
     4223, 4223, 4223, 4224, 4224, 4224, 4224, 4224, 4224, 4224,

     4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224,
     4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224,
     4224, 4224, 4224, 4224, 4224, 4225, 4225, 4225, 4225, 4225,
     4225, 4225, 4225, 4225, 4225, 4225, 4225, 4225, 4225, 4225,
     4225, 4225, 4225, 4225, 4225, 4225, 4225, 4225, 4225, 4225,
     4225, 4225, 4225, 4225, 4225, 4225, 4225, 4226, 4226, 4226,
     4226, 4226, 4226, 4226, 4226, 4226, 4226, 4226, 4226, 4226,
     4226, 4226, 4226, 4226, 4226, 4226, 4226, 4226, 4226, 4226,
     4226, 4226, 4226, 4226, 4226, 4226, 4226, 4226, 4226, 4227,
     4227, 4227, 4227, 4227, 4227, 4227, 4227, 4227, 4227, 4227,

     4227, 4227, 4227, 4227, 4227, 4227, 4227, 4227, 4227, 4227,
     4227, 4227, 4227, 4227, 4227, 4227, 4227, 4227, 4227, 4227,
     4227, 4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228,
     4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228,
     4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228,
     4228, 4228, 4228, 4229, 4229, 4229, 4229, 4229, 4229, 4229,
     4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229,
     4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229,
     4229, 4229, 4229, 4229, 4229, 4230, 4230, 4230, 4230, 4230,
     4230, 4230, 4230, 4230, 4230, 4230, 4230, 4230, 4230, 4230,

     4230, 4230, 4230, 4230, 4230, 4230, 4230, 4230, 4230, 4230,
     4230, 4230, 4230, 4230, 4230, 4230, 4230, 4231, 4231, 4231,
     4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231,
     4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231,
     4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4232,
     4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232,
     4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232,
     4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232,
     4232, 4233, 4233, 4233, 4233, 4233, 4233, 4233, 4233, 4233,
     4233, 4233, 4233, 4233, 4233, 4233, 4233, 4233, 4233, 4233,

     4233, 4233, 4233, 4233, 4233, 4233, 4233, 4233, 4233, 4233,
     4233, 4233, 4233, 4234, 4234, 4234, 4234, 4234, 4234, 4234,
     4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234,
     4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234, 4234,
     4234, 4234, 4234, 4234, 4234, 4235, 4235, 4235, 4235, 4235,
     4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235,
     4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235,
     4235, 4235, 4235, 4235, 4235, 4235, 4235, 4236, 4236, 4236,
     4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236,
     4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236,

     4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4237,
     4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237,
     4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237,
     4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237,
     4237, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238,
     4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238,
     4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238,
     4238, 4238, 4238, 4239, 4239, 4239, 4239, 4239, 4239, 4239,
     4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239,
     4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239,

     4239, 4239, 4239, 4239, 4239, 4240, 4240, 4240, 4240, 4240,
     4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240,
     4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240,
     4240, 4240, 4240, 4240, 4240, 4240, 4240, 4241, 4241, 4241,
     4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241,
     4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241,
     4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4242,
     4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242,
     4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242,
     4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242,

     4242, 4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243,
     4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243,
     4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243,
     4243, 4243, 4243, 4244, 4244, 4244, 4244, 4244, 4244, 4244,
     4244, 4244, 4244, 4244, 4244, 4244, 4244, 4244, 4244, 4244,
     4244, 4244, 4244, 4244, 4244, 4244, 4244, 4244, 4244, 4244,
     4244, 4244, 4244, 4244, 4244, 4245, 4245, 4245, 4245, 4245,
     4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245,
     4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245,
     4245, 4245, 4245, 4245, 4245, 4245, 4245, 4246, 4246, 4246,

     4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246,
     4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246,
     4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4247,
     4247, 4247, 4247, 4247, 4247, 4247, 4247, 4247, 4247, 4247,
     4247, 4247, 4247, 4247, 4247, 4247, 4247, 4247, 4247, 4247,
     4247, 4247, 4247, 4247, 4247, 4247, 4247, 4247, 4247, 4247,
     4247, 4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248,
     4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248,
     4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248,
     4248, 4248, 4248, 4249, 4249, 4249, 4249, 4249, 4249, 4249,

     4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249,
     4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249,
     4249, 4249, 4249, 4249, 4249, 4250, 4250, 4250, 4250, 4250,
     4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250,
     4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250,
     4250, 4250, 4250, 4250, 4250, 4250, 4250, 4251, 4251, 4251,
     4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251,
     4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251,
     4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251, 4252,
     4252, 4252, 4252, 4252, 4252, 4252, 4252, 4252, 4252, 4252,

     4252, 4252, 4252, 4252, 4252, 4252, 4252, 4252, 4252, 4252,
     4252, 4252, 4252, 4252, 4252, 4252, 4252, 4252, 4252, 4252,
     4252, 4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253,
     4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253,
     4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253,
     4253, 4253, 4253, 4254, 4254, 4254, 4254, 4254, 4254, 4254,
     4254, 4254, 4254, 4254, 4254, 4254, 4254, 4254, 4254, 4254,
     4254, 4254, 4254, 4254, 4254, 4254, 4254, 4254, 4254, 4254,
     4254, 4254, 4254, 4254, 4254, 4255, 4255, 4255, 4255, 4255,
     4255, 4255, 4255, 4255, 4255, 4255, 4255, 4255, 4255, 4255,

     4255, 4255, 4255, 4255, 4255, 4255, 4255, 4255, 4255, 4255,
     4255, 4255, 4255, 4255, 4255, 4255, 4255, 4256, 4256, 4256,
     4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256,
     4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256,
     4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4257,
     4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257,
     4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257,
     4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257, 4257,
     4257, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258,
     4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258,

     4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258,
     4258, 4258, 4258, 4259, 4259, 4259, 4259, 4259, 4259, 4259,
     4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259,
     4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259, 4259,
     4259, 4259, 4259, 4259, 4259, 4260, 4260, 4260, 4260, 4260,
     4260, 4260, 4260, 4260, 4260, 4260, 4260, 4260, 4260, 4260,
     4260, 4260, 4260, 4260, 4260, 4260, 4260, 4260, 4260, 4260,
     4260, 4260, 4260, 4260, 4260, 4260, 4260, 4261, 4261, 4261,
     4261, 4261, 4261, 4261, 4261, 4261, 4261, 4261, 4261, 4261,
     4261, 4261, 4261, 4261, 4261, 4261, 4261, 4261, 4261, 4261,

     4261, 4261, 4261, 4261, 4261, 4261, 4261, 4261, 4261, 4262,
     4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262,
     4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262,
     4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262, 4262,
     4262, 4264,    0,    0,    0,    0,    0,    0,    0,    0,
     4264,    0,    0,    0,    0,    0, 4264,    0,    0,    0,
        0,    0,    0, 4264,    0,    0,    0,    0,    0,    0,
        0, 4264, 4265, 4265, 4265,    0,    0,    0, 4265,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4265,    0,    0,    0,    0,    0,

        0,    0, 4265, 4266, 4266, 4266, 4266,    0,    0, 4266,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4266,
        0,    0,    0,    0,    0, 4266,    0,    0,    0,    0,
        0,    0, 4266, 4266, 4267, 4267, 4267,    0,    0,    0,
     4267,    0,    0,    0,    0,    0,    0, 4267,    0,    0,
        0,    0,    0,    0,    0,    0, 4267,    0,    0,    0,
        0,    0,    0, 4267, 4267, 4268, 4268, 4268,    0,    0,
        0,    0,    0,    0, 4268,    0,    0, 4268, 4268,    0,
     4268, 4268, 4268, 4268,    0,    0,    0, 4268,    0,    0,
        0,    0,    0,    0,    0, 4268, 4269, 4269, 4269,    0,

        0,    0, 4269,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4269,    0,
        0,    0,    0,    0,    0,    0, 4269, 4270, 4270, 4270,
     4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270,
        0, 4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270, 4270,
     4270, 4270, 4270, 4270, 4270,    0, 4270, 4270, 4270, 4271,
     4271, 4271,    0,    0,    0, 4271,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4271,    0,    0,    0,    0,    0,    0,    0, 4271,
     4272, 4272, 4272, 4272,    0,    0, 4272,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 4272,    0,    0,    0,
        0,    0, 4272,    0,    0,    0,    0,    0,    0, 4272,
     4272, 4273, 4273, 4273,    0,    0,    0,    0,    0,    0,
     4273,    0,    0,    0,    0,    0, 4273, 4273,    0,    0,
        0,    0,    0, 4273,    0,    0,    0,    0,    0,    0,
        0, 4273, 4277,    0,    0,    0, 4277,    0, 4277,    0,
        0, 4277,    0,    0,    0, 4277,    0,    0,    0,    0,
        0,    0,    0, 4277, 4278, 4278,    0, 4278, 4278, 4278,
     4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278,
     4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278,

     4278, 4278, 4278, 4278, 4278, 4278, 4285, 4285, 4285,    0,
        0,    0, 4285,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4285,    0,
        0,    0,    0, 4285,    0,    0, 4285, 4287, 4287, 4287,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4287,    0, 4287, 4287,    0,    0,    0,    0,    0, 4287,
        0, 4287,    0,    0,    0,    0,    0, 4287, 4289, 4289,
        0, 4289, 4289, 4289, 4289, 4289, 4289,    0, 4289, 4289,
     4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289,
     4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289,

     4290, 4290, 4290,    0,    0,    0, 4290,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4290,    0,    0,    0,    0,    0,    0,    0,
     4290, 4291, 4291, 4291, 4291,    0,    0, 4291,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4291,    0,    0,
        0,    0,    0, 4291,    0,    0,    0,    0,    0,    0,
     4291, 4291, 4292, 4292, 4292,    0,    0,    0, 4292, 4292,
        0,    0,    0, 4292,    0,    0,    0,    0, 4292,    0,
        0,    0,    0,    0, 4292,    0,    0,    0, 4292,    0,
        0,    0, 4292, 4295, 4295, 4295,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4295, 4295,
        0, 4295,    0,    0,    0, 4295,    0,    0,    0,    0,
        0,    0,    0, 4295, 4296, 4296, 4296, 4296, 4296, 4296,
     4296, 4296, 4296, 4296, 4296, 4296, 4296, 4296, 4296, 4296,
     4296, 4296, 4296, 4296, 4296, 4296, 4296, 4296, 4296, 4296,
     4296, 4296, 4296, 4296, 4296, 4296, 4297, 4297,    0, 4297,
     4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297,
     4297, 4297, 4297, 4297, 4297,    0, 4297, 4297, 4297, 4297,
     4297, 4297, 4297, 4297, 4297, 4297, 4297, 4297, 4298, 4298,
     4298,    0,    0,    0, 4298,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4298,    0,    0,    0,    0,    0,    0,    0, 4298, 4299,
     4299, 4299, 4299,    0,    0, 4299,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4299,    0,    0,    0,    0,
        0, 4299,    0,    0,    0,    0,    0,    0, 4299, 4299,
     4300, 4300, 4300,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4300, 4300,    0, 4300,    0,
        0,    0, 4300,    0,    0,    0,    0,    0,    0,    0,
     4300, 4305, 4305,    0,    0, 4305,    0,    0, 4305, 4305,
        0, 4305, 4305, 4305, 4305, 4305,    0, 4305, 4305, 4305,

        0, 4305, 4305,    0, 4305, 4305, 4305, 4305, 4305,    0,
        0, 4305, 4305, 4306, 4306,    0, 4306, 4306, 4306, 4306,
     4306, 4306, 4306, 4306, 4306, 4306, 4306, 4306, 4306, 4306,
     4306, 4306, 4306, 4306, 4306, 4306, 4306, 4306, 4306, 4306,
     4306, 4306, 4306, 4306, 4306, 4307, 4307,    0, 4307, 4307,
     4307, 4307, 4307, 4307,    0, 4307, 4307, 4307, 4307, 4307,
     4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307,
     4307, 4307, 4307, 4307, 4307, 4307, 4307, 4309, 4309, 4309,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4309,    0, 4309, 4309,    0,    0,    0,    0,    0, 4309,

        0,    0,    0,    0,    0,    0,    0, 4309, 4310, 4310,
     4310,    0,    0,    0, 4310,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4310,    0,    0,    0,    0,    0,    0,    0, 4310, 4311,
     4311, 4311, 4311,    0,    0, 4311,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4311,    0,    0,    0,    0,
        0, 4311,    0,    0,    0,    0,    0,    0, 4311, 4311,
     4312, 4312, 4312,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4312, 4312,    0,    0,    0,
        0,    0, 4312,    0,    0,    0,    0,    0,    0,    0,

     4312, 4313, 4313,    0, 4313, 4313,    0,    0, 4313, 4313,
        0, 4313, 4313, 4313, 4313, 4313,    0, 4313, 4313, 4313,
        0, 4313, 4313,    0, 4313, 4313,    0, 4313, 4313,    0,
        0, 4313, 4313, 4314, 4314,    0, 4314, 4314, 4314, 4314,
     4314, 4314,    0, 4314, 4314, 4314, 4314, 4314, 4314, 4314,
     4314, 4314, 4314, 4314, 4314, 4314, 4314, 4314, 4314, 4314,
     4314, 4314, 4314, 4314, 4314, 4315, 4315,    0, 4315, 4315,
     4315, 4315, 4315, 4315, 4315, 4315, 4315, 4315, 4315, 4315,
     4315, 4315, 4315, 4315, 4315, 4315, 4315, 4315, 4315, 4315,
     4315, 4315, 4315, 4315, 4315, 4315, 4315, 4316, 4316,    0,

     4316, 4316, 4316, 4316, 4316, 4316, 4316, 4316, 4316,    0,
     4316, 4316, 4316, 4316, 4316, 4316, 4316, 4316, 4316, 4316,
     4316, 4316, 4316, 4316, 4316, 4316, 4316, 4316, 4316, 4317,
     4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317,
     4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317,
     4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317,
     4317, 4318, 4318,    0, 4318, 4318,    0, 4318, 4318, 4318,
     4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318,
     4318, 4318, 4318, 4318, 4318,    0, 4318,    0, 4318, 4318,
     4318, 4318, 4318, 4319, 4319,    0, 4319, 4319, 4319, 4319,

     4319, 4319, 4319, 4319, 4319, 4319, 4319, 4319, 4319, 4319,
     4319, 4319, 4319, 4319, 4319, 4319, 4319, 4319, 4319, 4319,
     4319, 4319, 4319, 4319, 4319, 4322,    0,    0,    0, 4322,
     4322, 4322, 4322, 4322, 4322, 4322, 4322,    0, 4322,    0,
        0, 4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322,
     4322, 4322, 4322, 4322, 4322, 4322, 4322, 4324,    0, 4324,
        0,    0,    0,    0,    0,    0, 4324,    0, 4324,    0,
        0,    0,    0,    0, 4324, 4326, 4326, 4326,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4326,    0,
     4326,    0,    0,    0,    0,    0,    0, 4326,    0,    0,

        0,    0,    0,    0,    0, 4326, 4328, 4328, 4328,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4328,    0,    0,    0,    0,    0,    0, 4328,    0,
     4328,    0,    0,    0,    0,    0, 4328, 4331, 4331,    0,
     4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331,
     4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331,
     4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331, 4331, 4333,
        0,    0,    0, 4333,    0,    0,    0,    0,    0,    0,
     4333,    0,    0,    0,    0,    0,    0, 4333,    0,    0,
        0,    0,    0,    0,    0, 4333, 4336, 4336,    0, 4336,

     4336,    0, 4336, 4336, 4336, 4336, 4336, 4336, 4336, 4336,
     4336, 4336, 4336, 4336, 4336, 4336, 4336, 4336, 4336, 4336,
     4336, 4336, 4336, 4336, 4336, 4336, 4336, 4336, 4339, 4339,
     4339, 4339, 4339, 4339, 4339, 4339, 4339, 4339, 4339,    0,
     4339, 4339, 4339, 4339, 4339, 4339, 4339, 4339, 4339, 4339,
     4339, 4339, 4339, 4339, 4339, 4339, 4339, 4339, 4339, 4339,
     4341, 4341, 4341,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4341, 4341,    0,    0,    0,
        0,    0, 4341,    0,    0,    0,    0,    0,    0,    0,
     4341, 4342, 4342, 4342, 4342, 4342, 4342, 4342, 4342, 4342,

     4342, 4342,    0, 4342, 4342, 4342, 4342, 4342, 4342, 4342,
     4342, 4342, 4342, 4342, 4342, 4342, 4342, 4342, 4342, 4342,
     4342, 4342, 4342, 4344, 4344,    0, 4344,    0,    0,    0,
     4344,    0,    0,    0,    0,    0,    0,    0, 4344, 4351,
     4351,    0, 4351, 4351, 4351, 4351, 4351, 4351,    0, 4351,
     4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351,
     4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351,
     4351, 4352, 4352, 4352,    0,    0,    0, 4352,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4352,    0,    0,    0,    0,    0,    0,

        0, 4352, 4353, 4353, 4353,    0,    0,    0,    0,    0,
        0,    0,    0, 4353,    0,    0,    0, 4353,    0,    0,
        0,    0,    0,    0, 4353,    0,    0,    0,    0,    0,
        0,    0, 4353, 4354, 4354, 4354,    0,    0,    0, 4354,
     4354,    0,    0,    0, 4354,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4354,    0,    0,    0,    0,
        0,    0,    0, 4354, 4355, 4355, 4355,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4355,
        0,    0,    0,    0,    0,    0, 4355, 4355,    0,    0,
        0,    0,    0,    0, 4355, 4356, 4356, 4356,    0,    0,

        0, 4356,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4356,    0,    0,
        0,    0,    0,    0,    0, 4356, 4357, 4357, 4357, 4357,
        0,    0, 4357,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4357,    0,    0,    0,    0,    0, 4357,    0,
        0,    0,    0,    0,    0, 4357, 4357, 4358, 4358, 4358,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4358, 4358,    0,    0,    0,    0,    0, 4358,
        0,    0,    0,    0,    0,    0,    0, 4358, 4359, 4359,
        0, 4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359,

     4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359,
     4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359, 4359,
     4360,    0,    0,    0, 4360,    0,    0, 4360, 4360,    0,
        0,    0, 4360, 4360, 4360,    0, 4360, 4360, 4360, 4360,
     4360, 4360, 4360, 4360, 4360, 4360, 4360, 4360, 4360, 4360,
     4360, 4360, 4361, 4361,    0, 4361, 4361, 4361, 4361, 4361,
     4361,    0, 4361, 4361, 4361, 4361, 4361, 4361, 4361, 4361,
     4361, 4361, 4361, 4361, 4361, 4361, 4361, 4361, 4361, 4361,
     4361, 4361, 4361, 4361, 4366, 4366,    0, 4366, 4366, 4366,
     4366, 4366, 4366, 4366, 4366, 4366, 4366, 4366, 4366, 4366,

     4366, 4366, 4366, 4366, 4366, 4366, 4366, 4366, 4366, 4366,
     4366, 4366, 4366, 4366, 4366, 4366, 4367, 4367,    0, 4367,
     4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367,
     4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367,
     4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367, 4368, 4368,
        0, 4368, 4368,    0, 4368, 4368, 4368,    0,    0,    0,
     4368, 4368, 4368, 4368, 4368, 4368, 4368, 4368, 4368, 4368,
     4368, 4368, 4368, 4368, 4368, 4368, 4368, 4368, 4368, 4368,
     4369, 4369,    0, 4369, 4369, 4369, 4369, 4369, 4369,    0,
     4369, 4369, 4369, 4369, 4369, 4369, 4369, 4369, 4369, 4369,

     4369, 4369, 4369, 4369, 4369, 4369, 4369, 4369, 4369, 4369,
     4369, 4369, 4370, 4370,    0, 4370, 4370,    0, 4370, 4370,
     4370,    0, 4370, 4370, 4370, 4370, 4370,    0, 4370, 4370,
     4370, 4370, 4370, 4370, 4370, 4370, 4370, 4370, 4370, 4370,
        0,    0, 4370, 4370, 4371, 4371,    0, 4371, 4371, 4371,
     4371, 4371, 4371,    0, 4371, 4371, 4371, 4371, 4371, 4371,
     4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371, 4371,
     4371, 4371, 4371, 4371, 4371, 4371, 4372, 4372,    0, 4372,
     4372,    0, 4372, 4372, 4372,    0,    0,    0, 4372, 4372,
     4372,    0, 4372, 4372, 4372, 4372, 4372, 4372, 4372, 4372,

     4372, 4372, 4372, 4372, 4372, 4372, 4372, 4372, 4373, 4373,
        0, 4373, 4373, 4373, 4373, 4373, 4373,    0, 4373, 4373,
     4373, 4373, 4373, 4373, 4373, 4373, 4373, 4373, 4373, 4373,
     4373, 4373, 4373, 4373, 4373, 4373, 4373, 4373, 4373, 4373,
     4374, 4374,    0, 4374, 4374,    0, 4374, 4374, 4374,    0,
     4374, 4374, 4374, 4374, 4374,    0, 4374, 4374, 4374, 4374,
     4374, 4374, 4374, 4374, 4374, 4374, 4374, 4374,    0,    0,
     4374, 4374, 4375, 4375,    0, 4375, 4375, 4375, 4375, 4375,
     4375,    0, 4375, 4375, 4375, 4375, 4375, 4375, 4375, 4375,
     4375, 4375, 4375, 4375, 4375, 4375, 4375, 4375, 4375, 4375,

     4375, 4375, 4375, 4375, 4377, 4377,    0, 4377, 4377, 4377,
     4377, 4377, 4377,    0, 4377, 4377, 4377, 4377, 4377, 4377,
     4377, 4377, 4377, 4377, 4377, 4377, 4377, 4377, 4377, 4377,
     4377, 4377, 4377, 4377, 4377, 4377, 4379, 4379,    0, 4379,
     4379,    0, 4379, 4379, 4379,    0, 4379, 4379, 4379, 4379,
     4379, 4379, 4379, 4379, 4379, 4379, 4379, 4379, 4379, 4379,
     4379,    0, 4379, 4379, 4379, 4379, 4379, 4379, 4380, 4380,
        0, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380,
     4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380,
     4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380,

     4381, 4381,    0, 4381, 4381,    0, 4381, 4381, 4381,    0,
        0,    0, 4381, 4381, 4381,    0, 4381, 4381, 4381, 4381,
     4381, 4381, 4381, 4381, 4381, 4381, 4381, 4381, 4381, 4381,
     4381, 4381, 4382, 4382,    0, 4382, 4382, 4382, 4382, 4382,
     4382, 4382, 4382, 4382,    0, 4382, 4382, 4382, 4382, 4382,
     4382, 4382, 4382, 4382,    0, 4382, 4382,    0, 4382, 4382,
     4382, 4382, 4382, 4382, 4383, 4383,    0, 4383, 4383, 4383,
     4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383, 4383,
     4383, 4383, 4383, 4383, 4383, 4383,    0, 4383, 4383,    0,
     4383, 4383, 4383, 4383, 4383, 4383, 4394, 4394, 4394, 4394,

     4394, 4394, 4394, 4394, 4394, 4394, 4394,    0, 4394, 4394,
     4394, 4394, 4394, 4394, 4394, 4394, 4394, 4394, 4394, 4394,
     4394, 4394, 4394, 4394, 4394, 4394, 4394, 4394, 4395,    0,
     4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395,    0,    0,
     4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395,
     4395, 4395, 4395,    0, 4395, 4395, 4395, 4395, 4395, 4395,
     4396, 4396, 4396, 4396, 4396, 4396, 4396, 4396, 4396, 4396,
     4396,    0, 4396, 4396, 4396, 4396, 4396, 4396, 4396, 4396,
     4396, 4396, 4396, 4396, 4396, 4396, 4396, 4396, 4396, 4396,
     4396, 4396, 4397,    0, 4397, 4397, 4397, 4397, 4397, 4397,

     4397, 4397,    0,    0, 4397, 4397, 4397, 4397, 4397, 4397,
     4397, 4397, 4397, 4397, 4397, 4397, 4397,    0, 4397, 4397,
     4397, 4397, 4397, 4397, 4398, 4398, 4398,    0,    0,    0,
     4398,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4398, 4398,    0,    0,
        0,    0,    0,    0, 4398, 4400, 4400, 4400,    0,    0,
        0,    0,    0,    0,    0, 4400,    0, 4400,    0,    0,
     4400,    0,    0,    0,    0,    0,    0, 4400,    0,    0,
        0,    0,    0,    0,    0, 4400, 4401, 4401, 4401, 4401,
     4401, 4401, 4401, 4401, 4401, 4401, 4401, 4401, 4401, 4401,

     4401, 4401, 4401, 4401, 4401, 4401, 4401, 4401, 4401, 4401,
     4401, 4401, 4401, 4401, 4401, 4401, 4401, 4401, 4402, 4402,
     4402,    0,    0,    0, 4402,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4402,    0,    0,    0,    0,    0,    0,    0, 4402, 4404,
     4404, 4404,    0,    0,    0,    0,    0,    0, 4404,    0,
        0,    0,    0,    0, 4404,    0,    0,    0,    0,    0,
        0, 4404,    0,    0,    0,    0,    0,    0,    0, 4404,
     4405,    0,    0,    0,    0,    0, 4405, 4405,    0,    0,
        0, 4405,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 4405,    0,    0,    0,    0,    0,    0,    0,
     4405, 4406, 4406, 4406,    0,    0,    0, 4406,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4406,    0,    0,    0,    0,    0,    0,
        0, 4406, 4407, 4407, 4407, 4407,    0,    0, 4407,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4407,    0,
        0,    0,    0,    0, 4407,    0,    0,    0,    0,    0,
        0, 4407, 4407, 4408, 4408, 4408,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4408, 4408,
        0,    0,    0,    0,    0, 4408,    0,    0,    0,    0,

        0,    0,    0, 4408, 4409, 4409, 4409, 4409, 4409, 4409,
     4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409,
     4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409,
     4409, 4409, 4409, 4409, 4409, 4409, 4410, 4410,    0, 4410,
     4410, 4410, 4410, 4410, 4410, 4410, 4410, 4410,    0, 4410,
     4410,    0, 4410, 4410, 4410, 4410, 4410, 4410,    0, 4410,
     4410,    0, 4410, 4410, 4410, 4410, 4410, 4410, 4411, 4411,
     4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411,
     4411, 4411, 4411, 4411,    0, 4411, 4411, 4411, 4411, 4411,
     4411,    0, 4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411,

     4412, 4412,    0, 4412, 4412, 4412, 4412,    0, 4412, 4412,
     4412, 4412,    0, 4412, 4412,    0, 4412, 4412, 4412,    0,
     4412, 4412,    0, 4412, 4412,    0,    0, 4412, 4412, 4412,
     4412, 4412, 4413,    0,    0,    0,    0,    0,    0,    0,
        0, 4413,    0,    0,    0,    0,    0, 4413,    0,    0,
        0,    0,    0,    0, 4413,    0,    0,    0,    0,    0,
        0,    0, 4413, 4414, 4414, 4414,    0,    0,    0, 4414,
        0,    0,    0,    0,    0,    0, 4414,    0,    0,    0,
        0,    0,    0,    0,    0, 4414,    0,    0,    0,    0,
        0,    0, 4414, 4414, 4415, 4415, 4415,    0,    0,    0,

     4415,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4415,    0,    0,    0,
        0,    0,    0,    0, 4415, 4416, 4416, 4416,    0,    0,
        0,    0,    0,    0, 4416,    0,    0, 4416,    0,    0,
     4416,    0, 4416, 4416,    0,    0,    0, 4416,    0,    0,
        0,    0,    0,    0,    0, 4416, 4418, 4418, 4418,    0,
        0,    0,    0,    0,    0, 4418,    0,    0, 4418, 4418,
        0, 4418, 4418, 4418, 4418,    0,    0,    0, 4418,    0,
        0,    0,    0,    0,    0,    0, 4418, 4419, 4419, 4419,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     4419,    0, 4419,    0,    0,    0,    0,    0,    0, 4419,
        0,    0,    0,    0,    0,    0,    0, 4419, 4420, 4420,
     4420,    0,    0,    0, 4420,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4420,    0,    0,    0,    0,    0,    0,    0, 4420, 4421,
     4421, 4421,    0,    0,    0, 4421,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4421,    0,    0,    0,    0,    0,    0,    0, 4421,
     4422, 4422, 4422,    0,    0,    0,    0,    0,    0, 4422,
        0,    0, 4422,    0,    0, 4422,    0, 4422, 4422,    0,

        0,    0, 4422,    0,    0,    0,    0,    0,    0,    0,
     4422, 4423, 4423, 4423, 4423, 4423, 4423, 4423, 4423, 4423,
     4423, 4423, 4423, 4423,    0, 4423, 4423, 4423, 4423, 4423,
     4423, 4423, 4423, 4423, 4423, 4423, 4423, 4423, 4423,    0,
     4423, 4423, 4423, 4424, 4424, 4424,    0,    0,    0, 4424,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4424,    0,    0,    0,    0,
        0,    0,    0, 4424, 4425, 4425, 4425,    0,    0,    0,
        0,    0,    0, 4425,    0,    0,    0,    0,    0, 4425,
        0,    0,    0,    0,    0,    0, 4425,    0,    0,    0,

        0,    0,    0,    0, 4425, 4427, 4427, 4427,    0,    0,
        0,    0,    0,    0, 4427,    0,    0,    0,    0,    0,
     4427, 4427,    0,    0,    0,    0,    0, 4427,    0,    0,
        0,    0,    0,    0,    0, 4427, 4429,    0,    0,    0,
     4429,    0, 4429,    0,    0, 4429,    0,    0,    0, 4429,
        0,    0,    0,    0,    0,    0,    0, 4429, 4432, 4432,
        0, 4432, 4432, 4432, 4432, 4432, 4432, 4432, 4432, 4432,
     4432, 4432, 4432, 4432, 4432, 4432, 4432, 4432, 4432, 4432,
     4432, 4432, 4432, 4432, 4432, 4432, 4432, 4432, 4432, 4432,
     4436, 4436, 4436,    0,    0,    0, 4436,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4436,    0,    0,    0,    0, 4436,    0,    0,
     4436, 4437, 4437, 4437,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4437,    0, 4437, 4437,    0,    0,
        0,    0,    0, 4437,    0,    0,    0,    0,    0,    0,
        0, 4437, 4438, 4438, 4438,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4438,    0, 4438, 4438,    0,
        0,    0,    0,    0, 4438,    0, 4438,    0,    0,    0,
        0,    0, 4438, 4439, 4439, 4439,    0,    0,    0, 4439,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 4439,    0,    0,    0,    0,
        0,    0,    0, 4439, 4443, 4443,    0, 4443, 4443, 4443,
     4443, 4443, 4443, 4443, 4443, 4443, 4443, 4443, 4443, 4443,
     4443, 4443, 4443, 4443, 4443, 4443, 4443, 4443, 4443,    0,
     4443, 4443, 4443, 4443, 4443, 4443, 4444, 4444,    0, 4444,
     4444, 4444, 4444, 4444, 4444, 4444, 4444, 4444, 4444, 4444,
     4444, 4444, 4444, 4444, 4444, 4444, 4444, 4444, 4444, 4444,
     4444, 4444, 4444, 4444, 4444, 4444, 4444, 4444, 4445, 4445,
     4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445,
     4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445,

     4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445,
     4446, 4446, 4446,    0,    0,    0, 4446,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4446,    0,    0,    0,    0,    0,    0,    0,
     4446, 4447, 4447, 4447,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4447,    0,    0, 4447,
        0,    0,    0, 4447,    0,    0,    0,    0,    0,    0,
        0, 4447, 4449, 4449, 4449,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4449, 4449,    0,
     4449,    0,    0,    0, 4449,    0,    0,    0,    0,    0,

        0,    0, 4449, 4450, 4450,    0, 4450, 4450, 4450, 4450,
     4450, 4450, 4450, 4450, 4450, 4450, 4450, 4450, 4450, 4450,
     4450, 4450, 4450, 4450, 4450, 4450, 4450, 4450, 4450, 4450,
     4450, 4450, 4450, 4450, 4450, 4451, 4451, 4451,    0,    0,
        0, 4451, 4451,    0,    0,    0, 4451,    0,    0,    0,
        0, 4451,    0,    0,    0,    0,    0, 4451,    0,    0,
        0, 4451,    0,    0,    0, 4451, 4452, 4452, 4452,    0,
        0,    0,    0,    0,    0,    0, 4452, 4452,    0,    0,
        0, 4452, 4452,    0, 4452,    0,    0,    0, 4452,    0,
        0,    0,    0,    0,    0,    0, 4452, 4456, 4456, 4456,

        0,    0,    0,    0,    0,    0, 4456,    0,    0,    0,
     4456,    0, 4456,    0,    0,    0,    0,    0,    0, 4456,
        0,    0,    0,    0,    0,    0,    0, 4456, 4457, 4457,
        0, 4457, 4457, 4457, 4457, 4457, 4457, 4457, 4457, 4457,
     4457, 4457, 4457, 4457, 4457, 4457, 4457,    0, 4457, 4457,
     4457, 4457, 4457, 4457, 4457, 4457, 4457, 4457, 4457, 4457,
     4458, 4458, 4458,    0,    0,    0, 4458,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4458,    0,    0,    0,    0,    0,    0,    0,
     4458, 4459, 4459, 4459,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 4459,    0,    0, 4459,
        0,    0,    0, 4459,    0,    0,    0,    0,    0,    0,
        0, 4459, 4461, 4461, 4461,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4461, 4461,    0,
     4461,    0,    0,    0, 4461,    0,    0,    0,    0,    0,
        0,    0, 4461, 4464, 4464,    0,    0, 4464,    0,    0,
     4464, 4464,    0, 4464, 4464, 4464, 4464, 4464,    0, 4464,
     4464, 4464,    0, 4464, 4464,    0, 4464, 4464, 4464, 4464,
     4464,    0,    0, 4464, 4464, 4465, 4465,    0, 4465, 4465,
     4465, 4465, 4465, 4465, 4465, 4465, 4465, 4465, 4465, 4465,

     4465, 4465, 4465, 4465, 4465, 4465, 4465, 4465, 4465, 4465,
     4465, 4465, 4465, 4465, 4465, 4465, 4465, 4466, 4466,    0,
     4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466,
     4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466, 4466,
     4466, 4466,    0, 4466, 4466, 4466, 4466, 4466, 4466, 4467,
     4467,    0, 4467, 4467, 4467, 4467, 4467, 4467, 4467, 4467,
     4467, 4467, 4467, 4467, 4467, 4467, 4467, 4467, 4467, 4467,
     4467, 4467, 4467, 4467, 4467, 4467, 4467, 4467, 4467, 4467,
     4467, 4468, 4468,    0, 4468, 4468, 4468, 4468, 4468, 4468,
     4468, 4468, 4468, 4468, 4468, 4468, 4468, 4468, 4468, 4468,

     4468, 4468, 4468, 4468, 4468, 4468, 4468, 4468, 4468, 4468,
     4468, 4468, 4468, 4469, 4469, 4469,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4469,    0, 4469, 4469,
        0,    0,    0,    0,    0, 4469,    0,    0,    0,    0,
        0,    0,    0, 4469, 4470, 4470, 4470,    0,    0,    0,
     4470,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4470,    0,    0,    0,
        0,    0,    0,    0, 4470, 4471, 4471, 4471,    0,    0,
        0, 4471,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4471,    0,    0,

        0,    0,    0,    0,    0, 4471, 4474, 4474, 4474,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4474, 4474,    0,    0,    0,    0,    0, 4474,    0,
        0,    0,    0,    0,    0,    0, 4474, 4475, 4475,    0,
     4475, 4475,    0,    0, 4475, 4475,    0, 4475, 4475, 4475,
     4475, 4475,    0, 4475, 4475, 4475,    0, 4475, 4475,    0,
     4475, 4475,    0, 4475, 4475,    0,    0, 4475, 4475, 4476,
     4476,    0, 4476, 4476, 4476, 4476, 4476, 4476, 4476, 4476,
     4476, 4476, 4476, 4476, 4476, 4476, 4476, 4476, 4476, 4476,
     4476, 4476, 4476, 4476,    0, 4476, 4476, 4476, 4476, 4476,

     4476, 4477, 4477,    0, 4477, 4477, 4477, 4477, 4477, 4477,
     4477, 4477, 4477, 4477, 4477, 4477, 4477, 4477, 4477, 4477,
     4477, 4477, 4477, 4477, 4477, 4477, 4477, 4477, 4477, 4477,
     4477, 4477, 4477, 4478, 4478,    0, 4478, 4478, 4478, 4478,
     4478, 4478, 4478, 4478, 4478,    0, 4478, 4478, 4478, 4478,
     4478, 4478, 4478, 4478, 4478, 4478, 4478, 4478, 4478, 4478,
     4478, 4478, 4478, 4478, 4478, 4479, 4479, 4479, 4479, 4479,
     4479, 4479, 4479, 4479, 4479, 4479, 4479, 4479, 4479, 4479,
     4479, 4479, 4479, 4479, 4479, 4479, 4479, 4479, 4479, 4479,
     4479, 4479, 4479, 4479, 4479, 4479, 4479, 4480, 4480,    0,

     4480, 4480,    0, 4480, 4480, 4480, 4480, 4480, 4480, 4480,
     4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480,
     4480,    0, 4480,    0, 4480, 4480, 4480, 4480, 4480, 4481,
     4481,    0, 4481, 4481, 4481, 4481, 4481, 4481, 4481, 4481,
     4481, 4481, 4481, 4481, 4481, 4481, 4481, 4481, 4481, 4481,
     4481, 4481, 4481, 4481, 4481, 4481, 4481, 4481, 4481, 4481,
     4481, 4483,    0,    0,    0, 4483, 4483, 4483, 4483, 4483,
     4483, 4483, 4483,    0, 4483,    0,    0, 4483, 4483, 4483,
     4483, 4483, 4483, 4483, 4483, 4483, 4483, 4483, 4483, 4483,
     4483, 4483, 4483, 4484,    0, 4484,    0,    0,    0,    0,

        0,    0, 4484,    0, 4484,    0,    0,    0,    0,    0,
     4484, 4486, 4486, 4486,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4486,    0, 4486,    0,    0,    0,
        0,    0,    0, 4486,    0,    0,    0,    0,    0,    0,
        0, 4486, 4487, 4487, 4487,    0,    0,    0, 4487,    0,
        0,    0,    0, 4487,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4487,    0,    0,    0,    0,    0,
        0,    0, 4487, 4488, 4488, 4488,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4488,    0,
        0,    0,    0,    0,    0, 4488,    0, 4488,    0,    0,

        0,    0,    0, 4488, 4489, 4489, 4489,    0,    0,    0,
     4489,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4489,    0,    0,    0,
        0,    0,    0,    0, 4489, 4491, 4491,    0, 4491, 4491,
     4491, 4491, 4491, 4491, 4491, 4491, 4491, 4491, 4491, 4491,
     4491, 4491, 4491, 4491, 4491, 4491, 4491, 4491, 4491, 4491,
     4491, 4491, 4491, 4491, 4491, 4491, 4491, 4492,    0,    0,
        0, 4492,    0,    0,    0,    0,    0,    0, 4492,    0,
        0,    0,    0,    0,    0, 4492,    0,    0,    0,    0,
        0,    0,    0, 4492, 4494, 4494,    0, 4494, 4494,    0,

     4494, 4494, 4494, 4494, 4494, 4494, 4494, 4494, 4494, 4494,
     4494, 4494, 4494, 4494, 4494, 4494, 4494, 4494, 4494, 4494,
     4494, 4494, 4494, 4494, 4494, 4494, 4496, 4496, 4496, 4496,
     4496, 4496, 4496, 4496, 4496, 4496, 4496,    0, 4496, 4496,
     4496, 4496, 4496, 4496, 4496, 4496, 4496, 4496, 4496, 4496,
     4496, 4496, 4496, 4496, 4496, 4496, 4496, 4496, 4497, 4497,
     4497,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4497, 4497,    0,    0,    0,    0,    0,
     4497,    0,    0,    0,    0,    0,    0,    0, 4497, 4498,
     4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498,

        0, 4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498,
     4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498, 4498,
     4498, 4499, 4499,    0, 4499,    0,    0,    0, 4499,    0,
        0,    0,    0,    0,    0,    0, 4499, 4500,    0,    0,
        0,    0,    0,    0, 4500,    0,    0,    0, 4500, 4500,
        0,    0, 4500, 4500,    0,    0,    0, 4500,    0, 4500,
     4504, 4504,    0, 4504, 4504, 4504, 4504, 4504, 4504, 4504,
     4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504,
     4504, 4504, 4504, 4504, 4504,    0, 4504, 4504, 4504, 4504,
     4504, 4504, 4505, 4505,    0, 4505, 4505, 4505, 4505, 4505,

     4505, 4505, 4505, 4505, 4505, 4505, 4505, 4505, 4505, 4505,
     4505, 4505, 4505, 4505, 4505, 4505, 4505, 4505, 4505, 4505,
     4505, 4505, 4505, 4505, 4506,    0, 4506, 4506, 4506, 4506,
     4506, 4506, 4506, 4506, 4506,    0, 4506, 4506, 4506, 4506,
     4506, 4506, 4506, 4506, 4506, 4506, 4506, 4506, 4506,    0,
     4506, 4506, 4506, 4506, 4506, 4506, 4507, 4507, 4507,    0,
        0,    0, 4507,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4507,    0,
        0,    0,    0,    0,    0,    0, 4507, 4508, 4508, 4508,
        0,    0,    0,    0,    0,    0,    0,    0, 4508,    0,

        0,    0, 4508,    0,    0,    0,    0,    0,    0, 4508,
        0,    0,    0,    0,    0,    0,    0, 4508, 4509, 4509,
     4509,    0,    0,    0, 4509, 4509,    0,    0,    0, 4509,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4509,    0,    0,    0,    0,    0,    0,    0, 4509, 4510,
     4510, 4510,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4510,    0,    0,    0,    0,    0,
        0, 4510, 4510,    0,    0,    0,    0,    0,    0, 4510,
     4511, 4511,    0, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,

     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
     4511, 4511, 4512, 4512, 4512,    0,    0,    0, 4512,    0,
        0,    0,    0, 4512,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4512,    0,    0,    0,    0,    0,
        0,    0, 4512, 4513, 4513, 4513,    0,    0,    0, 4513,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4513,    0,    0,    0,    0,
        0,    0,    0, 4513, 4516, 4516, 4516,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4516,
     4516,    0,    0,    0,    0,    0, 4516,    0,    0,    0,

        0,    0,    0,    0, 4516, 4517, 4517,    0, 4517, 4517,
     4517, 4517, 4517, 4517, 4517, 4517, 4517, 4517, 4517, 4517,
     4517, 4517, 4517, 4517, 4517, 4517, 4517, 4517, 4517, 4517,
     4517, 4517, 4517, 4517, 4517, 4517, 4517, 4518,    0,    0,
        0, 4518,    0,    0, 4518, 4518,    0,    0,    0, 4518,
     4518, 4518,    0, 4518, 4518, 4518, 4518, 4518, 4518, 4518,
     4518, 4518, 4518, 4518, 4518, 4518, 4518, 4518, 4518, 4519,
     4519,    0, 4519, 4519, 4519, 4519, 4519, 4519, 4519, 4519,
     4519, 4519, 4519, 4519, 4519, 4519, 4519, 4519, 4519, 4519,
     4519, 4519, 4519, 4519,    0, 4519, 4519, 4519, 4519, 4519,

     4519, 4520, 4520,    0, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520, 4520,
     4520, 4520, 4520, 4521,    0, 4521, 4521, 4521, 4521, 4521,
     4521, 4521, 4521, 4521,    0, 4521, 4521, 4521, 4521, 4521,
     4521, 4521, 4521, 4521, 4521, 4521, 4521, 4521,    0, 4521,
     4521, 4521, 4521, 4521, 4521, 4524, 4524,    0, 4524, 4524,
        0, 4524, 4524, 4524,    0,    0,    0, 4524, 4524, 4524,
     4524, 4524, 4524, 4524, 4524, 4524, 4524, 4524, 4524, 4524,
     4524, 4524, 4524, 4524, 4524, 4524, 4524, 4525, 4525,    0,

     4525, 4525, 4525, 4525, 4525, 4525, 4525, 4525, 4525, 4525,
     4525, 4525, 4525, 4525, 4525, 4525, 4525, 4525, 4525, 4525,
     4525, 4525,    0, 4525, 4525, 4525, 4525, 4525, 4525, 4526,
     4526,    0, 4526, 4526, 4526, 4526, 4526, 4526, 4526, 4526,
     4526, 4526, 4526, 4526, 4526, 4526, 4526, 4526, 4526, 4526,
     4526, 4526, 4526, 4526, 4526, 4526, 4526, 4526, 4526, 4526,
     4526, 4527, 4527,    0, 4527, 4527,    0, 4527, 4527, 4527,
        0, 4527, 4527, 4527, 4527, 4527,    0, 4527, 4527, 4527,
     4527, 4527, 4527, 4527, 4527, 4527, 4527, 4527, 4527,    0,
        0, 4527, 4527, 4528, 4528,    0, 4528, 4528, 4528, 4528,

     4528, 4528, 4528, 4528, 4528, 4528, 4528, 4528, 4528, 4528,
     4528, 4528, 4528, 4528, 4528, 4528, 4528, 4528,    0, 4528,
     4528, 4528, 4528, 4528, 4528, 4529, 4529,    0, 4529, 4529,
     4529, 4529, 4529, 4529, 4529, 4529, 4529, 4529, 4529, 4529,
     4529, 4529, 4529, 4529, 4529, 4529, 4529, 4529, 4529, 4529,
     4529, 4529, 4529, 4529, 4529, 4529, 4529, 4530, 4530,    0,
     4530, 4530,    0, 4530, 4530, 4530,    0,    0,    0, 4530,
     4530, 4530,    0, 4530, 4530, 4530, 4530, 4530, 4530, 4530,
     4530, 4530, 4530, 4530, 4530, 4530, 4530, 4530, 4530, 4531,
     4531,    0, 4531, 4531, 4531, 4531, 4531, 4531, 4531, 4531,

     4531, 4531, 4531, 4531, 4531, 4531, 4531, 4531, 4531, 4531,
     4531, 4531, 4531, 4531,    0, 4531, 4531, 4531, 4531, 4531,
     4531, 4532, 4532,    0, 4532, 4532, 4532, 4532, 4532, 4532,
     4532, 4532, 4532, 4532, 4532, 4532, 4532, 4532, 4532, 4532,
     4532, 4532, 4532, 4532, 4532, 4532, 4532, 4532, 4532, 4532,
     4532, 4532, 4532, 4533, 4533,    0, 4533, 4533,    0, 4533,
     4533, 4533,    0, 4533, 4533, 4533, 4533, 4533,    0, 4533,
     4533, 4533, 4533, 4533, 4533, 4533, 4533, 4533, 4533, 4533,
     4533,    0,    0, 4533, 4533, 4534, 4534,    0, 4534, 4534,
     4534, 4534, 4534, 4534, 4534, 4534, 4534, 4534, 4534, 4534,

     4534, 4534, 4534, 4534, 4534, 4534, 4534, 4534, 4534, 4534,
        0, 4534, 4534, 4534, 4534, 4534, 4534, 4535, 4535,    0,
     4535, 4535, 4535, 4535, 4535, 4535, 4535, 4535, 4535, 4535,
     4535, 4535, 4535, 4535, 4535, 4535, 4535, 4535, 4535, 4535,
     4535, 4535, 4535, 4535, 4535, 4535, 4535, 4535, 4535, 4537,
     4537,    0, 4537, 4537, 4537, 4537, 4537, 4537, 4537, 4537,
     4537, 4537, 4537, 4537, 4537, 4537, 4537, 4537, 4537, 4537,
     4537, 4537, 4537, 4537,    0, 4537, 4537, 4537, 4537, 4537,
     4537, 4538, 4538,    0, 4538, 4538, 4538, 4538, 4538, 4538,
     4538, 4538, 4538, 4538, 4538, 4538, 4538, 4538, 4538, 4538,

     4538, 4538, 4538, 4538, 4538, 4538, 4538, 4538, 4538, 4538,
     4538, 4538, 4538, 4539, 4539,    0, 4539, 4539,    0, 4539,
     4539, 4539,    0, 4539, 4539, 4539, 4539, 4539, 4539, 4539,
     4539, 4539, 4539, 4539, 4539, 4539, 4539, 4539,    0, 4539,
     4539, 4539, 4539, 4539, 4539, 4540, 4540,    0, 4540, 4540,
        0, 4540, 4540, 4540,    0,    0,    0, 4540, 4540, 4540,
        0, 4540, 4540, 4540, 4540, 4540, 4540, 4540, 4540, 4540,
     4540, 4540, 4540, 4540, 4540, 4540, 4540, 4541, 4541,    0,
     4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541,    0,
     4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541, 4541,    0,

     4541, 4541,    0, 4541, 4541, 4541, 4541, 4541, 4541, 4542,
     4542,    0, 4542, 4542, 4542, 4542, 4542, 4542, 4542, 4542,
     4542, 4542, 4542, 4542, 4542, 4542, 4542, 4542, 4542, 4542,
     4542,    0, 4542, 4542,    0, 4542, 4542, 4542, 4542, 4542,
     4542, 4551, 4551, 4551, 4551, 4551, 4551, 4551, 4551, 4551,
     4551, 4551,    0, 4551, 4551, 4551, 4551, 4551, 4551, 4551,
     4551, 4551, 4551, 4551, 4551, 4551, 4551, 4551, 4551, 4551,
     4551, 4551, 4551, 4552,    0, 4552, 4552, 4552, 4552, 4552,
     4552, 4552, 4552,    0,    0, 4552, 4552, 4552, 4552, 4552,
     4552, 4552, 4552, 4552, 4552, 4552, 4552, 4552,    0, 4552,

     4552, 4552, 4552, 4552, 4552, 4553, 4553, 4553, 4553, 4553,
     4553, 4553, 4553, 4553, 4553, 4553,    0, 4553, 4553, 4553,
     4553, 4553, 4553, 4553, 4553, 4553, 4553, 4553, 4553, 4553,
     4553, 4553, 4553, 4553, 4553, 4553, 4553, 4554,    0, 4554,
     4554, 4554, 4554, 4554, 4554, 4554, 4554,    0,    0, 4554,
     4554, 4554, 4554, 4554, 4554, 4554, 4554, 4554, 4554, 4554,
     4554, 4554,    0, 4554, 4554, 4554, 4554, 4554, 4554, 4555,
     4555, 4555,    0,    0,    0, 4555,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4555, 4555,    0,    0,    0,    0,    0,    0, 4555,

     4556, 4556, 4556,    0,    0,    0,    0,    0,    0,    0,
     4556,    0, 4556,    0,    0, 4556,    0,    0,    0,    0,
        0,    0, 4556,    0,    0,    0,    0,    0,    0,    0,
     4556, 4557, 4557, 4557, 4557, 4557, 4557, 4557, 4557, 4557,
     4557, 4557, 4557, 4557, 4557, 4557, 4557, 4557, 4557, 4557,
     4557, 4557, 4557, 4557, 4557, 4557, 4557, 4557, 4557, 4557,
     4557, 4557, 4557, 4558, 4558, 4558,    0,    0,    0,    0,
        0,    0,    0, 4558,    0, 4558,    0,    0, 4558,    0,
        0,    0,    0,    0,    0, 4558,    0,    0,    0,    0,
        0,    0,    0, 4558, 4559, 4559, 4559,    0,    0,    0,

     4559,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4559,    0,    0,    0,
        0,    0,    0,    0, 4559, 4560, 4560, 4560,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4560,    0,    0,    0,    0,    0,    0, 4560,    0,    0,
        0,    0,    0,    0,    0, 4560, 4561, 4561, 4561,    0,
        0,    0,    0,    0,    0, 4561,    0,    0,    0,    0,
        0, 4561,    0,    0,    0,    0,    0,    0, 4561,    0,
        0,    0,    0,    0,    0,    0, 4561, 4564, 4564, 4564,
        0,    0,    0, 4564,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 4564,
        0,    0,    0,    0,    0,    0,    0, 4564, 4567, 4567,
     4567,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4567, 4567,    0,    0,    0,    0,    0,
     4567,    0,    0,    0,    0,    0,    0,    0, 4567, 4568,
     4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568,
     4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568,
     4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568,
     4568, 4569, 4569,    0, 4569, 4569, 4569, 4569, 4569, 4569,
     4569, 4569, 4569,    0, 4569, 4569,    0, 4569, 4569, 4569,

     4569, 4569, 4569,    0, 4569, 4569,    0, 4569, 4569, 4569,
     4569, 4569, 4569, 4571, 4571, 4571, 4571, 4571, 4571, 4571,
     4571, 4571, 4571, 4571, 4571, 4571, 4571, 4571,    0,    0,
     4571, 4571, 4571, 4571, 4571, 4571,    0, 4571, 4571, 4571,
     4571, 4571, 4571, 4571, 4571, 4572, 4572,    0, 4572, 4572,
     4572, 4572,    0, 4572, 4572, 4572, 4572,    0, 4572, 4572,
        0, 4572, 4572, 4572,    0, 4572, 4572,    0, 4572, 4572,
        0,    0, 4572, 4572, 4572, 4572, 4572, 4573, 4573, 4573,
        0,    0,    0,    0,    0,    0, 4573,    0,    0, 4573,
        0,    0, 4573,    0, 4573, 4573,    0,    0,    0, 4573,

        0,    0,    0,    0,    0,    0,    0, 4573, 4574, 4574,
     4574,    0,    0,    0,    0,    0,    0, 4574,    0,    0,
     4574,    0,    0, 4574, 4574, 4574, 4574,    0,    0,    0,
     4574,    0,    0,    0,    0,    0,    0,    0, 4574, 4575,
     4575, 4575,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4575,    0, 4575,    0,    0,    0,    0,    0,
        0, 4575,    0,    0,    0,    0,    0,    0,    0, 4575,
     4576, 4576, 4576,    0,    0,    0, 4576,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4576,    0,    0,    0,    0,    0,    0,    0,

     4576, 4578, 4578, 4578, 4578,    0,    0, 4578,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4578,    0,    0,
        0,    0,    0, 4578,    0,    0,    0,    0,    0,    0,
     4578, 4578, 4579, 4579, 4579,    0,    0,    0,    0,    0,
        0, 4579,    0,    0, 4579,    0,    0, 4579,    0, 4579,
     4579,    0,    0,    0, 4579,    0,    0,    0,    0,    0,
        0,    0, 4579, 4580, 4580, 4580,    0,    0,    0,    0,
        0,    0, 4580,    0,    0,    0,    0,    0, 4580,    0,
        0,    0,    0,    0,    0, 4580,    0,    0,    0,    0,
        0,    0,    0, 4580, 4581, 4581, 4581,    0,    0,    0,

        0,    0,    0, 4581,    0,    0,    0,    0,    0, 4581,
     4581,    0,    0,    0,    0,    0, 4581,    0,    0,    0,
        0,    0,    0,    0, 4581, 4582, 4582, 4582, 4582, 4582,
     4582, 4582, 4582, 4582, 4582, 4582, 4582,    0, 4582, 4582,
        0, 4582, 4582, 4582, 4582, 4582, 4582, 4582, 4582, 4582,
     4582, 4582, 4582, 4582, 4582, 4582, 4582, 4583, 4583, 4583,
     4583, 4583, 4583, 4583, 4583, 4583, 4583, 4583, 4583, 4583,
     4583, 4583,    0, 4583, 4583, 4583, 4583, 4583, 4583, 4583,
     4583, 4583, 4583, 4583, 4583, 4583, 4583, 4583, 4583, 4584,
     4584, 4584, 4584,    0,    0, 4584,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 4584,    0,    0,    0,    0,
        0, 4584,    0,    0,    0,    0,    0,    0, 4584, 4584,
     4585, 4585, 4585,    0,    0,    0,    0,    0,    0, 4585,
        0,    0,    0,    0,    0, 4585, 4585,    0,    0,    0,
        0,    0, 4585,    0,    0,    0,    0,    0,    0,    0,
     4585, 4589,    0,    0,    0, 4589,    0, 4589,    0,    0,
     4589,    0,    0,    0, 4589,    0,    0,    0,    0,    0,
        0,    0, 4589, 4590, 4590, 4590, 4590,    0,    0, 4590,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4590,
        0,    0,    0,    0,    0, 4590,    0,    0,    0,    0,

        0,    0, 4590, 4590, 4591, 4591, 4591,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4591,    0, 4591,
     4591,    0,    0,    0,    0,    0, 4591,    0,    0,    0,
        0,    0,    0,    0, 4591, 4592, 4592, 4592,    0,    0,
        0, 4592,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4592,    0,    0,
        0,    0,    0,    0,    0, 4592, 4593, 4593, 4593,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4593, 4593,    0,    0,    0,    0,    0, 4593,    0,
        0,    0,    0,    0,    0,    0, 4593, 4597, 4597,    0,

     4597, 4597, 4597, 4597, 4597, 4597, 4597, 4597, 4597, 4597,
     4597, 4597, 4597, 4597, 4597, 4597, 4597, 4597, 4597, 4597,
     4597, 4597,    0, 4597, 4597, 4597, 4597, 4597, 4597, 4598,
     4598, 4598, 4598,    0,    0, 4598,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4598,    0,    0,    0,    0,
        0, 4598,    0,    0,    0,    0,    0,    0, 4598, 4598,
     4599, 4599, 4599,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4599,    0,    0, 4599,    0,
        0,    0, 4599,    0,    0,    0,    0,    0,    0,    0,
     4599, 4600, 4600,    0, 4600, 4600, 4600, 4600, 4600, 4600,

     4600, 4600, 4600, 4600, 4600, 4600, 4600, 4600, 4600, 4600,
     4600, 4600, 4600, 4600, 4600, 4600, 4600, 4600, 4600, 4600,
     4600, 4600, 4600, 4601, 4601, 4601,    0,    0,    0, 4601,
     4601,    0,    0,    0, 4601,    0,    0,    0,    0, 4601,
        0,    0,    0,    0,    0, 4601,    0,    0,    0, 4601,
        0,    0,    0, 4601, 4602, 4602, 4602,    0,    0,    0,
     4602,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4602,    0,    0,    0,    0,    0, 4602,    0,    0,    0,
        0,    0,    0,    0, 4602, 4603, 4603, 4603,    0,    0,
        0, 4603,    0,    0,    0, 4603,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 4603,    0,    0,
        0,    0,    0,    0,    0, 4603, 4604, 4604, 4604,    0,
        0,    0,    0,    0,    0,    0, 4604, 4604,    0,    0,
        0, 4604, 4604,    0, 4604,    0,    0,    0, 4604,    0,
        0,    0,    0,    0,    0,    0, 4604, 4605,    0,    0,
        0,    0,    0,    0, 4605,    0,    0,    0, 4605, 4605,
        0,    0, 4605, 4605,    0,    0,    0, 4605,    0, 4605,
     4606, 4606, 4606, 4606, 4606, 4606, 4606, 4606, 4606, 4606,
     4606, 4606,    0, 4606, 4606,    0, 4606, 4606, 4606, 4606,
     4606, 4606, 4606, 4606, 4606, 4606, 4606, 4606, 4606, 4606,

     4606, 4606, 4607, 4607, 4607, 4607, 4607, 4607, 4607, 4607,
     4607, 4607, 4607, 4607, 4607, 4607, 4607,    0, 4607, 4607,
     4607, 4607, 4607, 4607, 4607, 4607, 4607, 4607, 4607, 4607,
     4607, 4607, 4607, 4607, 4610, 4610, 4610,    0,    0,    0,
        0,    0,    0, 4610,    0,    0,    0, 4610,    0, 4610,
        0,    0,    0,    0,    0,    0, 4610,    0,    0,    0,
        0,    0,    0,    0, 4610, 4611, 4611, 4611,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4611, 4611,    0, 4611,    0,    0,    0, 4611,    0,    0,
        0,    0,    0,    0,    0, 4611, 4612, 4612, 4612,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4612,    0,    0, 4612,    0,    0,    0, 4612,    0,
        0,    0,    0,    0,    0,    0, 4612, 4613, 4613, 4613,
     4613,    0,    0, 4613,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4613,    0,    0,    0,    0,    0, 4613,
        0,    0,    0,    0,    0,    0, 4613, 4613, 4615, 4615,
     4615, 4615, 4615, 4615, 4615, 4615, 4615, 4615, 4615, 4615,
     4615, 4615, 4615, 4615, 4615, 4615, 4615, 4615, 4615, 4615,
     4615, 4615, 4615, 4615, 4615, 4615, 4615, 4615, 4615, 4615,
     4616, 4616, 4616, 4616, 4616,    0, 4616, 4616, 4616,    0,

     4616, 4616, 4616, 4616, 4616,    0, 4616, 4616, 4616,    0,
     4616, 4616,    0, 4616, 4616, 4616, 4616, 4616,    0,    0,
     4616, 4616, 4617, 4617,    0, 4617, 4617, 4617, 4617, 4617,
     4617, 4617, 4617, 4617, 4617, 4617, 4617, 4617, 4617, 4617,
     4617, 4617, 4617, 4617, 4617, 4617, 4617, 4617, 4617, 4617,
     4617, 4617, 4617, 4617, 4618, 4618,    0, 4618, 4618, 4618,
     4618, 4618, 4618, 4618, 4618, 4618, 4618, 4618, 4618, 4618,
     4618, 4618, 4618, 4618, 4618, 4618, 4618, 4618, 4618,    0,
     4618, 4618, 4618, 4618, 4618, 4618, 4619, 4619,    0, 4619,
     4619, 4619, 4619, 4619, 4619, 4619, 4619, 4619, 4619, 4619,

     4619, 4619, 4619, 4619, 4619, 4619, 4619, 4619, 4619, 4619,
     4619, 4619, 4619, 4619, 4619, 4619, 4619, 4619, 4620, 4620,
     4620,    0,    0,    0, 4620,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4620,    0,    0,    0,    0,    0,    0,    0, 4620, 4621,
     4621, 4621,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4621,    0, 4621, 4621,    0,    0,    0,    0,
        0, 4621,    0,    0,    0,    0,    0,    0,    0, 4621,
     4622, 4622, 4622,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4622,    0, 4622, 4622,    0,    0,    0,

        0,    0, 4622,    0,    0,    0,    0,    0,    0,    0,
     4622, 4624, 4624, 4624, 4624,    0,    0, 4624,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4624,    0,    0,
        0,    0,    0, 4624,    0,    0,    0,    0,    0,    0,
     4624, 4624, 4625, 4625,    0, 4625, 4625, 4625, 4625, 4625,
     4625, 4625, 4625, 4625, 4625, 4625, 4625, 4625, 4625, 4625,
     4625, 4625, 4625, 4625, 4625, 4625, 4625,    0, 4625, 4625,
     4625, 4625, 4625, 4625, 4627,    0,    0,    0, 4627, 4627,
     4627, 4627, 4627, 4627, 4627, 4627,    0, 4627,    0,    0,
     4627, 4627, 4627, 4627, 4627, 4627, 4627, 4627, 4627, 4627,

     4627, 4627, 4627, 4627, 4627, 4627, 4629,    0, 4629,    0,
        0,    0,    0,    0,    0, 4629,    0, 4629,    0,    0,
        0,    0,    0, 4629, 4630, 4630, 4630,    0,    0,    0,
     4630,    0,    0,    0,    0, 4630,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4630,    0,    0,    0,
        0,    0,    0,    0, 4630, 4631, 4631, 4631,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4631,    0,
     4631,    0,    0,    0,    0,    0,    0, 4631,    0,    0,
        0,    0,    0,    0,    0, 4631, 4632, 4632, 4632,    0,
        0,    0, 4632,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4632,    0,
        0,    0,    0,    0,    0,    0, 4632, 4634,    0,    0,
        0,    0,    0,    0, 4634,    0,    0,    0, 4634, 4634,
        0,    0, 4634, 4634,    0,    0,    0, 4634,    0, 4634,
     4635, 4635,    0, 4635,    0,    0,    0, 4635,    0,    0,
        0,    0,    0,    0,    0, 4635, 4636, 4636,    0, 4636,
     4636, 4636, 4636, 4636, 4636, 4636, 4636, 4636, 4636, 4636,
     4636, 4636, 4636, 4636, 4636, 4636, 4636, 4636, 4636, 4636,
     4636,    0, 4636, 4636, 4636, 4636, 4636, 4636, 4637,    0,
     4637, 4637, 4637, 4637, 4637, 4637, 4637, 4637, 4637,    0,

     4637, 4637, 4637, 4637, 4637, 4637, 4637, 4637, 4637, 4637,
     4637, 4637, 4637,    0, 4637, 4637, 4637, 4637, 4637, 4637,
     4638, 4638,    0, 4638, 4638, 4638, 4638, 4638, 4638, 4638,
     4638, 4638, 4638, 4638, 4638, 4638, 4638, 4638, 4638, 4638,
     4638, 4638, 4638, 4638, 4638, 4638, 4638, 4638, 4638, 4638,
     4638, 4638, 4639, 4639, 4639,    0,    0,    0, 4639,    0,
        0,    0,    0, 4639,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4639,    0,    0,    0,    0,    0,
        0,    0, 4639, 4640, 4640, 4640,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4640, 4640,

        0,    0,    0,    0,    0, 4640,    0,    0,    0,    0,
        0,    0,    0, 4640, 4642, 4642, 4642, 4642,    0,    0,
     4642,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4642,    0,    0,    0,    0,    0, 4642,    0,    0,    0,
        0,    0,    0, 4642, 4642, 4643, 4643,    0, 4643, 4643,
     4643, 4643, 4643, 4643, 4643, 4643, 4643, 4643, 4643, 4643,
     4643, 4643, 4643, 4643, 4643, 4643, 4643, 4643, 4643, 4643,
        0, 4643, 4643, 4643, 4643, 4643, 4643, 4644,    0, 4644,
     4644, 4644, 4644, 4644, 4644, 4644, 4644, 4644,    0, 4644,
     4644, 4644, 4644, 4644, 4644, 4644, 4644, 4644, 4644, 4644,

     4644, 4644,    0, 4644, 4644, 4644, 4644, 4644, 4644, 4646,
     4646,    0, 4646, 4646, 4646, 4646, 4646, 4646, 4646, 4646,
     4646, 4646, 4646, 4646, 4646, 4646, 4646, 4646, 4646, 4646,
     4646, 4646, 4646, 4646,    0, 4646, 4646, 4646, 4646, 4646,
     4646, 4647, 4647,    0, 4647, 4647, 4647, 4647, 4647, 4647,
     4647, 4647, 4647, 4647, 4647, 4647, 4647, 4647, 4647, 4647,
     4647, 4647, 4647, 4647, 4647, 4647,    0, 4647, 4647, 4647,
     4647, 4647, 4647, 4648, 4648,    0, 4648, 4648, 4648, 4648,
     4648, 4648, 4648, 4648, 4648, 4648, 4648, 4648, 4648, 4648,
     4648, 4648, 4648, 4648, 4648, 4648, 4648, 4648,    0, 4648,

     4648, 4648, 4648, 4648, 4648, 4649, 4649,    0, 4649, 4649,
     4649, 4649, 4649, 4649, 4649, 4649, 4649, 4649, 4649, 4649,
     4649, 4649, 4649, 4649, 4649, 4649, 4649, 4649, 4649, 4649,
        0, 4649, 4649, 4649, 4649, 4649, 4649, 4650, 4650,    0,
     4650, 4650,    0, 4650, 4650, 4650,    0, 4650, 4650, 4650,
     4650, 4650,    0, 4650, 4650, 4650, 4650, 4650, 4650, 4650,
     4650, 4650, 4650, 4650, 4650,    0,    0, 4650, 4650, 4651,
     4651,    0, 4651, 4651, 4651, 4651, 4651, 4651, 4651, 4651,
     4651, 4651, 4651, 4651, 4651, 4651, 4651, 4651, 4651, 4651,
     4651, 4651, 4651, 4651,    0, 4651, 4651, 4651, 4651, 4651,

     4651, 4652, 4652, 4652, 4652, 4652, 4652, 4652, 4652, 4652,
     4652, 4652, 4652, 4652, 4652, 4652, 4652,    0, 4652, 4652,
     4652, 4652, 4652, 4652,    0, 4652, 4652, 4652, 4652, 4652,
     4652, 4652, 4652, 4655,    0, 4655, 4655, 4655, 4655, 4655,
     4655, 4655, 4655,    0,    0, 4655, 4655, 4655, 4655, 4655,
     4655, 4655, 4655, 4655, 4655, 4655, 4655, 4655,    0, 4655,
     4655, 4655, 4655, 4655, 4655, 4656,    0, 4656, 4656, 4656,
     4656, 4656, 4656, 4656, 4656,    0,    0, 4656, 4656, 4656,
     4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656,
        0, 4656, 4656, 4656, 4656, 4656, 4656, 4657, 4657, 4657,

        0,    0,    0,    0,    0,    0,    0, 4657,    0, 4657,
        0,    0, 4657,    0,    0,    0,    0,    0,    0, 4657,
        0,    0,    0,    0,    0,    0,    0, 4657, 4658, 4658,
     4658,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4658,    0,    0,    0,    0,    0,    0,
     4658,    0,    0,    0,    0,    0,    0,    0, 4658, 4661,
     4661, 4661, 4661,    0,    0, 4661,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4661,    0,    0,    0,    0,
        0, 4661,    0,    0,    0,    0,    0,    0, 4661, 4661,
     4662, 4662,    0, 4662, 4662, 4662, 4662, 4662, 4662, 4662,

     4662, 4662,    0, 4662, 4662,    0, 4662, 4662, 4662, 4662,
     4662, 4662,    0, 4662, 4662,    0, 4662, 4662, 4662, 4662,
     4662, 4662, 4664, 4664, 4664,    0,    0,    0,    0,    0,
        0, 4664,    0,    0, 4664,    0,    0, 4664, 4664, 4664,
     4664,    0,    0,    0, 4664,    0,    0,    0,    0,    0,
        0,    0, 4664, 4666, 4666, 4666,    0,    0,    0,    0,
        0,    0, 4666,    0,    0,    0,    0,    0, 4666, 4666,
        0,    0,    0,    0,    0, 4666,    0,    0,    0,    0,
        0,    0,    0, 4666, 4667, 4667, 4667,    0,    0,    0,
        0,    0,    0, 4667,    0,    0,    0,    0,    0, 4667,

     4667,    0,    0,    0,    0,    0, 4667,    0,    0,    0,
        0,    0,    0,    0, 4667, 4669,    0,    0,    0, 4669,
        0, 4669,    0,    0, 4669,    0,    0,    0, 4669,    0,
        0,    0,    0,    0,    0,    0, 4669, 4670, 4670, 4670,
     4670,    0,    0, 4670,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4670,    0,    0,    0,    0,    0, 4670,
        0,    0,    0,    0,    0,    0, 4670, 4670, 4671, 4671,
     4671,    0,    0,    0, 4671,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4671,    0,    0,    0,    0,    0,    0,    0, 4671, 4672,

     4672, 4672,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4672, 4672,    0,    0,    0,    0,
        0, 4672,    0,    0,    0,    0,    0,    0,    0, 4672,
     4673, 4673, 4673,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4673,    0, 4673, 4673,    0,    0,    0,
        0,    0, 4673,    0,    0,    0,    0,    0,    0,    0,
     4673, 4674, 4674, 4674,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4674, 4674,    0,    0,
        0,    0,    0, 4674,    0,    0,    0,    0,    0,    0,
        0, 4674, 4676, 4676, 4676,    0,    0,    0, 4676,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4676,    0,    0,    0,    0,    0,
        0,    0, 4676, 4677, 4677,    0, 4677, 4677, 4677, 4677,
     4677, 4677, 4677, 4677, 4677, 4677, 4677, 4677, 4677, 4677,
     4677, 4677, 4677, 4677, 4677, 4677, 4677, 4677,    0, 4677,
     4677, 4677, 4677, 4677, 4677, 4678, 4678, 4678,    0,    0,
        0, 4678, 4678,    0,    0,    0, 4678,    0,    0,    0,
        0, 4678,    0,    0,    0,    0,    0, 4678,    0,    0,
        0, 4678,    0,    0,    0, 4678, 4679, 4679, 4679,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 4679, 4679,    0, 4679,    0,    0,    0, 4679,    0,
        0,    0,    0,    0,    0,    0, 4679, 4680, 4680, 4680,
        0,    0,    0, 4680,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4680,
        0,    0,    0,    0,    0,    0,    0, 4680, 4681, 4681,
     4681,    0,    0,    0,    0,    0,    0,    0, 4681,    0,
        0,    0,    0, 4681, 4681,    0, 4681,    0,    0,    0,
     4681,    0,    0,    0,    0,    0,    0,    0, 4681, 4682,
     4682, 4682,    0,    0,    0, 4682,    0,    0,    0, 4682,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 4682,    0,    0,    0,    0,    0,    0,    0, 4682,
     4683,    0,    0,    0, 4683,    0,    0,    0,    0, 4683,
        0,    0,    0,    0,    0,    0, 4683,    0,    0,    0,
        0,    0,    0,    0, 4683, 4684,    0,    0,    0,    0,
        0,    0, 4684,    0,    0,    0, 4684, 4684,    0,    0,
     4684, 4684,    0,    0,    0, 4684,    0, 4684, 4685, 4685,
     4685, 4685, 4685, 4685, 4685, 4685, 4685, 4685, 4685, 4685,
     4685, 4685, 4685, 4685, 4685, 4685, 4685, 4685, 4685, 4685,
     4685, 4685, 4685, 4685, 4685, 4685, 4685, 4685, 4685, 4685,
     4686, 4686,    0, 4686, 4686, 4686, 4686, 4686, 4686, 4686,

     4686, 4686, 4686, 4686, 4686, 4686, 4686, 4686, 4686, 4686,
     4686, 4686, 4686, 4686, 4686, 4686, 4686, 4686, 4686, 4686,
     4686, 4686, 4688, 4688, 4688,    0,    0,    0,    0,    0,
        0, 4688,    0,    0,    0, 4688,    0, 4688,    0,    0,
        0,    0,    0,    0, 4688,    0,    0,    0,    0,    0,
        0,    0, 4688, 4689, 4689, 4689,    0,    0,    0,    0,
        0,    0, 4689,    0,    0,    0, 4689,    0, 4689,    0,
        0,    0,    0,    0,    0, 4689,    0,    0,    0,    0,
        0,    0,    0, 4689, 4690, 4690, 4690,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4690,

     4690,    0, 4690,    0,    0,    0, 4690,    0,    0,    0,
        0,    0,    0,    0, 4690, 4692, 4692, 4692, 4692, 4692,
     4692, 4692, 4692, 4692, 4692, 4692, 4692, 4692, 4692, 4692,
     4692, 4692, 4692, 4692, 4692, 4692, 4692, 4692, 4692, 4692,
     4692, 4692, 4692, 4692, 4692, 4692, 4692, 4693, 4693, 4693,
     4693, 4693,    0, 4693, 4693, 4693,    0, 4693, 4693, 4693,
     4693, 4693,    0, 4693, 4693, 4693,    0, 4693, 4693,    0,
     4693, 4693, 4693, 4693, 4693,    0,    0, 4693, 4693, 4694,
     4694,    0, 4694, 4694, 4694, 4694, 4694, 4694, 4694, 4694,
     4694, 4694, 4694, 4694, 4694, 4694, 4694, 4694, 4694, 4694,

     4694, 4694, 4694, 4694, 4694, 4694, 4694, 4694, 4694, 4694,
     4694, 4695, 4695,    0, 4695, 4695, 4695, 4695, 4695, 4695,
     4695, 4695, 4695, 4695, 4695, 4695, 4695, 4695, 4695, 4695,
     4695, 4695, 4695, 4695, 4695, 4695,    0, 4695, 4695, 4695,
     4695, 4695, 4695, 4696, 4696, 4696, 4696, 4696, 4696, 4696,
     4696, 4696, 4696, 4696, 4696, 4696, 4696, 4696, 4696,    0,
     4696, 4696, 4696, 4696, 4696, 4696,    0, 4696, 4696, 4696,
     4696, 4696, 4696, 4696, 4696, 4697, 4697, 4697,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4697,    0,
     4697, 4697,    0,    0,    0,    0,    0, 4697,    0,    0,

        0,    0,    0,    0,    0, 4697, 4698, 4698, 4698,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4698,
        0, 4698, 4698,    0,    0,    0,    0,    0, 4698,    0,
        0,    0,    0,    0,    0,    0, 4698, 4699, 4699,    0,
     4699, 4699, 4699, 4699, 4699, 4699, 4699, 4699, 4699, 4699,
     4699, 4699, 4699, 4699, 4699, 4699, 4699, 4699, 4699, 4699,
     4699, 4699,    0, 4699, 4699, 4699, 4699, 4699, 4699, 4701,
        0,    0,    0, 4701, 4701, 4701, 4701, 4701, 4701, 4701,
     4701,    0, 4701,    0,    0, 4701, 4701, 4701, 4701, 4701,
     4701, 4701, 4701, 4701, 4701, 4701, 4701, 4701, 4701, 4701,

     4701, 4702,    0, 4702,    0,    0,    0,    0,    0,    0,
     4702,    0, 4702,    0,    0,    0,    0,    0, 4702, 4703,
     4703, 4703,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4703,    0, 4703,    0,    0,    0,    0,    0,
        0, 4703,    0,    0,    0,    0,    0,    0,    0, 4703,
     4705, 4705,    0, 4705,    0,    0,    0, 4705,    0,    0,
        0,    0,    0,    0,    0, 4705, 4706, 4706,    0, 4706,
     4706, 4706, 4706, 4706, 4706, 4706, 4706, 4706, 4706, 4706,
     4706, 4706, 4706, 4706, 4706, 4706, 4706, 4706, 4706, 4706,
     4706,    0, 4706, 4706, 4706, 4706, 4706, 4706, 4707,    0,

     4707, 4707, 4707, 4707, 4707, 4707, 4707, 4707, 4707,    0,
     4707, 4707, 4707, 4707, 4707, 4707, 4707, 4707, 4707, 4707,
     4707, 4707, 4707,    0, 4707, 4707, 4707, 4707, 4707, 4707,
     4708, 4708, 4708,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4708, 4708,    0,    0,    0,
        0,    0, 4708,    0,    0,    0,    0,    0,    0,    0,
     4708, 4709, 4709,    0, 4709, 4709, 4709, 4709, 4709, 4709,
     4709, 4709, 4709, 4709, 4709, 4709, 4709, 4709, 4709, 4709,
     4709, 4709, 4709, 4709, 4709, 4709,    0, 4709, 4709, 4709,
     4709, 4709, 4709, 4710,    0, 4710, 4710, 4710, 4710, 4710,

     4710, 4710, 4710, 4710,    0, 4710, 4710, 4710, 4710, 4710,
     4710, 4710, 4710, 4710, 4710, 4710, 4710, 4710,    0, 4710,
     4710, 4710, 4710, 4710, 4710, 4712, 4712,    0, 4712, 4712,
     4712, 4712, 4712, 4712, 4712, 4712, 4712, 4712, 4712, 4712,
     4712, 4712, 4712, 4712, 4712, 4712, 4712, 4712, 4712, 4712,
        0, 4712, 4712, 4712, 4712, 4712, 4712, 4713, 4713,    0,
     4713, 4713, 4713, 4713, 4713, 4713, 4713, 4713, 4713, 4713,
     4713, 4713, 4713, 4713, 4713, 4713, 4713, 4713, 4713, 4713,
     4713, 4713,    0, 4713, 4713, 4713, 4713, 4713, 4713, 4714,
     4714,    0, 4714, 4714, 4714, 4714, 4714, 4714, 4714, 4714,

     4714, 4714, 4714, 4714, 4714, 4714, 4714, 4714, 4714, 4714,
     4714, 4714, 4714, 4714,    0, 4714, 4714, 4714, 4714, 4714,
     4714, 4715, 4715,    0, 4715, 4715, 4715, 4715, 4715, 4715,
     4715, 4715, 4715, 4715, 4715, 4715, 4715, 4715, 4715, 4715,
     4715, 4715, 4715, 4715, 4715, 4715,    0, 4715, 4715, 4715,
     4715, 4715, 4715, 4716, 4716,    0, 4716, 4716, 4716, 4716,
     4716, 4716,    0, 4716, 4716, 4716, 4716, 4716,    0, 4716,
     4716, 4716, 4716, 4716, 4716, 4716, 4716, 4716, 4716, 4716,
     4716,    0,    0, 4716, 4716, 4717, 4717,    0, 4717, 4717,
     4717, 4717, 4717, 4717, 4717, 4717, 4717, 4717, 4717, 4717,

     4717, 4717, 4717, 4717, 4717, 4717, 4717, 4717, 4717, 4717,
        0, 4717, 4717, 4717, 4717, 4717, 4717, 4718, 4718, 4718,
     4718, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 4718,
     4718, 4718, 4718,    0, 4718, 4718, 4718, 4718, 4718, 4718,
        0, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 4719,
        0, 4719, 4719, 4719, 4719, 4719, 4719, 4719, 4719,    0,
        0, 4719, 4719, 4719, 4719, 4719, 4719, 4719, 4719, 4719,
     4719, 4719, 4719, 4719,    0, 4719, 4719, 4719, 4719, 4719,
     4719, 4720,    0, 4720, 4720, 4720, 4720, 4720, 4720, 4720,
     4720,    0,    0, 4720, 4720, 4720, 4720, 4720, 4720, 4720,

     4720, 4720, 4720, 4720, 4720, 4720,    0, 4720, 4720, 4720,
     4720, 4720, 4720, 4721,    0,    0,    0,    0,    0, 4721,
     4721,    0,    0,    0, 4721,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4721,    0,    0,    0,    0,
        0,    0,    0, 4721, 4722, 4722,    0, 4722, 4722, 4722,
     4722, 4722, 4722, 4722, 4722, 4722,    0, 4722, 4722,    0,
     4722, 4722, 4722, 4722, 4722, 4722,    0, 4722, 4722,    0,
     4722, 4722, 4722, 4722, 4722, 4722, 4723, 4723, 4723, 4723,
     4723, 4723, 4723, 4723, 4723, 4723, 4723, 4723, 4723, 4723,
     4723, 4723,    0, 4723, 4723, 4723, 4723, 4723, 4723,    0,

     4723, 4723, 4723, 4723, 4723, 4723, 4723, 4723, 4724, 4724,
     4724,    0,    0,    0,    0,    0,    0, 4724,    0,    0,
        0,    0,    0, 4724, 4724,    0,    0,    0,    0,    0,
     4724,    0,    0,    0,    0,    0,    0,    0, 4724, 4725,
        0,    0,    0, 4725,    0, 4725,    0,    0, 4725,    0,
        0,    0, 4725,    0,    0,    0,    0,    0,    0,    0,
     4725, 4726, 4726, 4726,    0,    0,    0, 4726,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4726,    0,    0,    0,    0,    0,    0,
        0, 4726, 4729, 4729, 4729,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 4729, 4729,    0,
        0,    0,    0,    0, 4729,    0,    0,    0,    0,    0,
        0,    0, 4729, 4730, 4730, 4730,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4730,    0, 4730, 4730,
        0,    0,    0,    0,    0, 4730,    0,    0,    0,    0,
        0,    0,    0, 4730, 4731, 4731, 4731,    0,    0,    0,
     4731,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4731,    0,    0,    0,    0,    0, 4731,    0,    0,    0,
        0,    0,    0,    0, 4731, 4732, 4732, 4732,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     4732, 4732,    0, 4732,    0,    0,    0, 4732,    0,    0,
        0,    0,    0,    0,    0, 4732, 4733,    0,    0,    0,
        0,    0,    0, 4733,    0,    0,    0, 4733, 4733,    0,
        0, 4733, 4733,    0,    0,    0, 4733,    0, 4733, 4734,
     4734, 4734,    0,    0,    0,    0,    0,    0,    0, 4734,
        0,    0,    0,    0, 4734, 4734,    0, 4734,    0,    0,
        0, 4734,    0,    0,    0,    0,    0,    0,    0, 4734,
     4735,    0,    0,    0, 4735,    0,    0,    0,    0, 4735,
        0,    0,    0,    0,    0,    0, 4735,    0,    0,    0,
        0,    0,    0,    0, 4735, 4736, 4736, 4736, 4736, 4736,

     4736, 4736, 4736, 4736, 4736, 4736, 4736, 4736, 4736, 4736,
     4736, 4736, 4736, 4736, 4736, 4736, 4736, 4736, 4736, 4736,
     4736, 4736, 4736, 4736, 4736, 4736, 4736, 4737, 4737,    0,
     4737, 4737, 4737, 4737, 4737, 4737, 4737, 4737, 4737, 4737,
     4737, 4737, 4737, 4737, 4737, 4737, 4737, 4737, 4737, 4737,
     4737, 4737, 4737, 4737, 4737, 4737, 4737, 4737, 4737, 4738,
     4738, 4738,    0,    0,    0,    0,    0,    0, 4738,    0,
        0,    0, 4738,    0, 4738,    0,    0,    0,    0,    0,
        0, 4738,    0,    0,    0,    0,    0,    0,    0, 4738,
     4739, 4739, 4739,    0,    0,    0,    0,    0,    0, 4739,

        0,    0,    0, 4739,    0, 4739,    0,    0,    0,    0,
        0,    0, 4739,    0,    0,    0,    0,    0,    0,    0,
     4739, 4740, 4740, 4740,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4740, 4740,    0, 4740,
        0,    0,    0, 4740,    0,    0,    0,    0,    0,    0,
        0, 4740, 4742, 4742, 4742, 4742, 4742,    0, 4742, 4742,
     4742,    0, 4742, 4742, 4742, 4742, 4742,    0, 4742, 4742,
     4742,    0, 4742, 4742,    0, 4742, 4742, 4742, 4742, 4742,
        0,    0, 4742, 4742, 4743, 4743,    0, 4743, 4743, 4743,
     4743, 4743, 4743, 4743, 4743, 4743, 4743, 4743, 4743, 4743,

     4743, 4743, 4743, 4743, 4743, 4743, 4743, 4743, 4743, 4743,
     4743, 4743, 4743, 4743, 4743, 4743, 4744, 4744, 4744,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4744,
        0, 4744, 4744,    0,    0,    0,    0,    0, 4744,    0,
        0,    0,    0,    0,    0,    0, 4744, 4745, 4745, 4745,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4745,    0,    0,    0,    0,    0,    0, 4745,
        0,    0,    0,    0,    0,    0,    0, 4745, 4746,    0,
        0,    0, 4746, 4746, 4746, 4746, 4746, 4746, 4746, 4746,
        0, 4746,    0,    0, 4746, 4746, 4746, 4746, 4746, 4746,

     4746, 4746, 4746, 4746, 4746, 4746, 4746, 4746, 4746, 4746,
     4747, 4747,    0, 4747,    0,    0,    0, 4747,    0,    0,
        0,    0,    0,    0,    0, 4747, 4748,    0, 4748, 4748,
     4748, 4748, 4748, 4748, 4748, 4748, 4748,    0, 4748, 4748,
     4748, 4748, 4748, 4748, 4748, 4748, 4748, 4748, 4748, 4748,
     4748,    0, 4748, 4748, 4748, 4748, 4748, 4748, 4749, 4749,
     4749,    0,    0,    0, 4749,    0,    0,    0,    0, 4749,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4749,    0,    0,    0,    0,    0,    0,    0, 4749, 4750,
        0, 4750, 4750, 4750, 4750, 4750, 4750, 4750, 4750, 4750,

        0, 4750, 4750, 4750, 4750, 4750, 4750, 4750, 4750, 4750,
     4750, 4750, 4750, 4750,    0, 4750, 4750, 4750, 4750, 4750,
     4750, 4751, 4751,    0, 4751, 4751,    0, 4751, 4751, 4751,
     4751, 4751, 4751, 4751, 4751, 4751, 4751, 4751, 4751, 4751,
     4751, 4751, 4751, 4751, 4751, 4751, 4751, 4751, 4751, 4751,
     4751, 4751, 4751, 4752,    0, 4752, 4752, 4752, 4752, 4752,
     4752, 4752, 4752,    0,    0, 4752, 4752, 4752, 4752, 4752,
     4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752,    0, 4752,
     4752, 4752, 4752, 4752, 4752, 4753,    0, 4753, 4753, 4753,
     4753, 4753, 4753, 4753, 4753,    0,    0, 4753, 4753, 4753,

     4753, 4753, 4753, 4753, 4753, 4753, 4753, 4753, 4753, 4753,
        0, 4753, 4753, 4753, 4753, 4753, 4753, 4754, 4754,    0,
     4754, 4754, 4754, 4754, 4754, 4754, 4754, 4754, 4754,    0,
     4754, 4754,    0, 4754, 4754, 4754, 4754, 4754, 4754,    0,
     4754, 4754,    0, 4754, 4754, 4754, 4754, 4754, 4754, 4755,
     4755, 4755,    0,    0,    0,    0,    0,    0, 4755,    0,
        0,    0,    0,    0, 4755, 4755,    0,    0,    0,    0,
        0, 4755,    0,    0,    0,    0,    0,    0,    0, 4755,
     4757, 4757, 4757, 4757,    0,    0, 4757,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4757,    0,    0,    0,

        0,    0, 4757,    0,    0,    0,    0,    0,    0, 4757,
     4757, 4758, 4758, 4758,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4758,    0, 4758, 4758,    0,    0,
        0,    0,    0, 4758,    0,    0,    0,    0,    0,    0,
        0, 4758, 4759, 4759, 4759,    0,    0,    0, 4759,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4759,    0,    0,    0,    0,    0,
        0,    0, 4759, 4760,    0,    0,    0,    0,    0,    0,
     4760,    0,    0,    0, 4760, 4760,    0,    0, 4760, 4760,
        0,    0,    0, 4760,    0, 4760, 4762,    0, 4762, 4762,

     4762, 4762, 4762, 4762, 4762, 4762, 4762,    0, 4762, 4762,
     4762, 4762, 4762, 4762, 4762, 4762, 4762, 4762, 4762, 4762,
     4762,    0, 4762, 4762, 4762, 4762, 4762, 4762, 4763,    0,
     4763, 4763, 4763, 4763, 4763, 4763, 4763, 4763, 4763,    0,
     4763, 4763, 4763, 4763, 4763, 4763, 4763, 4763, 4763, 4763,
     4763, 4763, 4763,    0, 4763, 4763, 4763, 4763, 4763, 4763,
     4764,    0, 4764, 4764, 4764, 4764, 4764, 4764, 4764, 4764,
        0,    0, 4764, 4764, 4764, 4764, 4764, 4764, 4764, 4764,
     4764, 4764, 4764, 4764, 4764,    0, 4764, 4764, 4764, 4764,
     4764, 4764, 4765,    0, 4765, 4765, 4765, 4765, 4765, 4765,

     4765, 4765,    0,    0, 4765, 4765, 4765, 4765, 4765, 4765,
     4765, 4765, 4765, 4765, 4765, 4765, 4765,    0, 4765, 4765,
     4765, 4765, 4765, 4765, 4769,    0, 4769, 4769, 4769, 4769,
     4769, 4769, 4769, 4769, 4769,    0, 4769, 4769, 4769, 4769,
     4769, 4769, 4769, 4769, 4769, 4769, 4769, 4769, 4769,    0,
     4769, 4769, 4769, 4769, 4769, 4769, 4770,    0, 4770, 4770,
     4770, 4770, 4770, 4770, 4770, 4770, 4770,    0, 4770, 4770,
     4770, 4770, 4770, 4770, 4770, 4770, 4770, 4770, 4770, 4770,
     4770,    0, 4770, 4770, 4770, 4770, 4770, 4770, 4771,    0,
     4771, 4771, 4771, 4771, 4771, 4771, 4771, 4771,    0,    0,

     4771, 4771, 4771, 4771, 4771, 4771, 4771, 4771, 4771, 4771,
     4771, 4771, 4771,    0, 4771, 4771, 4771, 4771, 4771, 4771,
     4772,    0, 4772, 4772, 4772, 4772, 4772, 4772, 4772, 4772,
        0,    0, 4772, 4772, 4772, 4772, 4772, 4772, 4772, 4772,
     4772, 4772, 4772, 4772, 4772,    0, 4772, 4772, 4772, 4772,
     4772, 4772, 4773, 4773, 4773, 4773, 4773, 4773, 4773, 4773,
     4773, 4773, 4773, 4773, 4773, 4773, 4773, 4773,    0, 4773,
     4773, 4773, 4773, 4773, 4773,    0, 4773, 4773, 4773, 4773,
     4773, 4773, 4773, 4773, 4776,    0, 4776, 4776, 4776, 4776,
     4776, 4776, 4776, 4776, 4776,    0, 4776, 4776, 4776, 4776,

     4776, 4776, 4776, 4776, 4776, 4776, 4776, 4776, 4776,    0,
     4776, 4776, 4776, 4776, 4776, 4776, 4777,    0, 4777, 4777,
     4777, 4777, 4777, 4777, 4777, 4777, 4777,    0, 4777, 4777,
     4777, 4777, 4777, 4777, 4777, 4777, 4777, 4777, 4777, 4777,
     4777,    0, 4777, 4777, 4777, 4777, 4777, 4777, 4778,    0,
     4778, 4778, 4778, 4778, 4778, 4778, 4778, 4778,    0,    0,
     4778, 4778, 4778, 4778, 4778, 4778, 4778, 4778, 4778, 4778,
     4778, 4778, 4778,    0, 4778, 4778, 4778, 4778, 4778, 4778,
     4779,    0, 4779, 4779, 4779, 4779, 4779, 4779, 4779, 4779,
        0,    0, 4779, 4779, 4779, 4779, 4779, 4779, 4779, 4779,

     4779, 4779, 4779, 4779, 4779,    0, 4779, 4779, 4779, 4779,
     4779, 4779, 4780,    0, 4780, 4780, 4780, 4780, 4780, 4780,
     4780, 4780, 4780,    0, 4780, 4780, 4780, 4780, 4780, 4780,
     4780, 4780, 4780, 4780, 4780, 4780, 4780,    0, 4780, 4780,
     4780, 4780, 4780, 4780, 4781,    0, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781,    0, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,    0,
     4781, 4781, 4781, 4781, 4781, 4781, 4782,    0, 4782, 4782,
     4782, 4782, 4782, 4782, 4782, 4782,    0,    0, 4782, 4782,
     4782, 4782, 4782, 4782, 4782, 4782, 4782, 4782, 4782, 4782,

     4782,    0, 4782, 4782, 4782, 4782, 4782, 4782, 4783,    0,
     4783, 4783, 4783, 4783, 4783, 4783, 4783, 4783,    0,    0,
     4783, 4783, 4783, 4783, 4783, 4783, 4783, 4783, 4783, 4783,
     4783, 4783, 4783,    0, 4783, 4783, 4783, 4783, 4783, 4783,
     4784, 4784, 4784, 4784, 4784, 4784, 4784, 4784, 4784, 4784,
     4784, 4784, 4784, 4784, 4784, 4784,    0, 4784, 4784, 4784,
     4784, 4784, 4784,    0, 4784, 4784, 4784, 4784, 4784, 4784,
     4784, 4784, 4785,    0, 4785, 4785, 4785, 4785, 4785, 4785,
     4785, 4785, 4785,    0, 4785, 4785, 4785, 4785, 4785, 4785,
     4785, 4785, 4785, 4785, 4785, 4785, 4785,    0, 4785, 4785,

     4785, 4785, 4785, 4785, 4786,    0, 4786, 4786, 4786, 4786,
     4786, 4786, 4786, 4786, 4786,    0, 4786, 4786, 4786, 4786,
     4786, 4786, 4786, 4786, 4786, 4786, 4786, 4786, 4786,    0,
     4786, 4786, 4786, 4786, 4786, 4786, 4787,    0, 4787, 4787,
     4787, 4787, 4787, 4787, 4787, 4787,    0,    0, 4787, 4787,
     4787, 4787, 4787, 4787, 4787, 4787, 4787, 4787, 4787, 4787,
     4787,    0, 4787, 4787, 4787, 4787, 4787, 4787, 4788,    0,
     4788, 4788, 4788, 4788, 4788, 4788, 4788, 4788,    0,    0,
     4788, 4788, 4788, 4788, 4788, 4788, 4788, 4788, 4788, 4788,
     4788, 4788, 4788,    0, 4788, 4788, 4788, 4788, 4788, 4788,

     4790, 4790, 4790,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4790,    0,    0,    0, 4790,
        0,    0, 4790,    0,    0,    0,    0,    0,    0,    0,
     4790, 4793,    0, 4793, 4793, 4793, 4793, 4793, 4793, 4793,
     4793, 4793,    0, 4793, 4793, 4793, 4793, 4793, 4793, 4793,
     4793, 4793, 4793, 4793, 4793, 4793,    0, 4793, 4793, 4793,
     4793, 4793, 4793, 4794,    0, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794,    0, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,    0, 4794,
     4794, 4794, 4794, 4794, 4794, 4795,    0, 4795, 4795, 4795,

     4795, 4795, 4795, 4795, 4795,    0,    0, 4795, 4795, 4795,
     4795, 4795, 4795, 4795, 4795, 4795, 4795, 4795, 4795, 4795,
        0, 4795, 4795, 4795, 4795, 4795, 4795, 4796,    0, 4796,
     4796, 4796, 4796, 4796, 4796, 4796, 4796,    0,    0, 4796,
     4796, 4796, 4796, 4796, 4796, 4796, 4796, 4796, 4796, 4796,
     4796, 4796,    0, 4796, 4796, 4796, 4796, 4796, 4796, 4799,
        0, 4799, 4799, 4799, 4799, 4799, 4799, 4799, 4799, 4799,
        0, 4799, 4799, 4799, 4799, 4799, 4799, 4799, 4799, 4799,
     4799, 4799, 4799, 4799,    0, 4799, 4799, 4799, 4799, 4799,
     4799, 4800,    0, 4800, 4800, 4800, 4800, 4800, 4800, 4800,

     4800, 4800,    0, 4800, 4800, 4800, 4800, 4800, 4800, 4800,
     4800, 4800, 4800, 4800, 4800, 4800,    0, 4800, 4800, 4800,
     4800, 4800, 4800, 4801,    0, 4801, 4801, 4801, 4801, 4801,
     4801, 4801, 4801,    0,    0, 4801, 4801, 4801, 4801, 4801,
     4801, 4801, 4801, 4801, 4801, 4801, 4801, 4801,    0, 4801,
     4801, 4801, 4801, 4801, 4801, 4802,    0, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802,    0,    0, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
        0, 4802, 4802, 4802, 4802, 4802, 4802, 4803,    0, 4803,
     4803, 4803, 4803, 4803, 4803, 4803, 4803, 4803,    0, 4803,

     4803, 4803, 4803, 4803, 4803, 4803, 4803, 4803, 4803, 4803,
     4803, 4803,    0, 4803, 4803, 4803, 4803, 4803, 4803, 4804,
        0, 4804, 4804, 4804, 4804, 4804, 4804, 4804, 4804, 4804,
        0, 4804, 4804, 4804, 4804, 4804, 4804, 4804, 4804, 4804,
     4804, 4804, 4804, 4804,    0, 4804, 4804, 4804, 4804, 4804,
     4804, 4805,    0, 4805, 4805, 4805, 4805, 4805, 4805, 4805,
     4805,    0,    0, 4805, 4805, 4805, 4805, 4805, 4805, 4805,
     4805, 4805, 4805, 4805, 4805, 4805,    0, 4805, 4805, 4805,
     4805, 4805, 4805, 4806,    0, 4806, 4806, 4806, 4806, 4806,
     4806, 4806, 4806,    0,    0, 4806, 4806, 4806, 4806, 4806,

     4806, 4806, 4806, 4806, 4806, 4806, 4806, 4806,    0, 4806,
     4806, 4806, 4806, 4806, 4806, 4807,    0, 4807, 4807, 4807,
     4807, 4807, 4807, 4807, 4807, 4807,    0, 4807, 4807, 4807,
     4807, 4807, 4807, 4807, 4807, 4807, 4807, 4807, 4807, 4807,
        0, 4807, 4807, 4807, 4807, 4807, 4807, 4808,    0, 4808,
     4808, 4808, 4808, 4808, 4808, 4808, 4808, 4808,    0, 4808,
     4808, 4808, 4808, 4808, 4808, 4808, 4808, 4808, 4808, 4808,
     4808, 4808,    0, 4808, 4808, 4808, 4808, 4808, 4808, 4809,
        0, 4809, 4809, 4809, 4809, 4809, 4809, 4809, 4809,    0,
        0, 4809, 4809, 4809, 4809, 4809, 4809, 4809, 4809, 4809,

     4809, 4809, 4809, 4809,    0, 4809, 4809, 4809, 4809, 4809,
     4809, 4810,    0, 4810, 4810, 4810, 4810, 4810, 4810, 4810,
     4810,    0,    0, 4810, 4810, 4810, 4810, 4810, 4810, 4810,
     4810, 4810, 4810, 4810, 4810, 4810,    0, 4810, 4810, 4810,
     4810, 4810, 4810, 4811,    0, 4811, 4811, 4811, 4811, 4811,
     4811, 4811, 4811, 4811,    0, 4811, 4811, 4811, 4811, 4811,
     4811, 4811, 4811, 4811, 4811, 4811, 4811, 4811,    0, 4811,
     4811, 4811, 4811, 4811, 4811, 4812,    0, 4812, 4812, 4812,
     4812, 4812, 4812, 4812, 4812, 4812,    0, 4812, 4812, 4812,
     4812, 4812, 4812, 4812, 4812, 4812, 4812, 4812, 4812, 4812,

        0, 4812, 4812, 4812, 4812, 4812, 4812, 4813,    0, 4813,
     4813, 4813, 4813, 4813, 4813, 4813, 4813,    0,    0, 4813,
     4813, 4813, 4813, 4813, 4813, 4813, 4813, 4813, 4813, 4813,
     4813, 4813,    0, 4813, 4813, 4813, 4813, 4813, 4813, 4814,
        0, 4814, 4814, 4814, 4814, 4814, 4814, 4814, 4814,    0,
        0, 4814, 4814, 4814, 4814, 4814, 4814, 4814, 4814, 4814,
     4814, 4814, 4814, 4814,    0, 4814, 4814, 4814, 4814, 4814,
     4814, 4815,    0, 4815, 4815, 4815, 4815, 4815, 4815, 4815,
     4815, 4815,    0, 4815, 4815, 4815, 4815, 4815, 4815, 4815,
     4815, 4815, 4815, 4815, 4815, 4815,    0, 4815, 4815, 4815,

     4815, 4815, 4815, 4816,    0, 4816, 4816, 4816, 4816, 4816,
     4816, 4816, 4816, 4816,    0, 4816, 4816, 4816, 4816, 4816,
     4816, 4816, 4816, 4816, 4816, 4816, 4816, 4816,    0, 4816,
     4816, 4816, 4816, 4816, 4816, 4817,    0, 4817, 4817, 4817,
     4817, 4817, 4817, 4817, 4817,    0,    0, 4817, 4817, 4817,
     4817, 4817, 4817, 4817, 4817, 4817, 4817, 4817, 4817, 4817,
        0, 4817, 4817, 4817, 4817, 4817, 4817, 4818,    0, 4818,
     4818, 4818, 4818, 4818, 4818, 4818, 4818,    0,    0, 4818,
     4818, 4818, 4818, 4818, 4818, 4818, 4818, 4818, 4818, 4818,
     4818, 4818,    0, 4818, 4818, 4818, 4818, 4818, 4818, 4819,

        0, 4819, 4819, 4819, 4819, 4819, 4819, 4819, 4819, 4819,
        0, 4819, 4819, 4819, 4819, 4819, 4819, 4819, 4819, 4819,
     4819, 4819, 4819, 4819,    0, 4819, 4819, 4819, 4819, 4819,
     4819, 4820,    0, 4820, 4820, 4820, 4820, 4820, 4820, 4820,
     4820, 4820,    0, 4820, 4820, 4820, 4820, 4820, 4820, 4820,
     4820, 4820, 4820, 4820, 4820, 4820,    0, 4820, 4820, 4820,
     4820, 4820, 4820, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,

     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191
    } ;

extern int scanYY_flex_debug;
int scanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scanYYtext;
#line 1 "scanner.l"
/*****************************************************************************
 *
 * $Id: scanner.l,v 1.80 2001/03/19 19:27:41 root Exp $
 *
 * Copyright (C) 1997-2012 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "scanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "code.h"
#include "arguments.h"

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT 1

/* -----------------------------------------------------------------
 *
 *	statics
 */
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;
static int		lastContext;
static int		lastCContext;
static int              lastDocContext;
static int              lastCPPContext;
static int              lastSkipSharpContext;
static int              lastSkipRoundContext;
static int              lastStringContext;
static int              lastCurlyContext;
static int              lastRoundContext;
static int              lastSquareContext;
static int              lastInitializerContext;
static int              lastClassTemplSpecContext;
static int              lastPreLineCtrlContext;
static int              lastSkipVerbStringContext;
static int              lastCommentInArgContext;
static int              lastRawStringContext;
static int              lastCSConstraint;
static int              lastHereDocContext;
static int              lastDefineContext;
static Protection	protection;
static Protection	baseProt;
static int		sharpCount   = 0 ;
static int		roundCount   = 0 ;
static int		curlyCount   = 0 ;
static int		squareCount  = 0 ;
static int              padCount     = 0 ;
static QCString         slString;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		tempEntry    = 0 ;
static Entry*		firstTypedefEntry = 0 ;
static Entry*		memspecEntry = 0 ;
static int		yyLineNr     = 1 ;
static int              anonCount    = 0 ;        
static int              anonNSCount  = 0 ;        
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static bool             removeSlashes;
static Specifier 	virt;
static Specifier 	baseVirt;
static QCString         msType,msName,msArgs;
static bool             isTypedef;
static int              tmpDocType;
static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         funcPtrType;
static QCString         templateStr;
static QCString         aliasName;
static QCString         baseName;
static QCString*        specName;
static QCString         formulaText;
static QCString         formulaEnd;
static bool             useOverrideCommands = FALSE;

static SrcLangExt       language;
static bool             insideIDL   = FALSE;		//!< processing IDL code?
static bool             insideJava  = FALSE;		//!< processing Java code?
static bool             insideCS    = FALSE;		//!< processing C# code?
static bool             insideD     = FALSE;		//!< processing D code?
static bool             insidePHP   = FALSE;		//!< processing PHP code?
static bool             insideObjC  = FALSE;            //!< processing Objective C code?
static bool             insideCli   = FALSE;            //!< processing C++/CLI code?
static bool             insideJS    = FALSE;            //!< processing JavaScript code?
static bool             insideCpp   = TRUE;             //!< processing C/C++ code

static bool             insideCppQuote = FALSE;
static bool             insideProtocolList = FALSE;

static int              argRoundCount;
static int              argSharpCount;
static int              currentArgumentContext;
static int              lastCopyArgStringContext;
static int              lastCopyArgContext;
static QCString         *copyArgString;
static QCString         fullArgString;

static ArgumentList     *currentArgumentList;
static char             lastCopyArgChar;

static QCString         *pCopyQuotedString;
static QCString         *pCopyRoundString;
static QCString         *pCopyCurlyString;
static QCString         *pCopyRawString;

static QGString         *pCopyCurlyGString;
static QGString         *pCopyRoundGString;
static QGString         *pCopyQuotedGString;
static QGString         *pCopyHereDocGString;
static QGString         *pCopyRawGString;
static QGString         *pSkipVerbString;
static QStack<Grouping> autoGroupStack;

static bool             insideFormula;
static bool  	        insideTryBlock=FALSE;
static bool             insideCode;
static bool             needsSemi;

//static int              depthIf;
static int  	        initBracketCount;
static QCString         memberGroupRelates;
static QCString         memberGroupInside;
static QCString         xrefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;

static QCString         g_skipBlockName;
static QCString         oldStyleArgType;
static QCString         docBackup;
static QCString         briefBackup;
static bool             g_inputFromFile;

static int              docBlockContext;
static QGString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockAutoBrief;
static char             docBlockTerm;

static QCString         idlAttr;
static QCString         idlProp;

static bool             g_lexInit = FALSE;
static bool             externC;

static QCString         g_delimiter;

static int              g_column;

//-----------------------------------------------------------------------------

// forward declarations
//static void handleGroupStartCommand(const char *header);
//static void handleGroupEndCommand();

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  baseName.resize(0);
  formulaText.resize(0);
  protection = Public;
  baseProt = Public;
  sharpCount = 0;
  roundCount = 0;
  curlyCount = 0;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  baseVirt = Normal;
  isTypedef = FALSE;
  autoGroupStack.clear();
  insideTryBlock = FALSE;
  autoGroupStack.setAutoDelete(TRUE);
  insideFormula = FALSE;
  insideCode=FALSE;
  insideCli=Config_getBool("CPP_CLI_SUPPORT");
  previous = 0;
}

static void initEntry()
{
  if (insideJava) 
  {
    protection = (current_root->spec & (Entry::Interface|Entry::Enum)) ?  Public : Package;
  }
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = language;
  //printf("*** initEntry() language=%d\n",language);
  //if (!autoGroupStack.isEmpty())
  //{
  //  //printf("Appending group %s\n",autoGroupStack.top()->groupname.data());
  //  current->groups->append(new Grouping(*autoGroupStack.top()));
  //}
  initGroupInfo(current);
  isTypedef=FALSE;
}


//-----------------------------------------------------------------------------

///// remove any automatic grouping and add new one (if given)
//static void setCurrentGroup( QCString *newgroup, Grouping::GroupPri_t pri )
//{
//   /* remove auto group name from current entry and discard it */
//   Grouping *g = current->groups->first();
//   int i=0; 
//   while (g)
//   {
//     if (g->pri <= Grouping::GROUPING_AUTO_DEF)
//     {
//       current->groups->remove(i);
//       i--;
//     }
//     g=current->groups->next();
//     i++;
//   }
//
//   /* use new group name instead? */
//   if ( newgroup )
//   {
//      current->groups->append(new Grouping(*newgroup, pri));
//   } 
//}
//
//static int newMemberGroupId()
//{
//  static int curGroupId=0;
//  return curGroupId++;
//}
//
// forward declarations
//static void startGroupInDoc();
//static void endGroup();

//-----------------------------------------------------------------------------

static void lineCount()
{
  static int tabSize = Config_getInt("TAB_SIZE");
  const char *p;
  for (p = scanYYtext ; *p ; ++p )
  {
    if (*p=='\n') 
      yyLineNr++,g_column=0;
    else if (*p=='\t') 
      g_column+=tabSize - (g_column%tabSize);
    else 
      g_column++;
  }
}

static inline int computeIndent(const char *s,int startIndent)
{
  int col=startIndent;
  static int tabSize=Config_getInt("TAB_SIZE");
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c=='\t') col+=tabSize-(col%tabSize);
    else col++;
  }
  return col;
}

static void addType( Entry* current )
{
    uint tl=current->type.length();
    if( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void startCommentBlock(bool);
static void handleCommentBlock(const QCString &doc,bool brief);
static void handleParametersCommentBlocks(ArgumentList *al);

//-----------------------------------------------------------------

static bool nameIsOperator(QCString &name)
{
  int i=name.find("operator");
  if (i==-1) return FALSE;
  if (i==0 && !isId(name.at(8))) return TRUE; // case operator ::X
  if (i>0 && !isId(name.at(i-1)) && !isId(name.at(i+8))) return TRUE; // case X::operator
  return FALSE; // case TEXToperatorTEXT
}

//-----------------------------------------------------------------------------

static void setContext()
{
  QCString fileName = yyFileName;
  language   = getLanguageFromFileName(fileName);
  insideIDL  = language==SrcLangExt_IDL;
  insideJava = language==SrcLangExt_Java;
  insideCS   = language==SrcLangExt_CSharp; 
  insideD    = language==SrcLangExt_D;
  insidePHP  = language==SrcLangExt_PHP;
  insideObjC = language==SrcLangExt_ObjC;
  insideJS   = language==SrcLangExt_JS;
  insideCpp  = language==SrcLangExt_Cpp;
  if ( insidePHP )
  {
    useOverrideCommands = TRUE;
  }
  //printf("setContext(%s) insideIDL=%d insideJava=%d insideCS=%d "
  //       "insideD=%d insidePHP=%d insideObjC=%d\n",
  //       yyFileName.data(),insideIDL,insideJava,insideCS,insideD,insidePHP,insideObjC
  //	);
}

//-----------------------------------------------------------------------------

static void prependScope()
{
  if (current_root->section & Entry::SCOPE_MASK)
  {
    //printf("--- prependScope %s to %s\n",current_root->name.data(),current->name.data());
    current->name.prepend(current_root->name+"::");
    if (current_root->tArgLists)
    {
      if (current->tArgLists==0)
      {
	current->tArgLists = new QList<ArgumentList>;
	current->tArgLists->setAutoDelete(TRUE);
      }
      //printf("prependScope #=%d #current=%d\n",current_root->tArgLists->count(),current->tArgLists->count());
      QListIterator<ArgumentList> talsi(*current_root->tArgLists);
      ArgumentList *srcAl=0;
      for (talsi.toLast();(srcAl=talsi.current());--talsi)
      {
        ArgumentList *dstAl = new ArgumentList;
	QListIterator<Argument> tali(*srcAl);
        Argument *a;
        for (;(a=tali.current());++tali)
        {
          dstAl->append(new Argument(*a));
        //printf("appending argument %s %s\n",a->type.data(),a->name.data());
        }	  
        current->tArgLists->insert(0,dstAl);	
      }
    }
  }
}

//-----------------------------------------------------------------------------

/*! Returns TRUE iff the current entry could be a K&R style C function */
static bool checkForKnRstyleC()
{
  if (((QCString)yyFileName).right(2).lower()!=".c") return FALSE; // must be a C file
  if (!current->argList) return FALSE; // must have arguments
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    // in K&R style argument do not have a type, but doxygen expects a type
    // so it will think the argument has no name
    if (a->type.isEmpty() || !a->name.isEmpty()) return FALSE;
  }
  return TRUE;
}

//-----------------------------------------------------------------------------

static void splitKnRArg(QCString &oldStyleArgPtr,QCString &oldStyleArgName)
{
  int si = current->args.length();
  if (oldStyleArgType.isEmpty()) // new argument
  {
    static QRegExp re("([^)]*)");
    int bi1 = current->args.findRev(re);
    int bi2 = bi1!=-1 ? current->args.findRev(re,bi1-1) : -1; 
    char c;
    if (bi1!=-1 && bi2!=-1) // found something like "int (*func)(int arg)"
    {
      int s=bi2+1;
      oldStyleArgType = current->args.left(s);
      int i=s;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
      oldStyleArgType+=current->args.mid(i);
    }
    else if (bi1!=-1) // redundant braces like in "int (*var)"
    {
      int s=bi1;
      oldStyleArgType = current->args.left(s);
      s++;
      int i=s+1;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
    }
    else // normal "int *var"
    {
      int l=si,i=l-1,j;
      char c;
      // look for start of name in "type *name"
      while (i>=0 && isId(current->args.at(i))) i--;
      j=i+1;
      // look for start of *'s
      while (i>=0 && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i--;
      i++;
      if (i!=l)
      {
	oldStyleArgType=current->args.left(i);
	oldStyleArgPtr=current->args.mid(i,j-i);
	oldStyleArgName=current->args.mid(j).stripWhiteSpace();
      }
      else
      {
	oldStyleArgName=current->args.copy().stripWhiteSpace();
      }
    }
  }
  else // continuation like *arg2 in "int *args,*arg2"
  {
    int l=si,j=0;
    char c;
    while (j<l && ((c=current->args.at(j))=='*' || isspace((uchar)c))) j++;
    if (j>0)
    {
      oldStyleArgPtr=current->args.left(j);
      oldStyleArgName=current->args.mid(j).stripWhiteSpace();
    }
    else
    {
      oldStyleArgName=current->args.copy().stripWhiteSpace();
    }
  }
  //fprintf(stderr,"type=%s ptr=%s name=%s\n",oldStyleArgType.data(),oldStyleArgPtr.data(),oldStyleArgName.data());
}

//-----------------------------------------------------------------------------

/*! Update the argument \a name with additional \a type info. For K&R style
 *  function the type is found \e after the argument list, so this routine
 *  in needed to fix up.
 */
static void addKnRArgInfo(const QCString &type,const QCString &name,
                          const QCString &brief,const QCString &docs)
{
  if (current->argList==0) return;
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (a->type==name)
    {
      a->type=type.stripWhiteSpace();
      if (a->type.left(9)=="register ") // strip keyword
      {
	a->type=a->type.mid(9);
      }
      a->name=name.stripWhiteSpace();
      if (!brief.isEmpty() && !docs.isEmpty())
      {
        a->docs=brief+"\n\n"+docs;
      }
      else if (!brief.isEmpty())
      {
        a->docs=brief;
      }
      else
      {
	a->docs=docs;
      }
    }
  }
}

//-----------------------------------------------------------------------------


void fixArgumentListForJavaScript(ArgumentList *al)
{
  if (al==0) return;
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (!a->type.isEmpty() && a->name.isEmpty())
    { // a->type is actually the (typeless) parameter name, so move it
      a->name=a->type;
      a->type.resize(0);
    }
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    if (g_inputFromFile)
    {
       c = inputFile.readBlock(buf,max_size);
       if (c==-1) yy_fatal_error("input in flex scanner failed");
    }
    else
    {
      while( c < max_size && inputString[inputPosition] )
      {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
      }
    }
    return c;
}

/* start command character */
/* language parsing states */
































































































































/** Prototype scanner states */





/** comment parsing states */



#line 10544 "<stdout>"

#define INITIAL 0
#define Define 1
#define DefineEnd 2
#define CompoundName 3
#define ClassVar 4
#define CSConstraintName 5
#define CSConstraintType 6
#define CSIndexer 7
#define ClassCategory 8
#define ClassTemplSpec 9
#define CliPropertyType 10
#define CliPropertyIndex 11
#define CliOverride 12
#define Bases 13
#define BasesProt 14
#define NextSemi 15
#define BitFields 16
#define EnumBaseType 17
#define FindMembers 18
#define FindMembersPHP 19
#define FindMemberName 20
#define FindFields 21
#define FindFieldArg 22
#define Function 23
#define FuncRound 24
#define ExcpRound 25
#define ExcpList 26
#define FuncQual 27
#define TrailingReturn 28
#define Operator 29
#define Array 30
#define ReadBody 31
#define ReadNSBody 32
#define ReadBodyIntf 33
#define Using 34
#define UsingAlias 35
#define UsingDirective 36
#define SkipCurly 37
#define SkipCurlyCpp 38
#define SkipCurlyEndDoc 39
#define SkipString 40
#define SkipPHPString 41
#define SkipInits 42
#define SkipCPP 43
#define SkipCPPBlock 44
#define SkipComment 45
#define SkipCxxComment 46
#define SkipCurlyBlock 47
#define SkipRoundBlock 48
#define Sharp 49
#define SkipSharp 50
#define SkipRound 51
#define SkipSquare 52
#define SkipRemainder 53
#define StaticAssert 54
#define DeclType 55
#define TypedefName 56
#define TryFunctionBlock 57
#define TryFunctionBlockEnd 58
#define Comment 59
#define PackageName 60
#define JavaImport 61
#define PHPUse 62
#define PHPUseAs 63
#define CSAccessorDecl 64
#define CSGeneric 65
#define PreLineCtrl 66
#define DefinePHP 67
#define DefinePHPEnd 68
#define OldStyleArgs 69
#define SkipVerbString 70
#define ObjCMethod 71
#define ObjCReturnType 72
#define ObjCParams 73
#define ObjCParamType 74
#define ObjCProtocolList 75
#define ObjCPropAttr 76
#define ObjCSkipStatement 77
#define QtPropType 78
#define QtPropName 79
#define QtPropAttr 80
#define QtPropRead 81
#define QtPropWrite 82
#define ReadInitializer 83
#define GetCallType 84
#define CppQuote 85
#define EndCppQuote 86
#define MemberSpec 87
#define MemberSpecSkip 88
#define EndTemplate 89
#define FuncPtr 90
#define FuncPtrOperator 91
#define EndFuncPtr 92
#define ReadFuncArgType 93
#define ReadTempArgs 94
#define IDLUnionCase 95
#define NSAliasName 96
#define NSAliasArg 97
#define CopyString 98
#define CopyPHPString 99
#define CopyGString 100
#define CopyPHPGString 101
#define CopyRound 102
#define CopyCurly 103
#define GCopyRound 104
#define GCopyCurly 105
#define SkipUnionSwitch 106
#define Specialization 107
#define FuncPtrInit 108
#define FuncFunc 109
#define FuncFuncEnd 110
#define FuncFuncType 111
#define FuncFuncArray 112
#define CopyArgString 113
#define CopyArgPHPString 114
#define CopyArgRound 115
#define CopyArgSharp 116
#define CopyArgComment 117
#define CopyArgCommentLine 118
#define CopyArgVerbatim 119
#define HereDoc 120
#define HereDocEnd 121
#define CopyHereDoc 122
#define CopyHereDocEnd 123
#define RawString 124
#define RawGString 125
#define IDLAttribute 126
#define IDLProp 127
#define IDLPropName 128
#define Prototype 129
#define PrototypePtr 130
#define PrototypeQual 131
#define PrototypeExc 132
#define PrototypeSkipLine 133
#define DocLine 134
#define DocBlock 135
#define DocCopyBlock 136

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int scanYYlex_destroy (void );

int scanYYget_debug (void );

void scanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE scanYYget_extra (void );

void scanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *scanYYget_in (void );

void scanYYset_in  (FILE * in_str  );

FILE *scanYYget_out (void );

void scanYYset_out  (FILE * out_str  );

yy_size_t scanYYget_leng (void );

char *scanYYget_text (void );

int scanYYget_lineno (void );

void scanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scanYYwrap (void );
#else
extern int scanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( scanYYtext, scanYYleng, 1, scanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scanYYin))==0 && ferror(scanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scanYYlex (void);

#define YY_DECL int scanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scanYYtext and scanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( scanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(scanYYtext[scanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 766 "scanner.l"


#line 10868 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)scanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in scanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scanYYin )
			scanYYin = stdin;

		if ( ! scanYYout )
			scanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
		}

		scanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 4192 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 32864 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 768 "scanner.l"
{
  					  curlyCount=0;
					  needsSemi = TRUE;
  					  BEGIN(SkipCurlyBlock); 
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 773 "scanner.l"
{
  				 	  roundCount=0;
  					  BEGIN(SkipRoundBlock);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 777 "scanner.l"
{
					  ++roundCount;
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 780 "scanner.l"
{
  					  if (roundCount )
					    --roundCount ;
					  else
					    BEGIN( NextSemi ) ;
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 786 "scanner.l"
{
  					  ++curlyCount ; 
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 789 "scanner.l"
{ 
  				          if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else if (needsSemi)
					  {
					    BEGIN( NextSemi );
					  }
					  else
					  {
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 803 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=NextSemi;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 810 "scanner.l"
{ if (insidePHP) REJECT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 811 "scanner.l"
{
  					  lastStringContext=NextSemi;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 815 "scanner.l"
{ 
  					  unput(*scanYYtext);
  					  BEGIN( FindMembers ); 
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 819 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 823 "scanner.l"
{
                                          current->args = current->args.simplifyWhiteSpace();
  					  unput(*scanYYtext);
					  BEGIN( ClassVar );
                                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 828 "scanner.l"
{ // PHP code with unsupported extension?
                                          insidePHP = TRUE;
  					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 831 "scanner.l"
{ // PHP code start
                                           BEGIN( FindMembers );
					}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 834 "scanner.l"
{ // PHP code start
					  lineCount() ;
                                          BEGIN( FindMembers );
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 838 "scanner.l"
{ // Non-PHP code text, ignore
  					}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 840 "scanner.l"
{ // Non-PHP code text, ignore
                                          lineCount();
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 843 "scanner.l"
{ // Non-PHP code text, ignore
				        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 845 "scanner.l"
{ // PHP code end
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    REJECT;
                                        }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 851 "scanner.l"
{ if (insidePHP)
					    BEGIN( NextSemi );
					  else
					    REJECT;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 856 "scanner.l"
{ // Mozilla XPIDL lang-specific block
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 860 "scanner.l"
{ // Mozilla XPIDL lang-specific block end
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 864 "scanner.l"
{ // IDL or Borland C++ builder property 
  					  current->mtype = mtype = Property;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 874 "scanner.l"
{ current->mtype = mtype = DCOP;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 883 "scanner.l"
{ current->mtype = mtype = Signal;
  
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 893 "scanner.l"
{
					  current->protection = protection = Public ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 903 "scanner.l"
{
					  current->protection = protection = Protected ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 913 "scanner.l"
{
					  current->protection = protection = Private ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 922 "scanner.l"
{ 
					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 931 "scanner.l"
{  // for now treat C++/CLI's internal as package...
  					  if (insideCli)
					  {
					    current->protection = protection = Package ;
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    lineCount() ;
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 947 "scanner.l"
{  
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 956 "scanner.l"
{ 
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 965 "scanner.l"
{ 
  					  if (insideCli)
					  {
					    // C++/CLI event
					    lineCount() ;
  					    current->mtype = mtype = Event;
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CliPropertyType );
					  }
					  else if (insideCS)
					  {
					    lineCount() ;
  					    current->mtype = Event;
					    current->bodyLine = yyLineNr;
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 986 "scanner.l"
{
  					   if (insideCli)
					   {
					     // C++/CLI property
					     lineCount() ;
  					     current->mtype = mtype = Property;
					     current->bodyLine = yyLineNr;
					     curlyCount=0;
					     BEGIN( CliPropertyType );
					   }
					   else
					   {
					     REJECT;
					   }
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1001 "scanner.l"
{
  					  addType( current );
  					  current->name = scanYYtext;
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1005 "scanner.l"
{ // C++/CLI indexed property
  					  current->name += scanYYtext;
					  BEGIN( CliPropertyIndex );
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1009 "scanner.l"
{
					  curlyCount=0;
					  //printf("event: '%s' '%s'\n",current->type.data(),current->name.data());
  					  BEGIN( CSAccessorDecl );
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1014 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 1018 "scanner.l"
{
                                          lineCount();
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1021 "scanner.l"
{
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1023 "scanner.l"
{
  					  addType( current );
  					  current->type += scanYYtext;
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1027 "scanner.l"
{
                                          BEGIN( CliPropertyType );
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1031 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
/*
<FindMembers>{B}*"property"{BN}+        { 
                                          if (!current->type.isEmpty())
					  {
					    REJECT;
                                          }
					  else
					  { 
                                            current->mtype = mtype = Property;
                                            lineCount();
					  }
                                        }
  */
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 1047 "scanner.l"
{
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1056 "scanner.l"
{
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1065 "scanner.l"
{
  					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1074 "scanner.l"
{
  					  if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
  					    lineCount();
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    current->section = Entry::FUNCTION_SEC;
					    current->protection = protection = Public ;
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					    current->virt = Virtual;
					    current->stat=scanYYtext[0]=='+';
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    BEGIN( ObjCMethod );
					  }
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1099 "scanner.l"
{ // start of method's return type
  					  BEGIN( ObjCReturnType );
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1102 "scanner.l"
{ // found method name
  					  if (current->type.isEmpty())
					  {
					    current->type = "id";
					  }
					  current->name = scanYYtext;
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1109 "scanner.l"
{ // start of parameter list
  					  current->name += ':';
  					  Argument *a = new Argument;
					  current->argList->append(a);
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1115 "scanner.l"
{ // TODO: check if nested braches are possible.
  					  current->type = scanYYtext;
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1118 "scanner.l"
{
  					  BEGIN( ObjCMethod );
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1121 "scanner.l"
{ // Keyword of parameter
					  QCString keyw = scanYYtext;
					  keyw=keyw.left(keyw.length()-1); // strip :
					  if (keyw.isEmpty())
					  {
					    current->name += " :";
					  }
					  else
					  {
					    current->name += keyw+":";
					  }
					  if (current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  Argument *a = new Argument;
  					  a->attrib=(QCString)"["+keyw+"]";
					  current->argList->append(a);
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1140 "scanner.l"
{ // name of parameter
  					  lineCount();
  					  current->argList->getLast()->name=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1144 "scanner.l"
{ // name of parameter
  					  lineCount();
					  // do we want the comma as part of the name?
  					  //current->name += ",";
  					  Argument *a = new Argument;
  					  a->attrib="[,]";
  					  a->type="...";
					  current->argList->append(a);
  					}
	YY_BREAK
/*
<ObjCParams>":"				{ 
					  current->name += ':';
					}
   */
case 56:
YY_RULE_SETUP
#line 1158 "scanner.l"
{
  					  BEGIN( ObjCParamType );
  					}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1161 "scanner.l"
{
  					  current->argList->getLast()->type=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1164 "scanner.l"
{
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1167 "scanner.l"
{ // end of method declaration
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
					  //printf("argList=%s\n",current->args.data());
  					  unput(';');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1177 "scanner.l"
{ // start of a method body
  					  lineCount();
                                          //printf("Type=%s Name=%s args=%s\n",
					  //    current->type.data(),current->name.data(),argListToString(current->argList).data()
					  //    );
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
                                          unput('{');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1190 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1193 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
  					    lineCount();
					    lastSkipRoundContext = YY_START;
					    roundCount=1;
					    BEGIN( SkipRound );
					  }
					  else if (strncmp(scanYYtext,"@property",9)==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Readable | Entry::Writable | Entry::Assign;
					    current->protection = Public ;
					    unput('(');
					    BEGIN( ObjCPropAttr );
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1214 "scanner.l"
{ 
                                          current->read = scanYYtext+7;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1217 "scanner.l"
{ 
                                          current->write = scanYYtext+7;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1220 "scanner.l"
{
					  current->spec&=~Entry::Writable;
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1223 "scanner.l"
{ // default
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1225 "scanner.l"
{ // default
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1227 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Unretained;
                                        }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1231 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Retain;
  					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1235 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Copy;
  					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1239 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Weak;
                                        }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1243 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Strong;
                                        }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1247 "scanner.l"
{
					  current->spec|=Entry::NonAtomic;
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1250 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1253 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
					    // skip annotation
					  }
					  else if (strcmp(scanYYtext,"@property")==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Writable | Entry::Readable;
					    current->protection = Public ;
					  }
					  else if (strcmp(scanYYtext,"@synthesize")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else if (strcmp(scanYYtext,"@dynamic")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1277 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1280 "scanner.l"
{
  					  isTypedef=FALSE;
					  //printf("Found namespace %s lang=%d\n",scanYYtext,current->lang);
					  current->name = scanYYtext;
					  current->name = substitute(current->name,".","::");
					  current->name = substitute(current->name,"\\","::");
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
  					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1293 "scanner.l"
{
					  current_root->addSubEntry(current);
                                          current_root = current ;
					  current = new Entry ;
					  initEntry();
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1300 "scanner.l"
{
					  curlyCount=0;
					  BEGIN( ReadNSBody );
  					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1304 "scanner.l"
{
  					  current->type += " initonly ";
					  if (insideCli) current->spec |= Entry::Initonly;
					  lineCount();
  					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1309 "scanner.l"
{ current->type += " static ";
  					  current->stat = TRUE;
					  lineCount();
					}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1313 "scanner.l"
{
  					  current->stat = FALSE;
					  current->explicitExternal = TRUE;
					  lineCount();
  					}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1318 "scanner.l"
{ current->type += " virtual ";
					  current->virt = Virtual;
					  lineCount();
					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1322 "scanner.l"
{ 
                                          if (!insidePHP) 
					  {
					    current->type += " abstract ";
					    current->virt = Pure;
					  }
					  else
					  {
					    current->spec|=Entry::Abstract;
					  }
					  lineCount();
					}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1334 "scanner.l"
{ current->spec|=Entry::Inline;
                                          lineCount(); 
                                        }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1337 "scanner.l"
{ current->spec|=Entry::Mutable;
                                          lineCount(); 
                                        }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1340 "scanner.l"
{ current->spec|=Entry::Explicit;
                                          lineCount(); 
                                        }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1343 "scanner.l"
{ // Objective C 2.0 protocol required section
                                          current->spec=(current->spec & ~Entry::Optional) | Entry::Required;
                                          lineCount(); 
                                        }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1347 "scanner.l"
{  // Objective C 2.0 protocol optional section
                                          current->spec=(current->spec & ~Entry::Required) | Entry::Optional;
                                          lineCount(); 
                                        }
	YY_BREAK
/*
<FindMembers>{B}*"import"{BN}+		{ // IDL import keyword
  					  BEGIN( NextSemi );
  					}
  */
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1356 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 91:
/* rule 91 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1357 "scanner.l"
{ 
  					  isTypedef=FALSE;
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  if (insidePHP)
					  {
					    BEGIN( PackageName );
					  }
					  else
					  {
  					    BEGIN( CompoundName ); 
					  }
					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1374 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "module" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else if (insideD)
					  {
					    lineCount();
					    BEGIN(PackageName);
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1397 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "library" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1415 "scanner.l"
{ // M$/Corba IDL/Java interface
					  lineCount();
                                          if (insideIDL || insideJava || insideCS || insideD || insidePHP)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
                                            current->spec = Entry::Interface;
					    addType( current ) ;
					    current->type += " interface" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    BEGIN( CompoundName );
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
  					}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1435 "scanner.l"
{ // Objective-C class implementation
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::OBJCIMPL_SEC;
					  language = current->lang = SrcLangExt_ObjC;
					  insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " implementation" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1449 "scanner.l"
{ // Objective-C class interface, or Java attribute
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  if (!insideJava)
					  {
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					  }
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " interface" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1467 "scanner.l"
{ // Objective-C protocol definition
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Protocol;
					  language = current->lang = SrcLangExt_ObjC;
					  insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " protocol" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1482 "scanner.l"
{ // Corba IDL exception
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Exception;
					  addType( current ) ;
					  current->type += " exception" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 99:
#line 1495 "scanner.l"
case 100:
/* rule 100 can match eol */
#line 1496 "scanner.l"
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1496 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
					  addType( current ) ;
					  current->type += " class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  if (scanYYtext[0]=='@')
					  {
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					  }
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  if (insidePHP && current->spec&Entry::Abstract)
					  {
					    // convert Abstract to AbstractClass
					    current->spec=(current->spec&~Entry::Abstract)|Entry::AbstractClass;
					  }
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 102:
#line 1519 "scanner.l"
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1519 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Value;
					  addType( current ) ;
					  current->type += " value class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 104:
#line 1533 "scanner.l"
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 1533 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Ref;
					  addType( current ) ;
					  current->type += " ref class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 106:
#line 1547 "scanner.l"
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1547 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  addType( current ) ;
					  current->type += " interface class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1560 "scanner.l"
{
  					  if (insideIDL)
					  {
					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
					    addType( current ) ;
					    current->type += " coclass" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    lineCount() ;
					    BEGIN( CompoundName ) ;
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
					  }
  					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
#line 1582 "scanner.l"
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 1582 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC ;
                                          current->spec    = Entry::Struct;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 111:
#line 1598 "scanner.l"
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1598 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Value;
					  addType( current ) ;
					  current->type += " value struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 113:
#line 1612 "scanner.l"
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1612 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Ref;
					  addType( current ) ;
					  current->type += " ref struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 115:
#line 1626 "scanner.l"
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1626 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Interface;
					  addType( current ) ;
					  current->type += " interface struct";
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
#line 1640 "scanner.l"
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1640 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Union;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " union" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 119:
/* rule 119 can match eol */
#line 1656 "scanner.l"
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1656 "scanner.l"
{ // for IDL: typedef [something] enum
                                          QCString text=scanYYtext;
					  isTypedef    = text.find("typedef")!=-1;
                                          bool isStrongEnum = text.find("struct")!=-1 || text.find("class")!=-1;
					  if (insideJava)
					  {
					    current->section = Entry::CLASS_SEC;
					    current->spec    = Entry::Enum;
					  }
					  else
					  {
  					    current->section = Entry::ENUM_SEC ;
					  }
					  addType( current ) ;
					  current->type += " enum";
                                          if (isStrongEnum)
                                          {
                                            current->spec |= Entry::Strong;
                                          }
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 121:
/* rule 121 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1682 "scanner.l"
{  // A::operator()<int>(int arg)
  					  lineCount();
					  current->name += "()";
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1687 "scanner.l"
{
  					  lineCount();
    					  current->name += scanYYtext ;
					  current->name = current->name.simplifyWhiteSpace();
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1693 "scanner.l"
{ // can occur when importing members
  					  unput(';');
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1697 "scanner.l"
{ 
    					  lineCount();
    					  current->name += *scanYYtext ;
					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1701 "scanner.l"
{ /* skip guided templ specifiers */ }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1702 "scanner.l"
{
					  current->name = current->name.simplifyWhiteSpace();
					  unput(*scanYYtext);
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1707 "scanner.l"
{  // generic is a C++/CLI extension
  					  lineCount();
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  //current->spec |= (scanYYtext[0]=='g') ? Entry::Generic : Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  fullArgString = templateStr;
					  copyArgString = &templateStr;
					  currentArgumentContext = FindMembers;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1724 "scanner.l"
{ // namespace alias
                                          lineCount(); 
  					  BEGIN( NSAliasName );
					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1728 "scanner.l"
{
  					  aliasName = scanYYtext;
					  BEGIN( NSAliasArg );
  					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1732 "scanner.l"
{
  					  //printf("Inserting namespace alias %s::%s->%s\n",current_root->name.data(),aliasName.data(),scanYYtext);
					  //if (current_root->name.isEmpty())
					  //{
                                          // TODO: namespace aliases are now treated as global entities
                                          // while they should be aware of the scope they are in
                                            Doxygen::namespaceAliasDict.insert(aliasName,new QCString(scanYYtext));
					  //}
					  //else
					  //{
                                          //  Doxygen::namespaceAliasDict.insert(current_root->name+"::"+aliasName,
					  //	new QCString(current_root->name+"::"+scanYYtext));
					  //}
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1746 "scanner.l"
{
  					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1749 "scanner.l"
{
  					  lineCount();
					  aliasName=scanYYtext;
					  BEGIN(PHPUseAs);
					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1754 "scanner.l"
{
  					  lineCount();
					  current->name=removeRedundantWhiteSpace(substitute(scanYYtext,"\\","::"));
  					  //printf("PHP: adding use relation: %s\n",current->name.data());
                                          current->fileName = yyFileName; 
                                          // add a using declaraton
  					  current->section=Entry::USINGDECL_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry(*current);
                                          // also add it as a using directive
					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  aliasName.resize(0);
					}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1770 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1773 "scanner.l"
{
  					  //printf("PHP: adding use as relation: %s->%s\n",scanYYtext,aliasName.data());
                                          Doxygen::namespaceAliasDict.insert(scanYYtext,
					       new QCString(removeRedundantWhiteSpace(
						   substitute(aliasName,"\\","::"))));
					  aliasName.resize(0);
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1780 "scanner.l"
{
					  if (*scanYYtext==',')
					  {
					    BEGIN(PHPUse);
					  }
					  else
					  {
  					    BEGIN(FindMembers);
					  }
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1790 "scanner.l"
{ // package import => add as a using directive
  					  lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope.left(scope.length()-1),".","::"));
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1801 "scanner.l"
{ // class import => add as a using declaration
                                          lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope,".","::"));
					  current->fileName = yyFileName; 
					  if (insideD) 
					  {
					    current->section=Entry::USINGDIR_SEC;
					  }
					  else
					  {
					    //printf("import name = %s -> %s\n",scanYYtext,current->name.data());
					    current->section=Entry::USINGDECL_SEC;
					  }
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1820 "scanner.l"
{ 
					  current->startLine=yyLineNr; 
                                          lineCount(); 
                                          BEGIN(Using); 
                                        }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1825 "scanner.l"
{ lineCount(); BEGIN(UsingDirective); }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1826 "scanner.l"
{
                                          lineCount();
  					  current->name=scanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDECL_SEC;
                                          current->startLine = yyLineNr;
					  current_root->addSubEntry(current);
                                          previous = current;
					  current             = new Entry ;
					  if (insideCS) /* Hack: in C# a using declaration and 
							   directive have the same syntax, so we
							   also add it as a using directive here
							 */
					  {
					    current->name=scanYYtext;
					    current->fileName = yyFileName; 
					    current->startLine = yyLineNr;
					    current->section=Entry::USINGDIR_SEC;
					    current_root->addSubEntry(current);
					    current             = new Entry ;
					  }
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1850 "scanner.l"
{ // C++11 style template alias?
                                          BEGIN(UsingAlias);
                                        }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1853 "scanner.l"
{ 
                                          previous->section=Entry::VARIABLE_SEC;
                                          previous->type = "typedef "+previous->args;
					  previous->type=previous->type.simplifyWhiteSpace();
                                          previous->args.resize(0);
					  previous->name=previous->name.stripWhiteSpace();
					  previous->bodyLine = yyLineNr;
                                          previous->spec |= Entry::Alias;
                                          BEGIN(FindMembers); 
                                        }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1863 "scanner.l"
{
                                          previous->args+=scanYYtext;
                                        }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1866 "scanner.l"
{
                                          previous->args+=scanYYtext;
                                          lineCount();
                                        }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 1870 "scanner.l"
{ current->name=removeRedundantWhiteSpace(scanYYtext);
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1878 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1879 "scanner.l"
{ // guided template decl
					  QCString n=scanYYtext;
					  addType( current );
					  current->name=n.left(n.length()-2);
					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1884 "scanner.l"
{ // Note: this could be a return type!
                                          roundCount=0;
  					  sharpCount=0;
					  lineCount();
					  addType( current );
  					  current->name=scanYYtext;
					  current->name=current->name.stripWhiteSpace();
					  //current->scopeSpec.resize(0);
					  // currentTemplateSpec = &current->scopeSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
					}
	YY_BREAK
case 150:
/* rule 150 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1898 "scanner.l"
{
  					  sharpCount=0;
					  roundCount=0;
					  lineCount();
  					  current->name+=((QCString)scanYYtext).stripWhiteSpace();
					  //current->memberSpec.resize(0);
					  // currentTemplateSpec = &current->memberSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1910 "scanner.l"
{
  					  if (!insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {
                                            lastHereDocContext = YY_START;
					    BEGIN(HereDoc);
					  }
  					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1921 "scanner.l"
{
  					  current->name+=scanYYtext;
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1925 "scanner.l"
{ 
  					  current->name+='<';
  					  // *currentTemplateSpec+='<'; 
					  sharpCount++; 
					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1930 "scanner.l"
{
  					  if (insideJava || insideCS || insideCli || roundCount==0)
					  {
					    unput('>');
					    unput(' ');
					    unput('>');
					  }
					  else
					  {
  					    current->name+=scanYYtext;
					  }
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1943 "scanner.l"
{
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {  
					    //printf("Found %s\n",current->name.data());
					    BEGIN(FindMembers);
					  }
					}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 1952 "scanner.l"
{ 
  					  lineCount();
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    current->bodyLine = yyLineNr;
					    current->args = "(";
					    currentArgumentContext = FuncQual;
					    fullArgString = current->args.copy();
					    copyArgString = &current->args;
					    //printf("Found %s\n",current->name.data());
					    BEGIN( ReadFuncArgType ) ;
					  }
					}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 1967 "scanner.l"
{ // function pointer returning a template instance
  					  lineCount();
  					  current->name+='>';
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1972 "scanner.l"
{
  					  lineCount();
  					  current->name+='>';
  					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    BEGIN(FindMemberName);
					  }
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1981 "scanner.l"
{ current->name+=*scanYYtext;
                                          roundCount++; 
                                        }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1984 "scanner.l"
{ current->name+=*scanYYtext;
                                          if (roundCount>0) roundCount--; 
                                        }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1987 "scanner.l"
{ 
  					  current->name+=*scanYYtext;
  					  // *currentTemplateSpec+=*scanYYtext; 
					}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1991 "scanner.l"
{
					  if (insidePHP)
					  {
					    current->bodyLine = yyLineNr;
					    BEGIN( DefinePHP );
					  }
					  else
					    REJECT;
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 2000 "scanner.l"
{ // PHP heredoc
  					  g_delimiter = scanYYtext;
                                          *pCopyHereDocGString += scanYYtext;
					  BEGIN(CopyHereDocEnd);
                                        }
	YY_BREAK
case 164:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2005 "scanner.l"
{ // PHP nowdoc
  					  g_delimiter = &scanYYtext[1];
                                          *pCopyHereDocGString += scanYYtext;
					  BEGIN(CopyHereDocEnd);
                                        }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 2010 "scanner.l"
{ // PHP heredoc
  					  g_delimiter = scanYYtext;
					  BEGIN(HereDocEnd);
  					}
	YY_BREAK
case 166:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2014 "scanner.l"
{ // PHP nowdoc
  					  g_delimiter = &scanYYtext[1];
					  BEGIN(HereDocEnd);
  					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 2018 "scanner.l"
{ // id at start of the line could mark the end of the block
  					  if (g_delimiter==scanYYtext) // it is the end marker
					  {
  					    BEGIN(lastHereDocContext);
					  }
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 2024 "scanner.l"
{ }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 2025 "scanner.l"
{ // id at start of the line could mark the end of the block
                                          *pCopyHereDocGString += scanYYtext;
  					  if (g_delimiter==scanYYtext) // it is the end marker
					  {
  					    BEGIN(lastHereDocContext);
					  }
  					}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 2032 "scanner.l"
{ 
                                          *pCopyHereDocGString += scanYYtext;
                                        }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2035 "scanner.l"
{ 
                                          *pCopyHereDocGString += scanYYtext;
                                        }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2038 "scanner.l"
{ // Qt object macro
  					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2040 "scanner.l"
{ // Qt property declaration
					  current->protection = protection = Public ;
  					  current->mtype = mtype = Property;
					  current->type.resize(0);
  					  BEGIN(QtPropType);
  					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2046 "scanner.l"
{ // start of property arguments
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2048 "scanner.l"
{ // end of property arguments
  					  unput(';');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2052 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 2055 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2058 "scanner.l"
{
  					  current->type+=scanYYtext;
                                          BEGIN(QtPropName);
  					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2062 "scanner.l"
{
  					  current->name=scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2066 "scanner.l"
{
  					  current->spec |= Entry::Readable;
					  BEGIN(QtPropRead);
  					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2070 "scanner.l"
{
  					  current->spec |= Entry::Writable;
					  BEGIN(QtPropWrite);
  					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2074 "scanner.l"
{ // reset method => not supported yet
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2076 "scanner.l"
{ // scriptable property => not supported yet
  					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2078 "scanner.l"
{ // designable property => not supported yet
  					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2080 "scanner.l"
{
  					  current->read = scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2084 "scanner.l"
{
  					  current->write = scanYYtext;
					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 2088 "scanner.l"
{
  					  current->name=scanYYtext;
				          BEGIN(FindMembers);
			 	        }
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 2092 "scanner.l"
{
					  lineCount();
                                          if (insideIDL && scanYYleng==9 && strcmp(scanYYtext,"cpp_quote")==0)
					  {
					    BEGIN(CppQuote);
					  }
					  else if ((insideIDL || insideJava || insideD) && scanYYleng==6 && strcmp(scanYYtext,"import")==0)
					  {
					    if (insideIDL)
					      BEGIN(NextSemi);
					    else // insideJava or insideD
					      BEGIN(JavaImport);
					  }
					  else if (insidePHP && strcmp(scanYYtext,"use")==0)
					  {
					    BEGIN(PHPUse);
					  }
					  else if (insideJava && strcmp(scanYYtext,"package")==0)
					  {
  					    lineCount();
					    BEGIN(PackageName);
					  }
					  else if (insideIDL && strcmp(scanYYtext,"case")==0)
					  {
					    BEGIN(IDLUnionCase);
					  }
					  else if (insideTryBlock && strcmp(scanYYtext,"catch")==0)
					  {
					    insideTryBlock=FALSE;
					    BEGIN(TryFunctionBlock);
					  }
					  else if (insideJS && strcmp(scanYYtext,"var")==0)
					  { // javascript variable
					    current->type="var";
					  }
					  else if (insideJS && strcmp(scanYYtext,"function")==0)
					  { // javascript function
					    current->type="function";
					  }
					  else if (insideCS && strcmp(scanYYtext,"this")==0)
					  {
					    // C# indexer
					    addType( current ) ;
					    current->name="this";
					    BEGIN(CSIndexer);
					  }
                                          else if (insideCpp && strcmp(scanYYtext,"static_assert")==0)
                                          {
                                            // C++11 static_assert
                                            BEGIN(StaticAssert);
                                          }
                                          else if (insideCpp && strcmp(scanYYtext,"decltype")==0)
                                          {
                                            // C++11 decltype(x)
					    current->type+=scanYYtext;
                                            BEGIN(DeclType);
                                          }
					  else
					  {
					    if (YY_START==FindMembers)
					    {
					      addType( current ) ;
					    }
					    bool javaLike = insideJava || insideCS || insideD || insidePHP || insideJS;
					    if (javaLike && strcmp(scanYYtext,"public")==0)
					    {
					      current->protection = Public;
					    }
					    else if (javaLike && strcmp(scanYYtext,"protected")==0)
					    {
					      current->protection = Protected;
					    }
					    else if (javaLike && strcmp(scanYYtext,"internal")==0)
					    {
					      current->protection = Package;
					    }
					    else if (javaLike && strcmp(scanYYtext,"private")==0)
					    {
					      current->protection = Private;
					    }
					    else if (javaLike && strcmp(scanYYtext,"static")==0)
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
			 		      current->stat = TRUE;
					    }
					    else
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
					      if (current->name.left(7)=="static ")
					      {
						current->stat = TRUE;
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(7)=="inline ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="inline";
						}
						else
						{
						  current->type+="inline ";
						}
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(6)=="const ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="const";
						}
						else
						{
						  current->type+="const ";
						}
						current->name=current->name.mid(6);
					      }
					    }
					    QCString tmp=scanYYtext;
					    if (nameIsOperator(tmp))
                                            {
					      BEGIN( Operator );
                                            }
					    else
                                            {
		 			      BEGIN(FindMembers);
                                            }
					  }
					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 2227 "scanner.l"
{
					  lastSkipRoundContext = FindMembers;
					  roundCount=1;
                                          BEGIN(SkipRound);
                                        }
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 2232 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 2233 "scanner.l"
{ // variable with static_assert as name?
                                          unput(*scanYYtext);
                                          BEGIN(FindMembers);
                                        }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2237 "scanner.l"
{
					  current->type+=scanYYtext;
  					  lastRoundContext=FindMembers;
  					  pCopyRoundString=&current->type;
					  roundCount=0;
                                          BEGIN(CopyRound);
                                        }
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 2244 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2245 "scanner.l"
{
                                          unput(*scanYYtext);
                                          BEGIN(FindMembers);
                                        }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2249 "scanner.l"
{
					  current->name+=removeRedundantWhiteSpace(scanYYtext);
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 2253 "scanner.l"
{ // some number where we did not expect one
  					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2255 "scanner.l"
{
  					  if (insideJava || insideCS || insideD)
					  {
					    current->name+=".";
					  }
  					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2261 "scanner.l"
{
					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 2264 "scanner.l"
{
  					  insideCppQuote=TRUE;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 2268 "scanner.l"

	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2269 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 2270 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 2271 "scanner.l"

	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 2272 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2273 "scanner.l"
{ 
					  curlyCount=0;
					  lastCurlyContext = TryFunctionBlockEnd ;
  					  BEGIN( SkipCurly );
					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 2278 "scanner.l"

	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 2279 "scanner.l"
{ lineCount(); BEGIN(TryFunctionBlock); // {BN}* added to fix bug 611193
					}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 2281 "scanner.l"
{ unput(*scanYYtext); // rule added to fix bug id 601138
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 2284 "scanner.l"
{ unput(*scanYYtext);
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 2287 "scanner.l"
{
  					  insideCppQuote=FALSE;
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 2291 "scanner.l"
{ if (insidePHP)
					    REJECT;
					  lastCPPContext = YY_START;
					  BEGIN( SkipCPP ) ;
					}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 2296 "scanner.l"
{
  					  if (insidePHP)
					    REJECT;
  					  current->bodyLine = yyLineNr;
                                          lastDefineContext = YY_START;
  					  BEGIN( Define );
  					}
	YY_BREAK
case 213:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2303 "scanner.l"
{ /* line control directive */
                                          yyLineNr = atoi(&scanYYtext[1]);
					  //printf("setting line number to %d\n",yyLineNr);
					  lastPreLineCtrlContext = YY_START;
					  if (YY_START==ReadBody || 
					      YY_START==ReadNSBody ||
					      YY_START==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
  					  BEGIN( PreLineCtrl );
  					}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 2315 "scanner.l"
{
				          yyFileName = stripQuotes(scanYYtext);
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
					    current->program+=scanYYtext;
					  }
  					}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 2324 "scanner.l"
{
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
                                        }
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 2332 "scanner.l"
{
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
                                          lineCount();
  					  BEGIN( lastPreLineCtrlContext );
  					}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 2342 "scanner.l"

	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 2343 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 2344 "scanner.l"
{ lineCount();
					  BEGIN( lastCPPContext) ;
					}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 2347 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
					  currentArgumentContext = DefineEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
/*
<DefineArg>")"				{
  					  //printf("Define with args\n");
  					  current->args += ')';
  					  BEGIN( DefineEnd );
  					}
<DefineArg>.				{
  					  current->args += *scanYYtext;
  					}
  */
case 221:
YY_RULE_SETUP
#line 2367 "scanner.l"
{
  					  //printf("Define `%s' without args\n",scanYYtext);
  					  current->bodyLine = yyLineNr;
  					  current->name = scanYYtext;
					  BEGIN(DefineEnd);
  					}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 2373 "scanner.l"
{
  					  //printf("End define: doc=%s docFile=%s docLine=%d\n",current->doc.data(),current->docFile.data(),current->docLine);
                                          lineCount();
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::DEFINE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(lastDefineContext);
  					}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 2387 "scanner.l"
{
  					  //printf("End define\n");
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
                                          current->type       = "const";
                                          QCString init = current->initializer.data();
  					  init = init.simplifyWhiteSpace();
  					  init = init.left(init.length()-1);
                                          current->initializer = init;
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::VARIABLE_SEC; 
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 2404 "scanner.l"

	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 2405 "scanner.l"
{
                                          lineCount();
  					}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 2408 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
					    lastStringContext=DefineEnd;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 2419 "scanner.l"

	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 2420 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1);
  					  current->bodyLine = yyLineNr;
  					  lastRoundContext = DefinePHPEnd;
  					  pCopyRoundGString = &current->initializer;
					  roundCount = 0;
  					  BEGIN( GCopyRound );
					}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 2432 "scanner.l"
{  // ^ and % are C++/CLI extensions
  					  if (insideCli)
					  {
  					    addType( current );
                                            current->name = scanYYtext ; 
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 2443 "scanner.l"
{ 
                                          current->name += scanYYtext ;  
  					  addType( current );
					}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 2447 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ';';
                                          if (YY_START==EnumBaseType && current->section==Entry::ENUM_SEC)
                                          {
                                            current->bitfields = ":"+current->args;
                                            current->args.resize(0);
                                            current->section=Entry::VARIABLE_SEC;
                                          }
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 2476 "scanner.l"
{
  					  lineCount();
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ',';
                                          if (YY_START==EnumBaseType && current->section==Entry::ENUM_SEC)
                                          {
                                            current->bitfields = ":"+current->args;
                                            current->args.resize(0);
                                            current->section=Entry::VARIABLE_SEC;
                                          }
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 2501 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = 0;
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 2525 "scanner.l"
{
  					  //handleGroupStartCommand(current->name);
                                          if (previous && previous->section==Entry::GROUPDOC_SEC)
					  {
					    // link open command to the group defined in the previous entry
					    openGroup(previous,yyFileName,yyLineNr);
					  }
					  else
					  {
					    // link open command to the current entry
					    openGroup(current,yyFileName,yyLineNr);
					  }
					  //current = tmp;
					  initEntry();
					  if (scanYYtext[1]=='/')
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='/')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlockAutoBrief = FALSE;
					      docBlock.resize(0);
					      docBlockTerm = 0;
					      startCommentBlock(TRUE);
					      BEGIN(DocLine);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipCxxComment);
					    }
					  }
					  else
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='*')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlock.resize(0);
					      docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                          ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					      docBlockTerm = 0;
					      startCommentBlock(FALSE);
					      BEGIN(DocBlock);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipComment);
					    }
					  }
  					}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 2577 "scanner.l"
{
  					  closeGroup(current,yyFileName,yyLineNr);
  					}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 2580 "scanner.l"
{ // in PHP code this could also be due to "<?="
  					  current->bodyLine = yyLineNr;
                                          current->initializer = scanYYtext;
					  lastInitializerContext = YY_START;
					  initBracketCount=0;
					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
/* Read initializer rules */
case 237:
YY_RULE_SETUP
#line 2588 "scanner.l"
{
  					  lastRoundContext=YY_START;
  					  pCopyRoundGString=&current->initializer;
					  roundCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyRound);
  					}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 2595 "scanner.l"
{
  					  lastCurlyContext=YY_START;
  					  pCopyCurlyGString=&current->initializer;
					  curlyCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyCurly);
  					}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 2602 "scanner.l"
{
  					  //printf(">> initializer `%s' <<\n",current->initializer.data());
                                          if (*scanYYtext==';' && (current_root->spec&Entry::Enum))
					  {
					    current->fileName   = yyFileName;
					    current->startLine  = yyLineNr;
  					    current->args       = current->args.simplifyWhiteSpace();
  					    current->name       = current->name.stripWhiteSpace();
					    current->section    = Entry::VARIABLE_SEC;
					    current_root->addSubEntry(current);
					    current = new Entry;
					    initEntry();
					    BEGIN(FindMembers);
					  }
					  else if (*scanYYtext==';' || (lastInitializerContext==FindFields && initBracketCount==0)) // initBracketCount==0 was added for bug 665778
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else if (*scanYYtext==',' && initBracketCount==0) // for "int a=0,b=0"
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else
					  {
  					    current->initializer+=*scanYYtext; 
					  }
  					}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 2631 "scanner.l"
{ // C++11 raw string
                                          if (!insideCpp)
                                          { 
                                            REJECT;
                                          }
                                          else
                                          {
                                            QCString text=scanYYtext;
                                            current->initializer+=text;
                                            int i=text.find('"');
                                            g_delimiter = scanYYtext+i+1;
                                            g_delimiter=g_delimiter.left(g_delimiter.length()-1);
                                            lastRawStringContext = YY_START;
                                            pCopyRawGString = &current->initializer;
                                            BEGIN(RawGString);
                                            //printf("RawGString delimiter='%s'\n",delimiter.data());
                                          }
                                        }
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 2649 "scanner.l"
{
                                          *pCopyRawGString+=scanYYtext;
                                          QCString delimiter = scanYYtext+1;
                                          delimiter=delimiter.left(delimiter.length()-1);
                                          if (delimiter==g_delimiter)
                                          {
                                            BEGIN(lastRawStringContext);
                                          }
                                        }
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 2658 "scanner.l"
{
                                          *pCopyRawGString+=scanYYtext;
                                        }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 2661 "scanner.l"
{
                                          *pCopyRawGString+=scanYYtext;
                                        }
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 2664 "scanner.l"
{
                                          *pCopyRawGString+=scanYYtext;
                                          lineCount();
                                        }
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 2668 "scanner.l"
{
                                          *pCopyRawString+=scanYYtext;
  					  fullArgString+=scanYYtext;
                                          QCString delimiter = scanYYtext+1;
                                          delimiter=delimiter.left(delimiter.length()-1);
                                          if (delimiter==g_delimiter)
                                          {
                                            BEGIN(lastRawStringContext);
                                          }
                                        }
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 2678 "scanner.l"
{
                                          *pCopyRawString+=scanYYtext;
  					  fullArgString+=scanYYtext;
                                        }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 2682 "scanner.l"
{
                                          *pCopyRawString+=scanYYtext;
  					  fullArgString+=scanYYtext;
                                        }
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 2686 "scanner.l"
{
                                          *pCopyRawString+=scanYYtext;
  					  fullArgString+=scanYYtext;
                                          lineCount();
                                        }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 2691 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
  					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
                                            lastStringContext=YY_START;
  					    current->initializer+=scanYYtext; 
  					    pCopyQuotedGString=&current->initializer;
					    BEGIN(CopyGString);
					  }
					}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 2704 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 2707 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 2710 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
  					}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 2713 "scanner.l"
{
  					  initBracketCount++;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 2717 "scanner.l"
{
  					  initBracketCount--;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 2721 "scanner.l"
{	
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = &current->initializer;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    current->initializer+=scanYYtext; 
					  }
  					}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 2734 "scanner.l"
{ 
                                          if (insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {  
					    current->initializer+=scanYYtext; 
					  }
                                        } 
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 2744 "scanner.l"
{
  					  current->initializer+=*scanYYtext;
                                          lineCount();
  					}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 2748 "scanner.l"
{ 
  					  //printf("insideCS=%d\n",insideCS);
  					  current->initializer+=scanYYtext;
                                          if (!insideCS && !insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    // C#/ObjC verbatim string
					    lastSkipVerbStringContext=YY_START;
					    pSkipVerbString=&current->initializer;
					    BEGIN(SkipVerbString);
					  }
					}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 2763 "scanner.l"
{
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 2766 "scanner.l"
{ // quote escape
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 2769 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  BEGIN(lastSkipVerbStringContext);
					}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 2773 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
                                          lineCount();
  					}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 2777 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
  					}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 2780 "scanner.l"
{
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    current->initializer+=scanYYtext;
  					}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 2786 "scanner.l"
{ 
  					  current->initializer+=*scanYYtext; 
					}
	YY_BREAK
/* generic quoted string copy rules */
case 266:
YY_RULE_SETUP
#line 2791 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 2794 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 2798 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 2802 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 2805 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
                                          lineCount();
  					}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 2809 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					}
	YY_BREAK
/* generic quoted growable string copy rules */
case 272:
YY_RULE_SETUP
#line 2814 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 2817 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 2821 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 2825 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 2828 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
                                          lineCount();
  					}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 2832 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules */
case 278:
YY_RULE_SETUP
#line 2837 "scanner.l"
{
					  *pCopyRoundString+=*scanYYtext;
  					  pCopyQuotedString=pCopyRoundString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 2843 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 2847 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 2852 "scanner.l"
{
                                          lineCount();
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 2856 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedString = pCopyRoundString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					  else
					  {
					    *pCopyRoundString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 2869 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 2879 "scanner.l"
{
  					  *pCopyRoundString+=scanYYtext;
  					}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 2882 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules for growable strings */
case 286:
YY_RULE_SETUP
#line 2887 "scanner.l"
{
					  *pCopyRoundGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyRoundGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 2893 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 2897 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 2902 "scanner.l"
{
                                          lineCount();
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 2906 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = pCopyRoundGString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    *pCopyRoundGString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 2919 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 2929 "scanner.l"
{
  					  *pCopyRoundGString+=scanYYtext;
  					}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 2932 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules */
case 294:
YY_RULE_SETUP
#line 2937 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  pCopyQuotedString=pCopyCurlyString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 2943 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedString=pCopyCurlyString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 2952 "scanner.l"
{
  					  *pCopyCurlyString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 2956 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 2961 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 2970 "scanner.l"
{
  					  *pCopyCurlyString+=scanYYtext;
  					}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 2973 "scanner.l"
{ *pCopyCurlyString+=scanYYtext; }
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 2974 "scanner.l"
{
                                          lineCount();
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 2978 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules for growable strings */
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 2983 "scanner.l"
{ // start of included file marker
                                        }
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 2985 "scanner.l"
{ // end of included file marker
					  QCString line = QCString(scanYYtext);
					  int s = line.find(' ');
					  int e = line.find('"',s);
					  yyLineNr = line.mid(s,e-s).toInt();
					  if (scanYYtext[scanYYleng-1]=='\n')
					  {
					    yyLineNr++;
                                            g_column=0;
					  }
  					}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 2996 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyCurlyGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 3002 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedGString=pCopyCurlyGString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 3011 "scanner.l"
{
  					  *pCopyCurlyGString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 3015 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 3020 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 3029 "scanner.l"
{
  					  *pCopyCurlyGString+=scanYYtext;
  					}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 3032 "scanner.l"
{ *pCopyCurlyGString+=scanYYtext; }
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 3033 "scanner.l"
{
                                          lineCount();
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 3037 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
/* ---------------------- */
case 314:
YY_RULE_SETUP
#line 3044 "scanner.l"
{
  					  if (current->type.isEmpty()) // anonymous padding field, e.g. "int :7;"
					  {
					    addType(current);
					    current->name.sprintf("__pad%d__",padCount++);
					  }
  					  BEGIN(BitFields);
					  current->bitfields+=":";
  					}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 3053 "scanner.l"
{
  					  current->bitfields+=*scanYYtext;
  					}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 3056 "scanner.l"
{
  					  current->args+=*scanYYtext;
  					}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 3059 "scanner.l"
{
                                          lineCount();
  					}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 3062 "scanner.l"
{ 
  					  QCString oldType = current->type;
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine = yyLineNr;
					  }
                                          if ( insidePHP && current->type.left(3) == "var" )
                                          {
                                            current->type = current->type.mid(3);
                                          }
					  if (isTypedef && current->type.left(8)!="typedef ")
					  {
					    current->type.prepend("typedef ");
					  }
					  bool needNewCurrent=FALSE;
					  if (!current->name.isEmpty() && current->section!=Entry::ENUM_SEC)
					  {
					    current->type=current->type.simplifyWhiteSpace();
					    current->args=removeRedundantWhiteSpace(current->args);
					    current->name=current->name.stripWhiteSpace();
					    if (current->section==Entry::CLASS_SEC) // remove spec for "struct Bla bla;"
					    {
					    	current->spec = 0;
					    }
					    current->section = Entry::VARIABLE_SEC ;
					    current->fileName = yyFileName;
					    current->startLine = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    needNewCurrent=TRUE;
					  }
					  if ( *scanYYtext == ',')
					  {
					    bool stat = current->stat;
					    if (needNewCurrent)
					    {
					      current = new Entry(*current);
					      initEntry();
					    }
					    current->stat = stat; // the static attribute holds for all variables
					    current->name.resize(0);
					    current->args.resize(0);
					    current->brief.resize(0);
					    current->doc.resize(0);
					    current->initializer.resize(0);
					    current->bitfields.resize(0);
					    int i=oldType.length(); 
					    while (i>0 && (oldType[i-1]=='*' || oldType[i-1]=='&' || oldType[i-1]==' ')) i--;
					    current->type = oldType.left(i);
					  }
					  else
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry ;
					    }
					    else if (current->groups)
					    {
					      current->groups->clear();
					    }
					    initEntry();
					  }
					}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 3125 "scanner.l"
{ 
  					  if (!insideCS &&  
					      (current->name.isEmpty() || 
					       current->name=="typedef"
					      )
					     ) // IDL function property
 					  {
          				    squareCount=1;
					    lastSquareContext = YY_START;
					    idlAttr.resize(0);
					    idlProp.resize(0);
					    current->mtype = mtype;
					    BEGIN( IDLAttribute );
					  }
                                          else if (insideCS &&
                                                  current->name.isEmpty())
                                          {
                                            squareCount=1;
                                            lastSquareContext = YY_START;
                                            // Skip the C# attribute
                                            // for this member
                                            current->args.resize(0);
                                            BEGIN( SkipSquare );
                                          }
					  else
					  {
  					    current->args += scanYYtext ;
					    squareCount=1;
					    BEGIN( Array ) ;
					  }
					}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 3156 "scanner.l"
{
  					  // end of IDL function attribute
					  if (--squareCount<=0)
					  {
					    lineCount();
					    if (current->mtype == Property)
					      BEGIN( IDLPropName );
					    else
					      BEGIN( lastSquareContext );
					  }
					}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 3167 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Settable;
					}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 3174 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Gettable;
					}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 3181 "scanner.l"
{
					}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 3183 "scanner.l"
{
					  // return type (probably HRESULT) - skip it
					}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 3186 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
  					  current->startLine = yyLineNr;
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 3192 "scanner.l"
{  // attribute of a parameter
					   idlAttr = scanYYtext;
					   idlAttr=idlAttr.stripWhiteSpace();
					}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 3196 "scanner.l"
{  // property type
					   idlProp = scanYYtext;
					}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 3199 "scanner.l"
{  // Rare: Another parameter ([propput] HRESULT Item(int index, [in] Type theRealProperty);)
					  if (!current->args)
					    current->args = "(";
					  else
					    current->args += ", ";
					  current->args += idlAttr;
					  current->args += " ";
					  current->args += idlProp;	// prop was actually type of extra parameter
					  current->args += " ";
					  current->args += scanYYtext;
					  current->args = current->args.left(current->args.length() - 1);	// strip comma
					  idlProp.resize(0);
					  idlAttr.resize(0);
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 3214 "scanner.l"
{
					  // the parameter name for the property - just skip.
					}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 3217 "scanner.l"
{
					  current->fileName   = yyFileName;
					  current->type		= idlProp;
  					  current->args       = current->args.simplifyWhiteSpace();
  					  if (current->args)
  					    current->args += ")";
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::VARIABLE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry;
					  initEntry();
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 3230 "scanner.l"
{ // spaces, *, or other stuff
  					  //idlProp+=scanYYtext;
 					}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 3233 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 3237 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( Function ) ;
					}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 3241 "scanner.l"
{ current->args += *scanYYtext ;
					  squareCount++;	
					}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 3244 "scanner.l"
{ current->args += *scanYYtext ; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 3245 "scanner.l"
{ squareCount++; }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 3246 "scanner.l"
{
  					  if (--squareCount<=0)
					    BEGIN( lastSquareContext );
  					}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 3250 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 3254 "scanner.l"

	YY_BREAK
case 340:
YY_RULE_SETUP
#line 3255 "scanner.l"
{ addType( current ) ;
					  current->type += scanYYtext ;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 3259 "scanner.l"
{ current->type += *scanYYtext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 3263 "scanner.l"
{ current->type += *scanYYtext ;
					  sharpCount++;	
					}
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 3266 "scanner.l"
{
  					  lineCount();
					}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 3269 "scanner.l"
{ current->type += *scanYYtext ; }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 3270 "scanner.l"
{
  					  current->bodyLine = yyLineNr;
  					  current->name     = scanYYtext;
					}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 3274 "scanner.l"
{
  					  // Java enum initializer
  					  unput('(');
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
                                          current->initializer = "=";
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 3282 "scanner.l"
{
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
                                          current->initializer = scanYYtext;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 3288 "scanner.l"
{
  					  if (insideJava)  // last enum field in Java class
					  {
					    if (!current->name.isEmpty())
					    {
					      current->fileName   = yyFileName;
					      current->startLine  = yyLineNr;
					      current->type       = "@"; // enum marker
					      current->args       = current->args.simplifyWhiteSpace();
					      current->name       = current->name.stripWhiteSpace();
					      current->section    = Entry::VARIABLE_SEC;
					      current_root->addSubEntry(current);
					      current             = new Entry ;
					      initEntry();
					    }

					    BEGIN( FindMembers );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 3311 "scanner.l"
{ 
                                          lineCount();
                                        }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 3314 "scanner.l"

	YY_BREAK
case 351:
YY_RULE_SETUP
#line 3315 "scanner.l"
{
					  //printf("adding `%s' `%s' `%s' to enum `%s' (mGrpId=%d)\n",
					  //     current->type.data(), current->name.data(),
					  //     current->args.data(), current_root->name.data(),current->mGrpId);
  					  if (!current->name.isEmpty())
					  {
					    current->fileName   = yyFileName;
					    current->startLine  = yyLineNr;
					    if (!(current_root->spec&Entry::Enum))
					    {
					      current->type       = "@"; // enum marker
					    }
  					    current->args       = current->args.simplifyWhiteSpace();
  					    current->name       = current->name.stripWhiteSpace();
					    current->section    = Entry::VARIABLE_SEC;
					    // add to the scope of the enum
					    current_root->addSubEntry(current);
					    if (!insideCS && !insideJava &&
                                                !(current_root->spec&Entry::Strong)) 
                                                // for C# and Java 1.5+ enum values always have to be explicitly qualified,
                                                // same for C++11 style enums (enum class Name {})
					    {
					      current             = new Entry(*current);
					      // add to the scope surrounding the enum (copy!)
					      current_root->parent()->addSubEntry(current);
					    }
					    current             = new Entry ;
					    initEntry();
					  }
					  else // probably a redundant , 
					  {
				     	    current->reset();
					    initEntry();
					  }
  					}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 3350 "scanner.l"
{ // attribute list in IDL
					  squareCount=1;
					  lastSquareContext = YY_START;
					  BEGIN(SkipSquare);
  					}
	YY_BREAK
/*
<FindFieldArg>","			{ unput(*scanYYtext); BEGIN(FindFields); }
  */
case 353:
YY_RULE_SETUP
#line 3358 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 3359 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 3360 "scanner.l"
{ if (!insidePHP) 
					    REJECT;
					  // append PHP comment.
					  current->program += scanYYtext ;
					}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 3365 "scanner.l"
{ current->program += scanYYtext ; 
                                          pSkipVerbString = &current->program;
                                          lastSkipVerbStringContext=YY_START;
                                          BEGIN( SkipVerbString );
					}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 3370 "scanner.l"
{ if (insidePHP)
                                          {
                                            current->program += scanYYtext ; 
                                            pCopyHereDocGString = &current->program;
                                            lastHereDocContext=YY_START;
                                            BEGIN( CopyHereDoc );
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
					}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 3382 "scanner.l"
{ current->program += scanYYtext ; 
                                          pCopyQuotedGString = &current->program;
                                          lastStringContext=YY_START;
                                          BEGIN( CopyGString );
					}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 3387 "scanner.l"
{ current->program += scanYYtext ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 360:
/* rule 360 can match eol */
YY_RULE_SETUP
#line 3391 "scanner.l"
{ current->program += scanYYtext ;
					  ++yyLineNr ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 3396 "scanner.l"
{
  					  if (!insidePHP)
					  {
					    current->program += scanYYtext;
					  }
					  else
					  { // begin of single quoted string
					    current->program += scanYYtext;
                                            pCopyQuotedGString = &current->program;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
  					}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 3409 "scanner.l"
{ 
                                              if (insidePHP) 
					      {
						REJECT; // for PHP code single quotes 
					                // are used for strings of arbitrary length
					      }
					      else
					      {
                                                current->program += scanYYtext; 
					      }
                                            }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 3420 "scanner.l"
{ current->program += scanYYtext ;
					  ++curlyCount ;
					}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 3423 "scanner.l"
{
					  current->program += scanYYtext ;
					  --curlyCount ;
  					}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 3427 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    //printf("cn=`%s' rn=`%s' isTypedef=%d\n",cn.data(),rn.data(),isTypedef);
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    if (isTypedef && cn.isEmpty())
					    {
					      //printf("Typedef Name\n");
					      BEGIN( TypedefName );
					    }
					    else
					    {
					      if ((current->section == Entry::ENUM_SEC) || (current->spec&Entry::Enum))
					      {
					        current->program+=','; // add field terminator
					      }
					      // add compound definition to the tree
					      current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
  					      current->type = current->type.simplifyWhiteSpace();
  					      current->name = current->name.stripWhiteSpace();
					      //printf("adding `%s' `%s' `%s' brief=%s insideObjC=%d %x\n",current->type.data(),current->name.data(),current->args.data(),current->brief.data(),insideObjC,current->section);
					      if (insideObjC && 
						  ((current->spec&Entry::Interface) || (current->spec==Entry::Category))
						 ) // method definition follows
					      {
				                BEGIN( ReadBodyIntf ) ;
					      }
					      else
					      {
					        current_root->addSubEntry( current ) ;
					        memspecEntry = current;
						current = new Entry(*current);
						if (current->section==Entry::NAMESPACE_SEC || 
						    (current->spec==Entry::Interface) ||
						    insideJava || insidePHP || insideCS || insideD || insideJS
						   )
						{ // namespaces and interfaces and java classes ends with a closing bracket without semicolon
						  current->reset();
						  initEntry();
						  memspecEntry = 0;
						  BEGIN( FindMembers ) ;
						}
						else
						{
						  if (!isTypedef) // not typedef 
						  {
						    // enabled the next two lines for bug 623424
						    current->doc.resize(0);
						    current->brief.resize(0);
						  }
						  BEGIN( MemberSpec ) ;
						}
					      }
					    }
					  }
					}
	YY_BREAK
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 3495 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
					  lineCount();
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    isTypedef = TRUE;
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    BEGIN( TypedefName );
					  }
					}
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 3515 "scanner.l"
{ // late "const" or "volatile" keyword
					  lineCount();
  					  current->type.prepend(scanYYtext);
  					}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 3519 "scanner.l"
{
					  if ((current->section == Entry::ENUM_SEC) || (current->spec&Entry::Enum))
					  {
					    current->program+=","; // add field terminator
					  }
  				          current->name=scanYYtext;
					  prependScope();
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  //printf("Adding compound %s %s %s\n",current->type.data(),current->name.data(),current->args.data());
					  current_root->addSubEntry( current ) ;
					  if (!firstTypedefEntry)
					  {
					    firstTypedefEntry = current;
					  }
					  current = new Entry;
					  initEntry();
					  isTypedef=TRUE; // to undo reset by initEntry()
  					  BEGIN(MemberSpecSkip); 
  					}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 3539 "scanner.l"
{ /* typedef of anonymous type */
					  current->name.sprintf("@%d",anonCount++);
					  if ((current->section == Entry::ENUM_SEC) || (current->spec&Entry::Enum))
					  {
					    current->program+=','; // add field terminator
					  }
					  // add compound definition to the tree
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  current_root->addSubEntry( current ) ;
					  memspecEntry = current;
					  current = new Entry(*current);
					  initEntry();
					  unput(';');
					  BEGIN( MemberSpec ) ;
  					}
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 3555 "scanner.l"
{ // the [] part could be improved.
  					  lineCount();
  					  int i=0,l=scanYYleng,j;
					  while (i<l && (!isId(scanYYtext[i]))) i++;
					  msName = QCString(scanYYtext).right(l-i).stripWhiteSpace();
					  j=msName.find("[");
					  if (j!=-1) 
					  {
					    msArgs=msName.right(msName.length()-j);
					    msName=msName.left(j);
					  }
					  msType=QCString(scanYYtext).left(i);

					  // handle *pName in: typedef { ... } name, *pName;
					  if (firstTypedefEntry) 
					  {
					    if (firstTypedefEntry->spec&Entry::Struct)
					    {
					      msType.prepend("struct "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->spec&Entry::Union)
					    {
					      msType.prepend("union "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->section==Entry::ENUM_SEC)
					    {
					      msType.prepend("enum "+firstTypedefEntry->name);
					    }
					    else
					    {
					      msType.prepend(firstTypedefEntry->name);
					    }
					  }
					}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 3589 "scanner.l"
{ // function with struct return type
  					  addType(current);
  					  current->name = msName;
					  current->spec = 0;
  					  unput('(');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 3596 "scanner.l"
{
  					  if (msName.isEmpty() && !current->name.isEmpty())
					  { 
					    // see if the compound does not have a name or is inside another
					    // anonymous compound. If so we insert a 
					    // special `anonymous' variable.
					    //Entry *p=current_root;
					    Entry *p=current;
					    while (p)
					    {
					      // only look for class scopes, not namespace scopes
					      if ((p->section & Entry::COMPOUND_MASK) && !p->name.isEmpty())
					      {
						//printf("Trying scope `%s'\n",p->name.data());
						int i=p->name.findRev("::");
						int pi = (i==-1) ? 0 : i+2;
						if (p->name.at(pi)=='@')
						{
						  // anonymous compound inside -> insert dummy variable name
						  //printf("Adding anonymous variable for scope %s\n",p->name.data());
						  msName.sprintf("@%d",anonCount++); 
						  break;
						}
					      }
					      //p=p->parent;
					      if (p==current) p=current_root; else p=p->parent();
					    }
					  }
					  //printf("msName=%s current->name=%s\n",msName.data(),current->name.data());
					  if (!msName.isEmpty() 
					      /*&& msName!=current->name*/) // skip typedef T {} T;, removed due to bug608493
					  {
					    static bool typedefHidesStruct = Config_getBool("TYPEDEF_HIDES_STRUCT");
					    // case 1: typedef struct _S { ... } S_t; 
					    // -> omit typedef and use S_t as the struct name
					    if (typedefHidesStruct && 
						isTypedef && 
						((current->spec&(Entry::Struct|Entry::Union)) ||
						 current->section==Entry::ENUM_SEC )&&
						msType.stripWhiteSpace().isEmpty() && 
						memspecEntry)
					    {
					      memspecEntry->name=msName;
					    }
					    else // case 2: create a typedef field
					    {
					      Entry *varEntry=new Entry;
					      varEntry->lang = language;
					      varEntry->protection = current->protection ;
					      varEntry->mtype = current->mtype;
					      varEntry->virt = current->virt;
					      varEntry->stat = current->stat;
					      varEntry->section = Entry::VARIABLE_SEC;
					      varEntry->name = msName.stripWhiteSpace();
					      varEntry->type = current->type.simplifyWhiteSpace()+" ";
					      varEntry->args = msArgs; 
					      if (isTypedef)
					      {
						varEntry->type.prepend("typedef ");
						//  //printf("current->name = %s %s\n",current->name.data(),msName.data());
					      }
					      if (typedefHidesStruct &&
						  isTypedef &&
						  (current->spec&(Entry::Struct|Entry::Union)) &&
						  memspecEntry
						 ) // case 1: use S_t as type for pS_t in "typedef struct _S {} S_t, *pS_t;"
					      {
						varEntry->type+=memspecEntry->name+msType;
					      }
					      else // case 2: use _S as type for for pS_t
					      {
						varEntry->type+=current->name+msType;
					      }
					      varEntry->fileName = yyFileName;
					      varEntry->startLine = yyLineNr;
					      varEntry->doc = current->doc.copy();
					      varEntry->brief = current->brief.copy();
					      varEntry->mGrpId = current->mGrpId;
                                              varEntry->initializer = current->initializer;

					      // deep copy group list
					      QListIterator<Grouping> gli(*current->groups);
					      Grouping *g;
					      for (;(g=gli.current());++gli)
					      {
						varEntry->groups->append(new Grouping(*g));
					      }
					      if (current->sli) // copy special list items
					      {
						QListIterator<ListItemInfo> li(*current->sli);
						ListItemInfo *lii;
						for (li.toFirst();(lii=li.current());++li)
						{
						  varEntry->addSpecialListItem(lii->type,lii->itemId);
						}
					      }

					      //printf("Add: type=`%s',name=`%s',args=`%s' brief=%s doc=%s\n",
					      //      varEntry->type.data(),varEntry->name.data(),
					      //      varEntry->args.data(),varEntry->brief.data(),varEntry->doc.data());
					      current_root->addSubEntry(varEntry);
					    }
					  }
					  if (*scanYYtext==';') // end of a struct/class ...
					  {
					    if (!isTypedef && msName.isEmpty() && memspecEntry && (current->section&Entry::COMPOUND_MASK))
					    { // case where a class/struct has a doc block after it
					      if (!current->doc.isEmpty())
					      {
					        memspecEntry->doc += current->doc;
					      }
					      if (!current->brief.isEmpty())
					      {
					        memspecEntry->brief += current->brief;
					      }
				  	    }
					    msType.resize(0);
					    msName.resize(0);
					    msArgs.resize(0);
					    isTypedef=FALSE;
					    firstTypedefEntry=0;
					    memspecEntry=0;
					    current->reset();
					    initEntry();
					    BEGIN( FindMembers );
					  }
					  else
					  {
					    current->doc.resize(0);
					    current->brief.resize(0);
					  }

  					}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 3729 "scanner.l"
{ 
  					  lastInitializerContext=YY_START;
					  initBracketCount=0;
                                          current->initializer = scanYYtext;
  					  BEGIN(ReadInitializer);
  					  /* BEGIN(MemberSpecSkip); */
					}
	YY_BREAK
/*
<MemberSpecSkip>"{"			{
  					  curlyCount=0;
					  lastCurlyContext = MemberSpecSkip;
					  previous = current;
  					  BEGIN(SkipCurly);
  					}
  */
case 374:
YY_RULE_SETUP
#line 3744 "scanner.l"
{ BEGIN(MemberSpec); }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 3745 "scanner.l"
{ unput(';'); BEGIN(MemberSpec); }
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 3746 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 377:
/* rule 377 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3749 "scanner.l"
{ // end of Objective C block
					  current_root->addSubEntry( current ) ;
  					  current=new Entry;
					  initEntry();
					  insideObjC=FALSE;
					  BEGIN( FindMembers ); 
  					}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 3756 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 379:
/* rule 379 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 3759 "scanner.l"
case 380:
/* rule 380 can match eol */
YY_RULE_SETUP
#line 3759 "scanner.l"
{   /* typedef void (A::*ptr_t)(args...) or int (*func(int))[], the ^ is for Obj-C blocks */
  					  if (insidePHP) // reference parameter
					  {
					    REJECT
					  }
					  else
					  {
					    current->bodyLine = yyLineNr;
					    lineCount();
					    addType(current);
					    funcPtrType=scanYYtext;
					    roundCount=0;
					    //current->type += scanYYtext;
					    BEGIN( FuncPtr );
					  }
  					}
	YY_BREAK
case 381:
/* rule 381 can match eol */
YY_RULE_SETUP
#line 3775 "scanner.l"
{
  					  current->name = scanYYtext;
					  if (nameIsOperator(current->name))
					  {
					    BEGIN( FuncPtrOperator );
					  }
					  else
					  {
					    if (current->name=="const" || current->name=="volatile")
					    {
					      funcPtrType += current->name;
					    }
					    else
					    {
					      BEGIN( EndFuncPtr );
					    }
					  }
  					}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 3793 "scanner.l"
{
  					  //printf("error: FuncPtr `%c' unexpected at line %d of %s\n",*scanYYtext,yyLineNr,yyFileName);
  					}
	YY_BREAK
case 383:
/* rule 383 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3796 "scanner.l"
{
  					  current->name += scanYYtext;
					  current->name = current->name.simplifyWhiteSpace();
					  lineCount();
  					}
	YY_BREAK
case 384:
/* rule 384 can match eol */
YY_RULE_SETUP
#line 3801 "scanner.l"
{
                                          lineCount();
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 3805 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( EndFuncPtr );
                                        }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 3809 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 387:
/* rule 387 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3812 "scanner.l"
{ // a variable with extra braces
 					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 388:
/* rule 388 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3817 "scanner.l"
{ // a function pointer
  					  lineCount();
					  current->type+=funcPtrType+")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 389:
/* rule 389 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3822 "scanner.l"
{ // an array of variables
  					  lineCount();
					  current->type+=funcPtrType.data();
					  current->args += ")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 3828 "scanner.l"
{ // a function returning a function or 
                                          // a function returning a pointer to an array
  					  current->args += *scanYYtext ;
					  //roundCount=0;
					  //BEGIN( FuncFunc );
					  current->bodyLine = yyLineNr;
					  currentArgumentContext = FuncFuncEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 3839 "scanner.l"
{
  					  funcPtrType+=scanYYtext;
  					}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 3842 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 3845 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  ++roundCount;
					}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 3849 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  if ( roundCount )
					    --roundCount;
					  else
					  {
					    BEGIN(FuncFuncEnd);
					  }
  					}
	YY_BREAK
case 395:
/* rule 395 can match eol */
YY_RULE_SETUP
#line 3858 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType+")(";
					  BEGIN(FuncFuncType);
  					}
	YY_BREAK
case 396:
/* rule 396 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3863 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(Function);
  					}
	YY_BREAK
case 397:
/* rule 397 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3868 "scanner.l"
{ // function returning a pointer to an array
                                          lineCount();
					  current->type+=funcPtrType;
					  current->args+=")";
					  BEGIN(FuncFuncArray);
  					}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 3874 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 3877 "scanner.l"
{
  					  current->type += *scanYYtext;
					  roundCount++;
  					}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 3881 "scanner.l"
{
  					  current->type += *scanYYtext;
  					  if (roundCount)
					    --roundCount;
					  else
					    BEGIN(Function);
					}
	YY_BREAK
case 401:
/* rule 401 can match eol */
YY_RULE_SETUP
#line 3888 "scanner.l"
{ lineCount() ; current->type += ", " ; }
	YY_BREAK
case 402:
/* rule 402 can match eol */
YY_RULE_SETUP
#line 3889 "scanner.l"
{ lineCount() ; current->type += ' ' ; }
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 3890 "scanner.l"
{
  					  current->type += *scanYYtext;
  					}
	YY_BREAK
case 404:
/* rule 404 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3893 "scanner.l"
{ // for catching typedef void (__stdcall *f)() like definitions
                                          if (current->type.left(7)=="typedef" && current->bodyLine==-1) 
					    // the bodyLine check is to prevent this guard to be true more than once
					  {
  					    current->bodyLine = yyLineNr;
					    BEGIN( GetCallType );
					  }
					  else if (!current->name.isEmpty()) // normal function
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments!\n");
					  }
					}
	YY_BREAK
case 405:
/* rule 405 can match eol */
YY_RULE_SETUP
#line 3911 "scanner.l"
{
  					  lineCount();
  					  addType(current);
					  funcPtrType="(";
					  funcPtrType+=scanYYtext;
					  roundCount=0;
					  BEGIN( FuncPtr );
  					}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 3919 "scanner.l"
{ 
                                          if (!current->name.isEmpty())
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments current->argList->count()=%d\n",current->argList->count());
					  }
					}
	YY_BREAK
/*
<FindMembers>"("{BN}*("void"{BN}*)?")"	{
  					  lineCount();
  					  current->args = "()"; 
  					  BEGIN( FuncQual );
  					}
  */
/*- Function argument reading rules ---------------------------------------*/
case 407:
YY_RULE_SETUP
#line 3941 "scanner.l"
{ *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 3944 "scanner.l"
{ *copyArgString+=scanYYtext; 
					  fullArgString+=scanYYtext;
					}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 3947 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 410:
/* rule 410 can match eol */
YY_RULE_SETUP
#line 3951 "scanner.l"
{
  					  *copyArgString+=" ";
  					  fullArgString+=" ";
  					  lineCount();
  					}
	YY_BREAK
case 411:
/* rule 411 can match eol */
YY_RULE_SETUP
#line 3956 "scanner.l"
{
                                          g_delimiter = scanYYtext+2;
                                          g_delimiter=g_delimiter.left(g_delimiter.length()-1);
                                          lastRawStringContext = YY_START;
                                          pCopyRawString = copyArgString;
                                          *pCopyRawString+=scanYYtext;
  					  fullArgString+=scanYYtext;
                                          BEGIN(RawString);
                                        }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 3965 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  lastCopyArgStringContext = YY_START;
  					  BEGIN( CopyArgString );
  					}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 3971 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
  					  argRoundCount=0; 
					  lastCopyArgContext = YY_START;
					  BEGIN( CopyArgRound ); 
  					}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 3978 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  stringToArgumentList(fullArgString,current->argList);
					  if (insideJS)
					  {
					    fixArgumentListForJavaScript(current->argList);
					  }
                                          handleParametersCommentBlocks(current->argList);

					  /* remember the current documentation block, since
					     we could overwrite it with the documentation of
					     a function argument, which we then have to correct later
					     on
					   */
					  docBackup = current->doc;
					  briefBackup = current->brief;

					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
/* a special comment */
case 415:
YY_RULE_SETUP
#line 3999 "scanner.l"
{ 
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>=0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else // not a define
					  {
					    // for functions we interpret a comment
					    // as documentation for the argument
					    fullArgString+=scanYYtext;
					    lastCopyArgChar=0;
					    lastCommentInArgContext=YY_START;
					    if (scanYYtext[1]=='/')
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
/* a non-special comment */
case 416:
YY_RULE_SETUP
#line 4026 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 4027 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipComment );
  					}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 4031 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
	YY_BREAK
/*
<ReadFuncArgType,ReadTempArgs>"'#"	{ if (insidePHP)
                                            REJECT;
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					}
<ReadFuncArgType,ReadTempArgs>"#"	{
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
  */
/* `)' followed by a special comment */
case 419:
/* rule 419 can match eol */
YY_RULE_SETUP
#line 4049 "scanner.l"
{
  					  lineCount();
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    *copyArgString+=*scanYYtext;
					    fullArgString+=*scanYYtext;
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else
					  {
					    // for functions we interpret a comment
					    // as documentation for the last argument
					    lastCopyArgChar=*scanYYtext;
					    QCString text=&scanYYtext[1];
					    text=text.stripWhiteSpace();
					    lastCommentInArgContext=YY_START;
					    fullArgString+=text;
					    if (text.find("//")!=-1)
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
case 420:
/* rule 420 can match eol */
YY_RULE_SETUP
#line 4080 "scanner.l"

	YY_BREAK
case 421:
YY_RULE_SETUP
#line 4081 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 4082 "scanner.l"
{ fullArgString+=scanYYtext; 
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar); 
                                          BEGIN( lastCommentInArgContext ); 
					}
	YY_BREAK
case 423:
/* rule 423 can match eol */
YY_RULE_SETUP
#line 4087 "scanner.l"
{ fullArgString+=scanYYtext;
                                          lineCount();
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar);
					  BEGIN( lastCommentInArgContext );
  					}
	YY_BREAK
case 424:
/* rule 424 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4093 "scanner.l"
{ // verbatim command (which could contain nested comments!)
				          docBlockName=&scanYYtext[1];
  					  fullArgString+=scanYYtext;
					  BEGIN(CopyArgVerbatim);
  					}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 4098 "scanner.l"
{
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='[')
					  {
				            docBlockName.at(1)='}';
					  }
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  fullArgString+=scanYYtext;
  					  BEGIN(CopyArgVerbatim);
                                        }
	YY_BREAK
case 426:
/* rule 426 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4111 "scanner.l"
{ // end of verbatim block
  					  fullArgString+=scanYYtext;
				          if (scanYYtext[1]=='f') // end of formula
				          {
				            BEGIN(CopyArgCommentLine);
				          }
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(CopyArgCommentLine);
					  }
  					}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 4122 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 4123 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 429:
/* rule 429 can match eol */
YY_RULE_SETUP
#line 4124 "scanner.l"
{ fullArgString+=*scanYYtext; lineCount(); }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 4125 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 4126 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: Ignoring %cbrief command inside argument documentation",*scanYYtext
					     );
                                          fullArgString+=' ';
                                        }
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 4132 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  argSharpCount=1;
					  BEGIN( CopyArgSharp );
					}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 4138 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  //printf("end template list %s\n",copyArgString->data());
					  stringToArgumentList(fullArgString,currentArgumentList);
					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 4145 "scanner.l"
{
  					  argRoundCount++;
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 4150 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  if (argRoundCount>0) 
					    argRoundCount--;
					  else 
					    BEGIN( lastCopyArgContext );
  					}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 4158 "scanner.l"
{
  					  argSharpCount++;
					  //printf("argSharpCount++=%d  copy\n",argSharpCount);
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 4164 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  argSharpCount--;
					  if (argSharpCount>0)
					  {
					    //printf("argSharpCount--=%d copy\n",argSharpCount);
					  }
					  else
					  {
					    BEGIN( ReadTempArgs );
					    //printf("end of argSharpCount\n");
					  }
  					}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 4178 "scanner.l"
{
  					  *copyArgString+=scanYYtext;
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 4182 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 4187 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 4192 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
  					    *copyArgString+=scanYYtext; 
  					    fullArgString+=scanYYtext; 
					  }
					}
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 4203 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					  if (insidePHP)
					  {
					    lastCopyArgStringContext=YY_START;
					    BEGIN(CopyArgPHPString);
					  }
  					}
	YY_BREAK
case 443:
/* rule 443 can match eol */
YY_RULE_SETUP
#line 4212 "scanner.l"
{ 
                                          lineCount();
					  *copyArgString+=*scanYYtext; 
					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 4217 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext; 
  					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
/*------------------------------------------------------------------------*/
case 445:
YY_RULE_SETUP
#line 4227 "scanner.l"
{ current->args += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 4230 "scanner.l"
{ current->args += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
/*
<FuncQual>"#"				{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}
  */
case 447:
YY_RULE_SETUP
#line 4243 "scanner.l"
{
                                          if ( strcmp(scanYYtext,";")==0 && 
					       insidePHP && 
					       !containsWord(current->type,"function") )
                                          {
                                            current->reset();
                                            initEntry();
                                            BEGIN( FindMembers );
                                          }
                                          else
                                          {
                                            unput(*scanYYtext); BEGIN( Function );
                                          }
                                        }
	YY_BREAK
case 448:
/* rule 448 can match eol */
YY_RULE_SETUP
#line 4257 "scanner.l"
{ // pure virtual member function
                                          lineCount() ; 
                                          current->virt = Pure;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 449:
/* rule 449 can match eol */
YY_RULE_SETUP
#line 4262 "scanner.l"
{ // C++11 overridden virtual member function
                                          lineCount() ; 
                                          current->spec |= Entry::Override;
                                          current->args += " override "; 
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 450:
/* rule 450 can match eol */
YY_RULE_SETUP
#line 4268 "scanner.l"
{ // C++11 final method
                                          lineCount() ; 
                                          current->spec |= Entry::Final;
                                          current->args += " final "; 
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 451:
/* rule 451 can match eol */
YY_RULE_SETUP
#line 4274 "scanner.l"
{ // sealed member function
                                          lineCount() ; 
                                          current->spec |= Entry::Sealed;
                                          current->args += " sealed "; 
                                        }
	YY_BREAK
case 452:
/* rule 452 can match eol */
YY_RULE_SETUP
#line 4279 "scanner.l"
{ // new member function
                                          lineCount() ; 
                                          current->spec |= Entry::New;
                                          current->args += " new "; 
                                        }
	YY_BREAK
case 453:
/* rule 453 can match eol */
YY_RULE_SETUP
#line 4284 "scanner.l"
{ // const member function
  					  lineCount() ; 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 454:
/* rule 454 can match eol */
YY_RULE_SETUP
#line 4289 "scanner.l"
{ // volatile member function
  					  lineCount() ; 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 455:
/* rule 455 can match eol */
YY_RULE_SETUP
#line 4294 "scanner.l"
{ // volatile member function
  					  lineCount() ; 
  					  current->args += " noexcept "; 
					  current->spec |= Entry::NoExcept;
					}
	YY_BREAK
case 456:
/* rule 456 can match eol */
YY_RULE_SETUP
#line 4299 "scanner.l"
{ // pure virtual member function
  					  lineCount() ; 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
                                          BEGIN(FuncQual);
					}
	YY_BREAK
case 457:
/* rule 457 can match eol */
YY_RULE_SETUP
#line 4306 "scanner.l"
{ // C++11 explicitly delete member
                                          lineCount();
                                          current->args += " = delete";
					  current->spec |= Entry::Delete;
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 458:
/* rule 458 can match eol */
YY_RULE_SETUP
#line 4312 "scanner.l"
{ // C++11 explicitly defaulted constructor/assignment operator
                                          lineCount();
                                          current->args += " = default";
					  current->spec |= Entry::Default;
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 459:
/* rule 459 can match eol */
YY_RULE_SETUP
#line 4318 "scanner.l"
{
                                          lineCount();
                                          current->argList->trailingReturnType = " -> ";
                                          current->args += " -> ";
                                          BEGIN(TrailingReturn);
                                        }
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 4324 "scanner.l"
{
                                          unput(*scanYYtext);
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 4328 "scanner.l"
{
                                          current->argList->trailingReturnType+=scanYYtext;
                                          current->args+=scanYYtext;
                                        }
	YY_BREAK
case 462:
/* rule 462 can match eol */
YY_RULE_SETUP
#line 4332 "scanner.l"
{
                                          lineCount();
                                          current->argList->trailingReturnType+=scanYYtext;
                                          current->args+=' ';
                                        }
	YY_BREAK
case 463:
/* rule 463 can match eol */
YY_RULE_SETUP
#line 4337 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ", " ; 
					}
	YY_BREAK
case 464:
/* rule 464 can match eol */
YY_RULE_SETUP
#line 4341 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ' ' ; 
					}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 4345 "scanner.l"
{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}	
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 4350 "scanner.l"
{ 
                                          if (insideCli && 
					      (current_root->section&Entry::COMPOUND_MASK) 
					     )
					  {
					    BEGIN(CliOverride);
					  }
					  else
					  {
                                            // typically an initialized function pointer
  					    lastInitializerContext=YY_START;
					    initBracketCount=0;
                                            current->initializer = scanYYtext;
  					    BEGIN(ReadInitializer);
					  }
  					}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 4366 "scanner.l"
{
  					}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 4368 "scanner.l"
{ 
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 469:
/* rule 469 can match eol */
YY_RULE_SETUP
#line 4372 "scanner.l"
{
                                          lineCount();
  					}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 4375 "scanner.l"
{
  					}
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 4377 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 4381 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					  pCopyQuotedString=&current->args;
					  lastStringContext=FuncPtrInit;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 4387 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  if (insidePHP)
					  {
					    pCopyQuotedString=&current->args;
					    lastStringContext=FuncPtrInit;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 4396 "scanner.l"
{
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 4406 "scanner.l"
{
                                          current->args += scanYYtext; 
					}
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 4409 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					}
	YY_BREAK
case 477:
/* rule 477 can match eol */
YY_RULE_SETUP
#line 4412 "scanner.l"
{
                                          current->args += *scanYYtext; 
                                          lineCount();
  					}
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 4416 "scanner.l"
{ // typically a K&R style C function
                                          if (insideCS && strcmp(scanYYtext,"where")==0)
					  { 
					    // type contraint for a method
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (checkForKnRstyleC())
					  {
					    //fprintf(stderr,"===> got a K&R style function\n");
                                            current->args = scanYYtext; 
					    oldStyleArgType.resize(0);
					    BEGIN(OldStyleArgs);
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 4438 "scanner.l"
{
  					  QCString oldStyleArgPtr;
  					  QCString oldStyleArgName;
					  splitKnRArg(oldStyleArgPtr,oldStyleArgName);
					  QCString doc,brief;
					  if (current->doc!=docBackup)
					  {
                                            doc=current->doc.copy();
					    current->doc=docBackup;
					  }
					  if (current->brief!=briefBackup)
					  {
                                            brief=current->brief.copy();
					    current->brief=briefBackup;
					  }
					  addKnRArgInfo(oldStyleArgType+oldStyleArgPtr,
					                oldStyleArgName,brief,doc);
					  current->args.resize(0);
					  if (*scanYYtext==';') oldStyleArgType.resize(0);
  					}
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 4458 "scanner.l"
{ current->args += scanYYtext; }
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 4459 "scanner.l"
{
  					  current->args = argListToString(current->argList);
  					  unput('{');
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 4464 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 4465 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 484:
/* rule 484 can match eol */
#line 4467 "scanner.l"
case 485:
/* rule 485 can match eol */
YY_RULE_SETUP
#line 4467 "scanner.l"
{ /* try-function-block */ 
					  insideTryBlock=TRUE;
					  lineCount();
  					  if (scanYYtext[scanYYleng-1]==':')
					  {
					    unput(':');
					    BEGIN( Function );
					  }
					}
	YY_BREAK
case 486:
/* rule 486 can match eol */
YY_RULE_SETUP
#line 4476 "scanner.l"
{ // C++ style throw clause
  					  current->exception = " throw (" ;
					  roundCount=0;
					  lineCount() ;
					  BEGIN( ExcpRound ) ;
					}
	YY_BREAK
case 487:
/* rule 487 can match eol */
YY_RULE_SETUP
#line 4482 "scanner.l"
{
  					  current->exception = " raises (" ;
					  lineCount() ;
					  roundCount=0;
					  BEGIN( ExcpRound ) ;
  					}
	YY_BREAK
case 488:
/* rule 488 can match eol */
YY_RULE_SETUP
#line 4488 "scanner.l"
{ // Java style throw clause
  					  current->exception = " throws " ;
					  lineCount() ;
					  BEGIN( ExcpList );
  					}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 4493 "scanner.l"
{ current->exception += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 4496 "scanner.l"
{ current->exception += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 4502 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 4505 "scanner.l"
{
  					  unput('{'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 4508 "scanner.l"
{
  					  unput(';'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 494:
/* rule 494 can match eol */
YY_RULE_SETUP
#line 4511 "scanner.l"
{
  					  current->exception += ' ';
                                          lineCount();
  					}
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 4515 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 4518 "scanner.l"
{ current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = scanYYtext ;
					  roundCount=0;
					  BEGIN( FuncRound ) ;
					}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 4524 "scanner.l"
{
  					  if (!insidePHP) BEGIN(SkipInits);
  					}
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 4527 "scanner.l"
{ 
					  current->name=current->name.simplifyWhiteSpace();
  					  current->type=current->type.simplifyWhiteSpace();
					  current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
					  current->fileName = yyFileName;
					  current->startLine = yyLineNr;
					  static QRegExp re("([^)]*[*&][^)]*)"); // (...*...)
					  if (*scanYYtext!=';' || (current_root->section&Entry::COMPOUND_MASK) )
					  {
					    int tempArg=current->name.find('<');
                                            int ts=current->type.find('<');
                                            int te=current->type.findRev('>');
                                            int ti=current->type.find(re,0);

                                            // bug677315: A<int(void *, char *)> get(); is not a function pointer
                                            bool isFunction = ti==-1 || // not a (...*...) pattern
                                                              (ts!=-1 && ts<te && ts<ti && ti<te); // (...*...) is part of a template argument list
                                                              
                                            //printf("type=%s ts=%d te=%d ti=%d isFunction=%d\n",
                                            //    current->type.data(),ts,te,ti,isFunction);
					    QCString tempName;
					    if (tempArg==-1) tempName=current->name; else tempName=current->name.left(tempArg);
					    if (!current->type.isEmpty() &&
						(!isFunction || current->type.left(8)=="typedef "))
					    {
					      //printf("Scanner.l: found in class variable: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      if (isTypedef && current->type.left(8)!="typedef ")
					      {
						current->type.prepend("typedef ");
					      }
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    else	      
					    {
					      //printf("Scanner.l: found in class function: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      current->section = Entry::FUNCTION_SEC ;
			                      current->proto = *scanYYtext==';';
					    }
					  }
					  else // a global function prototype or function variable
					  {
					    //printf("Scanner.l: prototype? type=`%s' name=`%s' args=`%s'\n",current->type.data(),current->name.data(),current->args.data());
					    if (!current->type.isEmpty() && 
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      if (isTypedef && current->type.left(8)!="typedef ")
					      {
						current->type.prepend("typedef ");
					      }
					      //printf("Scanner.l: found function variable!\n");
					      current->section = Entry::VARIABLE_SEC;
					    }
					    else
					    {
					      //printf("Scanner.l: found prototype\n");
					      current->section = Entry::FUNCTION_SEC;
					      current->proto = TRUE;
					    }
					  }
					  //printf("Adding entry `%s'\n",current->name.data());
					  if ( insidePHP)
					  {
					    if (findAndRemoveWord(current->type,"final"))
					    {
					      current->spec |= Entry::Final;
					    }
					    if (findAndRemoveWord(current->type,"abstract"))
					    {
					      current->spec |= Entry::Abstract;
					    }
					  }
					  if ( insidePHP && !containsWord(current->type,"function"))
					  {
					    initEntry();
					    if ( *scanYYtext == '{' )
					    {
					      lastCurlyContext = FindMembers;
					      curlyCount=0;
					      BEGIN( SkipCurly );
					    }
					    else
					    {
					      BEGIN( FindMembers );
					    }
					  }
					  else
					  {
					    if ( insidePHP)
					    {
					      findAndRemoveWord(current->type,"function");
					    }
					    previous = current;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    initEntry();
					    // Objective C 2.0: Required/Optional section
					    if (previous->spec & (Entry::Optional | Entry::Required))
					    {
					      current->spec |= previous->spec & (Entry::Optional|Entry::Required);
					    }
					    lastCurlyContext = FindMembers;
					    if ( *scanYYtext == ',' )
					    {
					      current->type = previous->type;
					      // we need to strip any trailing * and & (see bugs 623023 and 649103 for test cases)
					      int i=current->type.length(); 
					      while (i>0 && (current->type[i-1]=='*' || current->type[i-1]=='&' || current->type[i-1]==' ')) i--;
					      current->type = current->type.left(i);
					    }
					    if ( *scanYYtext == '{' )
					    {
					      if ( !insidePHP && (current_root->section & Entry::COMPOUND_MASK) )
					      {
						previous->spec |= Entry::Inline;
					      }
					      //addToBody(scanYYtext);
					      curlyCount=0;
					      BEGIN( SkipCurly ) ;
					    }
					    else
					    {
					      if (previous->section!=Entry::VARIABLE_SEC)
						previous->bodyLine=-1; // a function/member declaration
					      BEGIN( FindMembers ) ;
					    }
					  }
                                        }
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 4655 "scanner.l"
{ // C++11 style initializer
  				          //addToBody(scanYYtext);
  				          //lastCurlyContext = FindMembers;
					  //curlyCount=0;
  					  //BEGIN( SkipCurly ) ; 
  					  unput('{');
					  BEGIN( Function );
					}
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 4663 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  ++curlyCount ; 
					}
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 4667 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else
					  {
#if 0
					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
						!current->doc.isEmpty())
					    {
					      // copy documentation found inside the body
					      // to the previous item
					      if (previous->inbodyLine==-1)
					      {
					        previous->inbodyLine = current->docLine;
					        previous->inbodyFile = current->docFile;
					      }
					      //printf("*** inbodyDocs+=%s\n",current->doc.data());
					      previous->inbodyDocs += current->doc;
					      current->doc.resize(0);
					    }
#endif
					    if (current->sli && previous) // copy special list items
					    {
					      QListIterator<ListItemInfo> li(*current->sli);
					      ListItemInfo *lii;
					      for (li.toFirst();(lii=li.current());++li)
					      {
						previous->addSpecialListItem(lii->type,lii->itemId);
					      }
					      delete current->sli;
					      current->sli = 0;
					    }
					    if (previous) previous->endBodyLine=yyLineNr;
					    BEGIN( lastCurlyContext ) ;
					  }
					}
	YY_BREAK
case 502:
/* rule 502 can match eol */
YY_RULE_SETUP
#line 4706 "scanner.l"
{ 
					  lineCount();
  					  if ( curlyCount )
					  {
					    //addToBody(scanYYtext);
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine=yyLineNr;

					    tempEntry = current; // temporarily switch to the previous entry
					    current = previous;

					    docBlockContext   = SkipCurlyEndDoc;
					    docBlockInBody    = FALSE;
					    docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                        ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					    docBlock.resize(0);
					    docBlockTerm = '}';
					    if (scanYYtext[scanYYleng-3]=='/')
					    {
					      startCommentBlock(TRUE);
					      BEGIN( DocLine );
					    }
					    else
					    {
					      startCommentBlock(FALSE);
					      BEGIN( DocBlock );
					    }
					  }
					}
	YY_BREAK
case 503:
/* rule 503 can match eol */
YY_RULE_SETUP
#line 4738 "scanner.l"
{ // desc is followed by another one
					  docBlockContext   = SkipCurlyEndDoc;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = '}';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 4756 "scanner.l"
{
  				          //addToBody("}");
					  current = tempEntry;
  					  BEGIN( lastCurlyContext );
  					}
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 4761 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  lastStringContext=SkipCurly;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 4766 "scanner.l"
{ 
  				          if (insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  BEGIN( SkipCurlyCpp );
					}
	YY_BREAK
case 507:
/* rule 507 can match eol */
YY_RULE_SETUP
#line 4772 "scanner.l"
{
                                          lineCount();
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 4776 "scanner.l"
{
  					  if (!insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {
                                            lastHereDocContext = YY_START;
					    BEGIN(HereDoc);
					  }
  					}
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 4787 "scanner.l"
{
                                          lineCount();  // for g_column updates
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 510:
/* rule 510 can match eol */
YY_RULE_SETUP
#line 4791 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
                                          lineCount();
  					  lastCurlyContext = FindMembers;
  					  BEGIN( SkipCurly ); 
					}
	YY_BREAK
case 511:
/* rule 511 can match eol */
YY_RULE_SETUP
#line 4797 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
                                          lineCount();
					}
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 4801 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipComment);
  					}
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 4806 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 4811 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 4815 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: Found ';' while parsing initializer list! "
					      "(doxygen could be confused by a macro call without semicolon)"
					     );
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 4822 "scanner.l"
{
  				          if (!insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 4829 "scanner.l"
{
  				          if (!insideCS) REJECT;
					  // C# verbatim string
					  lastSkipVerbStringContext=YY_START;
					  pSkipVerbString=&current->initializer;
					  BEGIN(SkipVerbString);
  					}
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 4836 "scanner.l"
{
                                          if (insidePHP) REJECT;
                                        }
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 4839 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
					}
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 4846 "scanner.l"
{ }
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 4847 "scanner.l"
{ }
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 4848 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 4851 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 4854 "scanner.l"
{ }
	YY_BREAK
case 525:
/* rule 525 can match eol */
YY_RULE_SETUP
#line 4855 "scanner.l"
{
                                          lineCount();
  					}
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 4858 "scanner.l"
{ }
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 4859 "scanner.l"
{ // for "class : public base {} var;" construct, see bug 608359
  					  unput(':');
					  BEGIN(ClassVar);
  					}
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 4863 "scanner.l"
{ 
					  current->section = Entry::EMPTY_SEC ;
					  current->type.resize(0) ;
					  current->name.resize(0) ;
					  current->args.resize(0) ;
					  current->argList->clear();
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 529:
/* rule 529 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4871 "scanner.l"
{
  					  sharpCount = 0;
  					  current->name = scanYYtext ;
					  if (current->spec & Entry::Protocol)
					  {
					    current->name+="-p";
					  }
					  lineCount();
					  lastClassTemplSpecContext = ClassVar;
					  if (insideObjC) // protocol list
					  {
					    BEGIN( ObjCProtocolList );
					  }
					  else if (insideCS) // C# generic class
					  {
                                            //current->name+="-g";
					    BEGIN( CSGeneric );
					  }
					  else // C++ template specialization
					  {
					    roundCount=0;
					    BEGIN( ClassTemplSpec );
					  }
					}
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 4895 "scanner.l"
{
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  // check bug 612858 before enabling the next line
					  //current->spec |= Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  current->name += "<";
					  fullArgString = templateStr;
					  copyArgString = &current->name;
					  //copyArgString = &templateStr;
					  currentArgumentContext = ClassVar;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 4914 "scanner.l"
{
  					  insideProtocolList=TRUE;
  					  BEGIN( Bases );
  					}
	YY_BREAK
case 532:
/* rule 532 can match eol */
YY_RULE_SETUP
#line 4918 "scanner.l"
{
					  current->name += scanYYtext;
					  lineCount();
  					  if (--sharpCount<=0)
					  {
					    current->name = removeRedundantWhiteSpace(current->name);
					    if (current->spec & Entry::Protocol)
					    { // Objective-C protocol
					      unput('{'); // fake start of body
					      BEGIN( ClassVar );
					    }
					    else
					    {
					      BEGIN( lastClassTemplSpecContext );
					    }
					  }
					}
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 4935 "scanner.l"
{
  					  current->name += scanYYtext;
  					  sharpCount++;
  					}
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 4939 "scanner.l"
{
  					  current->name += scanYYtext;
					}
	YY_BREAK
case 535:
/* rule 535 can match eol */
YY_RULE_SETUP
#line 4942 "scanner.l"
{ // forward declaration
                                          if (current->tArgLists && current->tArgLists->count()>0)
                                          {
                                            // found a forward template declaration, this has
                                            // a purpose of its own
                                            current->name = scanYYtext;
                                            current->name=current->name.left(current->name.length()-1).stripWhiteSpace();
                                            //printf("template class declaration for %s!\n",current->name.data());
                                            current_root->addSubEntry(current);
                                            current = new Entry;
                                          }

    					  unput(';');
					  current->reset();
					  initEntry();
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 536:
/* rule 536 can match eol */
YY_RULE_SETUP
#line 4963 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 537:
/* rule 537 can match eol */
YY_RULE_SETUP
#line 4972 "scanner.l"
{  // multiple forward declarations on one line
                                           // e.g. @protocol A,B;
					  current->reset();
					  initEntry();
  					}
	YY_BREAK
case 538:
/* rule 538 can match eol */
YY_RULE_SETUP
#line 4977 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  if ((current->spec & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 539:
/* rule 539 can match eol */
YY_RULE_SETUP
#line 4991 "scanner.l"
{ // C# style scope
					  current->name = substitute(scanYYtext,".","::");
					  lineCount();
					  BEGIN( ClassVar );
                                        }
	YY_BREAK
case 540:
/* rule 540 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4996 "scanner.l"
{
  					  if (insideIDL && strncmp(scanYYtext,"switch",6)==0 && !isId(scanYYtext[6]))
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
  					    BEGIN( FindMembers );
					  }
  					}
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 5012 "scanner.l"
{
 					  if (isTypedef)
					  {
					    // multiple types in one typedef
					    unput(',');
					    current->type.prepend("typedef ");
					    BEGIN(FindMembers);
					  }
					  else
					  { 
  					    // Multiple class forward declaration
					  }
  					}
	YY_BREAK
case 542:
/* rule 542 can match eol */
YY_RULE_SETUP
#line 5025 "scanner.l"
{
  					  if (insideCli)
					  {
					    if (scanYYtext[0]=='s') // sealed
					      current->spec |= Entry::SealedClass;
					    else // abstract
					      current->spec |= Entry::AbstractClass;
					    BEGIN( ClassVar ); 
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 5039 "scanner.l"
{
  					  if (insideIDL && strcmp(scanYYtext,"switch")==0)
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else if ((insideJava || insidePHP || insideJS) && (strcmp(scanYYtext,"implements")==0 || strcmp(scanYYtext,"extends")==0))
					  {
  					    current->type.resize(0);
					    baseProt=Public;
                                            baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					  else if (insideCS && strcmp(scanYYtext,"where")==0) // C# type contraint
					  {
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"abstract")==0)
					  {
					    current->spec|=Entry::Abstract;
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"sealed")==0)
					  {
					    current->spec|=Entry::Sealed;
					  }
                                          else if (strcmp(scanYYtext,"final")==0)
                                          {
                                            current->spec|=Entry::Final;
                                          }
					  else
					  {
					    if (current->section == Entry::ENUM_SEC)
					    { // found "enum a b" -> variable
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    current->type += ' ' ;
					    current->type += current->name ;
					    current->name = scanYYtext ;
					    
					    if (nameIsOperator(current->name))
					    {
				              BEGIN( Operator );
					    }
					  }
  					}
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 5090 "scanner.l"
{
    					  if (insideObjC && *scanYYtext=='(') // class category
					  {
					    current->name+='(';
                                            //if (current->section!=Entry::OBJCIMPL_SEC)
                                            //{
					      current->spec|=Entry::Category;
                                            //}
					    BEGIN( ClassCategory );
					  }
					  else
					  {
                                            // probably a function anyway
                                            unput(*scanYYtext);
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 5107 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 5108 "scanner.l"
{ // special comment
                                          fullArgString.resize(0);
					  lastCopyArgChar='#'; // end marker
					  lastCommentInArgContext=YY_START;
					  if (scanYYtext[1]=='/')
					    BEGIN( CopyArgCommentLine );
					  else
					    BEGIN( CopyArgComment );
					}
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 5117 "scanner.l"
{ // artificially inserted token to signal end of comment block
                                          current->typeConstr->last()->docs = fullArgString;
  					}
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 5120 "scanner.l"
{ // end of type constraint reached
                                          // parse documentation of the constraints
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput('{');
					  BEGIN( lastCSConstraint );
					}
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 5126 "scanner.l"
{
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput(';');
					  BEGIN( lastCSConstraint );
  					}
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 5131 "scanner.l"
{
                                          BEGIN( CSConstraintType );
                                        }
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 5134 "scanner.l"
{
                                          // parameter name
                                          current->typeConstr->last()->name=scanYYtext;
                                        }
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 5138 "scanner.l"
{ // another constraint for a different param
					  current->typeConstr->append(new Argument);
                                          BEGIN( CSConstraintName );
  					}
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 5142 "scanner.l"
{
                                          if (current->typeConstr->last()->type.isEmpty())
                                              // first type constraint for this parameter
                                          {
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                          else // new type constraint for same parameter
                                          {
                                            QCString name = current->typeConstr->last()->name;
                                            current->typeConstr->append(new Argument);
                                            current->typeConstr->last()->name=name;
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                        }
	YY_BREAK
case 554:
/* rule 554 can match eol */
YY_RULE_SETUP
#line 5156 "scanner.l"
{
                                          lineCount();
					}
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 5159 "scanner.l"
{
					}
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 5161 "scanner.l"
{
					  current->name+=scanYYtext;
					}
	YY_BREAK
case 557:
/* rule 557 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5164 "scanner.l"
{
					  current->name+=')';
					  BEGIN( ClassVar );
                                        }
	YY_BREAK
case 558:
/* rule 558 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5168 "scanner.l"
{
					  current->name+=')';
					  BEGIN( ObjCProtocolList );
                                        }
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 5172 "scanner.l"
{
					  current->name+=')';
					  if ((current->section & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  else // category has no variables so push back an empty body
					  {
					    unput('}');
					    unput('{');
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 5186 "scanner.l"
{ 
					  if (current->section==Entry::ENUM_SEC) // enum E:2, see bug 313527, 
                                                                                 // or C++11 style enum: 'E : unsigned int {...}'
					  {
					    current->args.resize(0);
  					    BEGIN(EnumBaseType);
					  }
					  else
					  {
					    current->type.resize(0);
					    if ((current->spec & Entry::Interface) || 
						(current->spec & Entry::Struct)    || 
						(current->spec & Entry::Ref)       || 
						(current->spec & Entry::Value)     || 
						insidePHP || insideCS || insideD || insideObjC
					       )
					      baseProt=Public;
					    else
					      baseProt=Private;
					    baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					}
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 5210 "scanner.l"
{
    					  unput(*scanYYtext);
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  if ((scanYYtext[0]=='*' || scanYYtext[0]=='&') && 
					      current->section == Entry::ENUM_SEC)
					  { // found "enum a *b" -> variable
					    current->section = Entry::VARIABLE_SEC ;
					  }
					  BEGIN( FindMembers );
    					}
	YY_BREAK
case 562:
/* rule 562 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5223 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 563:
/* rule 563 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 5239 "scanner.l"
case 564:
/* rule 564 can match eol */
#line 5240 "scanner.l"
case 565:
/* rule 565 can match eol */
#line 5241 "scanner.l"
case 566:
/* rule 566 can match eol */
YY_RULE_SETUP
#line 5241 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 5256 "scanner.l"
{ 
                                          current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
					  if (current->name.isEmpty() && !isTypedef) // anonymous compound
					  {
					    if (current->section==Entry::NAMESPACE_SEC) // allow reopening of anonymous namespaces
					    {
					      if (Config_getBool("EXTRACT_ANON_NSPACES")) // use visible name
					      {
					        current->name="anonymous_namespace{"+stripPath(current->fileName)+"}";
					      }
					      else // use invisible name
					      {
					        current->name.sprintf("@%d",anonNSCount);
					      }
					    }
					    else
					    {
					      current->name.sprintf("@%d",anonCount++);
					    }
					  }
					  curlyCount=0;
					  if (current_root && // not a nested struct inside an @interface section
					      !(current_root->spec & Entry::Interface) &&
					      ((current->spec & (Entry::Interface | Entry::Protocol | Entry::Category) ||
					        current->section==Entry::OBJCIMPL_SEC)
					      ) &&
					      insideObjC
					     )
					  { // ObjC body that ends with @end
					    BEGIN( ReadBodyIntf );
					  }
					  else if (current->section==Entry::NAMESPACE_SEC)
					  { // namespace body
					    BEGIN( ReadNSBody );
					  }
					  else
					  { // class body
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 568:
/* rule 568 can match eol */
YY_RULE_SETUP
#line 5298 "scanner.l"
{ lineCount(); baseVirt = Virtual; }
	YY_BREAK
case 569:
/* rule 569 can match eol */
YY_RULE_SETUP
#line 5299 "scanner.l"
{ lineCount(); baseProt = Public; }
	YY_BREAK
case 570:
/* rule 570 can match eol */
YY_RULE_SETUP
#line 5300 "scanner.l"
{ lineCount(); baseProt = Protected; }
	YY_BREAK
case 571:
/* rule 571 can match eol */
YY_RULE_SETUP
#line 5301 "scanner.l"
{ lineCount(); baseProt = Package; }
	YY_BREAK
case 572:
/* rule 572 can match eol */
YY_RULE_SETUP
#line 5302 "scanner.l"
{ lineCount(); baseProt = Private; }
	YY_BREAK
case 573:
/* rule 573 can match eol */
YY_RULE_SETUP
#line 5303 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 5304 "scanner.l"
{ unput(*scanYYtext); BEGIN(Bases); }
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 5305 "scanner.l"
{ // PHP namespace token, not sure if interspacing is allowed but it gives problems (see bug 640847)
                                          if (!insidePHP)
					  {
					    REJECT;
					  }
					  else // PHP base class of the form \Ns\Cl or Ns\Cl
					  {
  					    lineCount();
					    QCString bn=scanYYtext;
					    bn = substitute(bn,"\\","::");
					    baseName += bn;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
                                        }
	YY_BREAK
case 576:
/* rule 576 can match eol */
YY_RULE_SETUP
#line 5320 "scanner.l"
{ 
  					  lineCount();
                                          QCString baseScope = scanYYtext;
                                          if (insideCS && baseScope.stripWhiteSpace()=="where")
					  { 
					    // type contraint for a class
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else
					  {
  					    baseName+=scanYYtext;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
					}
	YY_BREAK
case 577:
/* rule 577 can match eol */
YY_RULE_SETUP
#line 5339 "scanner.l"
{ // Java style class
    					  QCString name = substitute(scanYYtext,".","::");
					  baseName += name;
					  current->args += ' ';
					  current->args += name;
    					}
	YY_BREAK
case 578:
/* rule 578 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5345 "scanner.l"
{
                                          if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
                                            lineCount();
					    unput('{');
					  }
					}
	YY_BREAK
case 579:
YY_RULE_SETUP
#line 5356 "scanner.l"
{ // empty ObjC interface
  					  unput('d'); // insert fake body: {}@end
  					  unput('n'); 
  					  unput('e'); 
  					  unput('@'); 
  					  unput('}'); 
  					  unput('{');
					}
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 5364 "scanner.l"
{ current->name += *scanYYtext;
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  specName = &current->name;
					  BEGIN ( Specialization );
					}
	YY_BREAK
case 581:
YY_RULE_SETUP
#line 5371 "scanner.l"
{ 
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  if (insideObjC) // start of protocol list
					  {
					    unput(',');
					  }
					  else // template specialization
					  {
					    //if (insideCS) // generic
					    //{
					    //  baseName+="-g";
					    //}
                                            templateStr = scanYYtext;
					    specName = &templateStr;
					    BEGIN ( Specialization );
					  }
					}
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 5390 "scanner.l"
{ *specName += *scanYYtext;
  					  if (roundCount==0) sharpCount++;
  					}
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 5393 "scanner.l"
{
  					  *specName += *scanYYtext;
  					  if (roundCount==0 && --sharpCount<=0)
					  {
					    if (1 /*!insideCS*/) 
					    {
					      baseName+=*specName;
					    }
					    else
					    {
					      if (current->tArgLists==0)
					      {
						current->tArgLists = new QList<ArgumentList>;
						current->tArgLists->setAutoDelete(TRUE);
					      }
					      ArgumentList *al = new ArgumentList;
					      current->tArgLists->append(al);
					      stringToArgumentList(*specName,al);
					    }
					    BEGIN(lastSkipSharpContext);
					  }
  					}
	YY_BREAK
case 584:
/* rule 584 can match eol */
YY_RULE_SETUP
#line 5415 "scanner.l"
{ lineCount(); *specName +=' '; }
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 5416 "scanner.l"
{ *specName += scanYYtext; }
	YY_BREAK
case 586:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5417 "scanner.l"
{ // M$ C++ extension to allow >> to close a template...
  					  unput('>');
  					  unput(' ');
  					  unput('>');
                                        }
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 5422 "scanner.l"
{
                                          if (insideCS) // for C# >> ends a nested template
					  {
					    REJECT;
					  }
					  else // for C++ >> is a bitshift 
					       // operator and > > would end 
					       // a nested template.
					       // We require the bitshift to be enclosed in braces.
					       // See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html
					  {
					    if (roundCount>0)
					    {
                                              *specName += scanYYtext; 
					    }
					    else
					    {
  					      unput('>');
  					      unput(' ');
  					      unput('>');
					    }
					  }
                                        }
	YY_BREAK
case 588:
/* rule 588 can match eol */
YY_RULE_SETUP
#line 5445 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 589:
YY_RULE_SETUP
#line 5446 "scanner.l"
{ *specName += *scanYYtext; roundCount++; }
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 5447 "scanner.l"
{ *specName += *scanYYtext; roundCount--; }
	YY_BREAK
case 591:
YY_RULE_SETUP
#line 5448 "scanner.l"
{
  					  *specName += *scanYYtext;
  					}
	YY_BREAK
case 592:
YY_RULE_SETUP
#line 5451 "scanner.l"
{ ++sharpCount; }
	YY_BREAK
case 593:
YY_RULE_SETUP
#line 5452 "scanner.l"
{ if (--sharpCount<=0)
					    BEGIN ( lastSkipSharpContext );
					}
	YY_BREAK
case 594:
YY_RULE_SETUP
#line 5455 "scanner.l"
{ ++roundCount; }
	YY_BREAK
case 595:
YY_RULE_SETUP
#line 5456 "scanner.l"
{ if (--roundCount<=0)
					    BEGIN ( lastSkipRoundContext );
					}
	YY_BREAK
case 596:
YY_RULE_SETUP
#line 5459 "scanner.l"
{
  					  lastStringContext=SkipRound;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 597:
/* rule 597 can match eol */
YY_RULE_SETUP
#line 5463 "scanner.l"
{ lineCount();
                                          if (insideProtocolList)
					  {
					    baseName+="-p";
					  }
					  else
					  {
                                            current->args += ',' ; 
					  }
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
					  {
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  }
					  if ((current->spec & (Entry::Interface|Entry::Struct)) || 
					      insideJava || insidePHP || insideCS || 
					      insideD || insideObjC)
					  {
					    baseProt=Public;
					  }
					  else
					  {
					    baseProt=Private;
					  }
					  baseVirt=Normal;
					  baseName.resize(0);
                                          if (*scanYYtext=='>')
					  { // end of a ObjC protocol list
  					    insideProtocolList=FALSE;
					    if (scanYYleng==1)
					    {
					      unput('{'); // dummy start body
					    }
					    else
					    {
					      yyless(1);
					    }
					  }
					  else
					  {
					    if (*scanYYtext==',' && insideObjC) // Begin of protocol list
					    {
  					      insideProtocolList=TRUE;
					    }
					    BEGIN(BasesProt);
					  }
					}
	YY_BREAK
case 598:
YY_RULE_SETUP
#line 5512 "scanner.l"
{ current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  curlyCount=0;
					  if (insideObjC)
					  {
					    BEGIN( ReadBodyIntf );
					  }
					  else
					  {
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 5529 "scanner.l"
{
  					  roundCount++;
  					}
	YY_BREAK
case 600:
YY_RULE_SETUP
#line 5532 "scanner.l"
{
  					  if (--roundCount==0)
					  {
					    BEGIN(ClassVar);
					  }
  					}
	YY_BREAK
case 601:
/* rule 601 can match eol */
YY_RULE_SETUP
#line 5538 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 5539 "scanner.l"

	YY_BREAK
case 603:
/* rule 603 can match eol */
YY_RULE_SETUP
#line 5540 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 604:
YY_RULE_SETUP
#line 5543 "scanner.l"
{ current->program += scanYYtext ; } 
	YY_BREAK
case 605:
YY_RULE_SETUP
#line 5544 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 606:
YY_RULE_SETUP
#line 5545 "scanner.l"
{
                                          insideCode=TRUE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 607:
YY_RULE_SETUP
#line 5549 "scanner.l"
{
                                          insideCode=FALSE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 608:
YY_RULE_SETUP
#line 5553 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 609:
YY_RULE_SETUP
#line 5554 "scanner.l"
{ current->program += scanYYtext ;
					  if (!insideCode) BEGIN( lastContext ) ;
					}
	YY_BREAK
case 610:
YY_RULE_SETUP
#line 5557 "scanner.l"
{ current->program += *scanYYtext ; }
	YY_BREAK
case 611:
YY_RULE_SETUP
#line 5559 "scanner.l"
{ 
  					  //printf("Start doc block at %d\n",yyLineNr);
					  removeSlashes=(scanYYtext[1]=='/');
					  tmpDocType=-1;
					  if (!current->doc.isEmpty())
					  {
					    current->doc+="\n\n";
					  }
					  else
					  {
					    current->docLine = yyLineNr;
					    current->docFile = yyFileName;
					  }

					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = Config_getBool("QT_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
					}
	YY_BREAK
case 612:
/* rule 612 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5590 "scanner.l"
{
  					  removeSlashes=(scanYYtext[1]=='/');
					  lastDocContext = YY_START;

					  //printf("Found comment block at %s:%d\n",yyFileName,yyLineNr);
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  current->docLine = yyLineNr;
					  current->docFile = yyFileName;
					  docBlockContext = YY_START;
					  docBlockInBody  = YY_START==SkipCurly;
                                          static bool javadocAutoBrief = Config_getBool("JAVADOC_AUTOBRIEF");
					  docBlockAutoBrief = javadocAutoBrief;
					  docBlock.resize(0);

                                          QCString indent;
                                          indent.fill(' ',computeIndent(scanYYtext,g_column));
                                          docBlock+=indent;

					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
  					}
	YY_BREAK
case 613:
YY_RULE_SETUP
#line 5619 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 614:
/* rule 614 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5633 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 615:
/* rule 615 can match eol */
YY_RULE_SETUP
#line 5647 "scanner.l"
{
					  lineCount();
					  externC=TRUE;
					}
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 5651 "scanner.l"
{
                                          if (externC) 
					  {
					    externC=FALSE;
					  }
                                          else if (insideCS &&    
					      !current->name.isEmpty() && 
					      !current->type.isEmpty())
					  {
					    if (containsWord(current->type,"event")) // event
					    {
  					      current->mtype = mtype = Event;
					    }
					    else // property
					    {				
  					      current->mtype = mtype = Property;
					    }
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CSAccessorDecl );
					  }
					  else
					  {
					    if ((insideJava || insideCS || insideD) &&
						current->name.isEmpty()
					       )
					    {
					      // static Java initializer
					      needsSemi = FALSE;
					      if (current->stat)
					      {
						current->name="[static initializer]";
						current->type.resize(0);
					      }
					      else
					      {
						current->name="[instance initializer]";
					      }
                                              unput(*scanYYtext); 
					      BEGIN( Function );
					    }
					    else
					    {
					      // pre C++11 code -> ignore the initializer
                                              //needsSemi = TRUE;
					      //current->type.resize(0);
					      //current->name.resize(0);
					      //current->args.resize(0);
					      //current->argList->clear();
					      //curlyCount=0;
					      //BEGIN( SkipCurlyBlock );

                                              // C++11 style initializer list
  					      current->bodyLine = yyLineNr;
                                              current->initializer = scanYYtext;
					      lastInitializerContext = YY_START;
					      initBracketCount=1;
					      BEGIN(ReadInitializer);
					    }
					  }
  					}
	YY_BREAK
case 617:
YY_RULE_SETUP
#line 5712 "scanner.l"
{ curlyCount++; }
	YY_BREAK
case 618:
YY_RULE_SETUP
#line 5713 "scanner.l"
{ 
                                          if (curlyCount) 
                                          {
                                            curlyCount--; 
					  }
					  else
					  {
  					    mtype = Method;
                                            unput(';');
					    BEGIN(FindMembers);
					  }
                                        }
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 5725 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Settable;  }
	YY_BREAK
case 620:
YY_RULE_SETUP
#line 5726 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Gettable;  }
	YY_BREAK
case 621:
YY_RULE_SETUP
#line 5727 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Addable;   }
	YY_BREAK
case 622:
YY_RULE_SETUP
#line 5728 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Removable; }
	YY_BREAK
case 623:
YY_RULE_SETUP
#line 5729 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Raisable;  }
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 5730 "scanner.l"
{}
	YY_BREAK
case 625:
/* rule 625 can match eol */
YY_RULE_SETUP
#line 5731 "scanner.l"
{ lineCount(); }
	YY_BREAK
/**********************************************************************************/
/******************** Documentation block related rules ***************************/
/**********************************************************************************/
/* ---- Single line comments ------ */
case 626:
/* rule 626 can match eol */
YY_RULE_SETUP
#line 5741 "scanner.l"
{ // continuation of multiline C++-style comment
				           docBlock+=scanYYtext;
          		                   docBlock.resize(docBlock.length() - 3);
                                           lineCount();
                                        }
	YY_BREAK
case 627:
/* rule 627 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5746 "scanner.l"
{ // whole line
  					  docBlock+=scanYYtext;
					  handleCommentBlock(docBlock.data(),current->brief.isEmpty());
					  BEGIN( docBlockContext );
  					}
	YY_BREAK
/* ---- Comments blocks ------ */
case 628:
YY_RULE_SETUP
#line 5754 "scanner.l"
{ // end of comment block
  				          handleCommentBlock(docBlock.data(),FALSE);
					  BEGIN(docBlockContext);
  					}
	YY_BREAK
case 629:
/* rule 629 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5758 "scanner.l"
{ // start of a comment line
                                          QCString indent;
                                          indent.fill(' ',computeIndent(scanYYtext,g_column));
                                          docBlock+=indent;
  					}
	YY_BREAK
case 630:
YY_RULE_SETUP
#line 5763 "scanner.l"
{ // strip embedded C++ comments if at the start of a line
  					}
	YY_BREAK
case 631:
YY_RULE_SETUP
#line 5765 "scanner.l"
{ // slashes in the middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 632:
YY_RULE_SETUP
#line 5768 "scanner.l"
{ // start of a new comment in the 
                                          // middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 633:
/* rule 633 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5772 "scanner.l"
{ // escaped command
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 634:
YY_RULE_SETUP
#line 5775 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  BEGIN(DocCopyBlock);
                                        }
	YY_BREAK
case 635:
YY_RULE_SETUP
#line 5784 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName="<pre>";
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 636:
/* rule 636 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5789 "scanner.l"
{ // verbatim command (which could contain nested comments!)
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 637:
YY_RULE_SETUP
#line 5794 "scanner.l"
{
  					  if (insideCS)
					  {
					    docBlock+=scanYYtext;
					    docBlockName="<code>";
					    BEGIN(DocCopyBlock);
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 638:
YY_RULE_SETUP
#line 5806 "scanner.l"
{ // any character that isn't special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 639:
/* rule 639 can match eol */
YY_RULE_SETUP
#line 5809 "scanner.l"
{ // newline
                                          lineCount();
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case 640:
YY_RULE_SETUP
#line 5813 "scanner.l"
{ // command block
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
/* ---- Copy verbatim sections ------ */
case 641:
YY_RULE_SETUP
#line 5819 "scanner.l"
{ // end of a <pre> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<pre>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 642:
YY_RULE_SETUP
#line 5826 "scanner.l"
{ // end of a <code> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<code>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 643:
YY_RULE_SETUP
#line 5833 "scanner.l"
{
  					  docBlock+=scanYYtext;
					  BEGIN(DocBlock);
  					}
	YY_BREAK
case 644:
/* rule 644 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5837 "scanner.l"
{ // end of verbatim block
  					  docBlock+=scanYYtext;
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 645:
/* rule 645 can match eol */
YY_RULE_SETUP
#line 5844 "scanner.l"
{ // start of a comment line
  					  if (docBlockName=="verbatim")
					  {
					    REJECT;
					  }
                                          else
                                          {
                                            QCString indent;
                                            indent.fill(' ',computeIndent(scanYYtext,0));
                                            docBlock+=indent;
                                          }
  					}
	YY_BREAK
case 646:
YY_RULE_SETUP
#line 5856 "scanner.l"
{ // any character that is not special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 647:
YY_RULE_SETUP
#line 5859 "scanner.l"
{
  					  docBlock+=scanYYtext;
					}
	YY_BREAK
case 648:
/* rule 648 can match eol */
YY_RULE_SETUP
#line 5862 "scanner.l"
{ // newline
  					  docBlock+=*scanYYtext;
                                          lineCount();
  					}
	YY_BREAK
case 649:
YY_RULE_SETUP
#line 5866 "scanner.l"
{ // any other character
  					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case YY_STATE_EOF(DocCopyBlock):
#line 5869 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: reached end of file while inside a %s block!\n"
					      "The command that should end the block seems to be missing!\n",
					      docBlockName.data());
  					  yyterminate();
  					}
	YY_BREAK
/* ------------- Prototype parser -------------- */
case 650:
YY_RULE_SETUP
#line 5880 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 651:
YY_RULE_SETUP
#line 5883 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 652:
YY_RULE_SETUP
#line 5890 "scanner.l"
{
  					  current->type+=current->name+scanYYtext;
					  current->name.resize(0);
  					  BEGIN( PrototypePtr );
  					}
	YY_BREAK
case 653:
/* rule 653 can match eol */
YY_RULE_SETUP
#line 5895 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 654:
YY_RULE_SETUP
#line 5898 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 655:
YY_RULE_SETUP
#line 5905 "scanner.l"
{
  					  current->type+=')';
  					  BEGIN( Prototype );
  					}
	YY_BREAK
case 656:
YY_RULE_SETUP
#line 5909 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 657:
YY_RULE_SETUP
#line 5912 "scanner.l"
{
  					  BEGIN( PrototypeSkipLine);
  					}
	YY_BREAK
case 658:
YY_RULE_SETUP
#line 5915 "scanner.l"
{ 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 659:
YY_RULE_SETUP
#line 5919 "scanner.l"
{ 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 660:
YY_RULE_SETUP
#line 5923 "scanner.l"
{ 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 661:
YY_RULE_SETUP
#line 5928 "scanner.l"
{
  					  current->exception = "throw(";
					  BEGIN(PrototypeExc);
  					}
	YY_BREAK
case 662:
YY_RULE_SETUP
#line 5932 "scanner.l"
{
  					  current->exception += ')';
					  BEGIN(PrototypeQual);
  					}
	YY_BREAK
case 663:
YY_RULE_SETUP
#line 5936 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 664:
YY_RULE_SETUP
#line 5939 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 665:
YY_RULE_SETUP
#line 5942 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 666:
YY_RULE_SETUP
#line 5945 "scanner.l"
{
  					}
	YY_BREAK
/* ------------ Generic rules -------------- */
case 667:
/* rule 667 can match eol */
YY_RULE_SETUP
#line 5952 "scanner.l"
{  // line continuation
  					  if (insideCS) 
					  {
					    REJECT;
					  }
					  else 
					  {
                                            lineCount();
					  }
  					}
	YY_BREAK
case 668:
/* rule 668 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5962 "scanner.l"
{ 
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 669:
YY_RULE_SETUP
#line 5965 "scanner.l"

	YY_BREAK
case 670:
/* rule 670 can match eol */
YY_RULE_SETUP
#line 5966 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 671:
YY_RULE_SETUP
#line 5967 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					}
	YY_BREAK
case 672:
YY_RULE_SETUP
#line 5973 "scanner.l"
{	
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 673:
YY_RULE_SETUP
#line 5979 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 674:
YY_RULE_SETUP
#line 5986 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 675:
YY_RULE_SETUP
#line 5993 "scanner.l"

	YY_BREAK
case 676:
YY_RULE_SETUP
#line 5994 "scanner.l"

	YY_BREAK
case 677:
YY_RULE_SETUP
#line 5995 "scanner.l"
{ lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 678:
YY_RULE_SETUP
#line 5998 "scanner.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 679:
YY_RULE_SETUP
#line 5999 "scanner.l"
{	
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 680:
YY_RULE_SETUP
#line 6003 "scanner.l"
ECHO;
	YY_BREAK
#line 19199 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(CompoundName):
			case YY_STATE_EOF(ClassVar):
			case YY_STATE_EOF(CSConstraintName):
			case YY_STATE_EOF(CSConstraintType):
			case YY_STATE_EOF(CSIndexer):
			case YY_STATE_EOF(ClassCategory):
			case YY_STATE_EOF(ClassTemplSpec):
			case YY_STATE_EOF(CliPropertyType):
			case YY_STATE_EOF(CliPropertyIndex):
			case YY_STATE_EOF(CliOverride):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(BasesProt):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(BitFields):
			case YY_STATE_EOF(EnumBaseType):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(FindMembersPHP):
			case YY_STATE_EOF(FindMemberName):
			case YY_STATE_EOF(FindFields):
			case YY_STATE_EOF(FindFieldArg):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(FuncRound):
			case YY_STATE_EOF(ExcpRound):
			case YY_STATE_EOF(ExcpList):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(TrailingReturn):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(ReadBody):
			case YY_STATE_EOF(ReadNSBody):
			case YY_STATE_EOF(ReadBodyIntf):
			case YY_STATE_EOF(Using):
			case YY_STATE_EOF(UsingAlias):
			case YY_STATE_EOF(UsingDirective):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipCurlyCpp):
			case YY_STATE_EOF(SkipCurlyEndDoc):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipPHPString):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(SkipCPPBlock):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(SkipCurlyBlock):
			case YY_STATE_EOF(SkipRoundBlock):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(SkipSharp):
			case YY_STATE_EOF(SkipRound):
			case YY_STATE_EOF(SkipSquare):
			case YY_STATE_EOF(SkipRemainder):
			case YY_STATE_EOF(StaticAssert):
			case YY_STATE_EOF(DeclType):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(TryFunctionBlock):
			case YY_STATE_EOF(TryFunctionBlockEnd):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PackageName):
			case YY_STATE_EOF(JavaImport):
			case YY_STATE_EOF(PHPUse):
			case YY_STATE_EOF(PHPUseAs):
			case YY_STATE_EOF(CSAccessorDecl):
			case YY_STATE_EOF(CSGeneric):
			case YY_STATE_EOF(PreLineCtrl):
			case YY_STATE_EOF(DefinePHP):
			case YY_STATE_EOF(DefinePHPEnd):
			case YY_STATE_EOF(OldStyleArgs):
			case YY_STATE_EOF(SkipVerbString):
			case YY_STATE_EOF(ObjCMethod):
			case YY_STATE_EOF(ObjCReturnType):
			case YY_STATE_EOF(ObjCParams):
			case YY_STATE_EOF(ObjCParamType):
			case YY_STATE_EOF(ObjCProtocolList):
			case YY_STATE_EOF(ObjCPropAttr):
			case YY_STATE_EOF(ObjCSkipStatement):
			case YY_STATE_EOF(QtPropType):
			case YY_STATE_EOF(QtPropName):
			case YY_STATE_EOF(QtPropAttr):
			case YY_STATE_EOF(QtPropRead):
			case YY_STATE_EOF(QtPropWrite):
			case YY_STATE_EOF(ReadInitializer):
			case YY_STATE_EOF(GetCallType):
			case YY_STATE_EOF(CppQuote):
			case YY_STATE_EOF(EndCppQuote):
			case YY_STATE_EOF(MemberSpec):
			case YY_STATE_EOF(MemberSpecSkip):
			case YY_STATE_EOF(EndTemplate):
			case YY_STATE_EOF(FuncPtr):
			case YY_STATE_EOF(FuncPtrOperator):
			case YY_STATE_EOF(EndFuncPtr):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadTempArgs):
			case YY_STATE_EOF(IDLUnionCase):
			case YY_STATE_EOF(NSAliasName):
			case YY_STATE_EOF(NSAliasArg):
			case YY_STATE_EOF(CopyString):
			case YY_STATE_EOF(CopyPHPString):
			case YY_STATE_EOF(CopyGString):
			case YY_STATE_EOF(CopyPHPGString):
			case YY_STATE_EOF(CopyRound):
			case YY_STATE_EOF(CopyCurly):
			case YY_STATE_EOF(GCopyRound):
			case YY_STATE_EOF(GCopyCurly):
			case YY_STATE_EOF(SkipUnionSwitch):
			case YY_STATE_EOF(Specialization):
			case YY_STATE_EOF(FuncPtrInit):
			case YY_STATE_EOF(FuncFunc):
			case YY_STATE_EOF(FuncFuncEnd):
			case YY_STATE_EOF(FuncFuncType):
			case YY_STATE_EOF(FuncFuncArray):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyArgPHPString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgComment):
			case YY_STATE_EOF(CopyArgCommentLine):
			case YY_STATE_EOF(CopyArgVerbatim):
			case YY_STATE_EOF(HereDoc):
			case YY_STATE_EOF(HereDocEnd):
			case YY_STATE_EOF(CopyHereDoc):
			case YY_STATE_EOF(CopyHereDocEnd):
			case YY_STATE_EOF(RawString):
			case YY_STATE_EOF(RawGString):
			case YY_STATE_EOF(IDLAttribute):
			case YY_STATE_EOF(IDLProp):
			case YY_STATE_EOF(IDLPropName):
			case YY_STATE_EOF(Prototype):
			case YY_STATE_EOF(PrototypePtr):
			case YY_STATE_EOF(PrototypeQual):
			case YY_STATE_EOF(PrototypeExc):
			case YY_STATE_EOF(PrototypeSkipLine):
			case YY_STATE_EOF(DocLine):
			case YY_STATE_EOF(DocBlock):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scanYYin at a new source and called
			 * scanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scanYYrestart(scanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) scanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 4192 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 4192 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 4191);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scanYYrestart(scanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
	}

	scanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	scanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scanYYpop_buffer_state();
	 *		scanYYpush_buffer_state(new_buffer);
     */
	scanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scanYYwrap()) processing, but the only time this flag
	 * is looked at is after scanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scanYY_create_buffer()
 * 
 */
    void scanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scanYYfree((void *) b->yy_ch_buf  );

	scanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scanYYrestart() or at EOF.
 */
    static void scanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scanYY_init_buffer was _probably_
     * called from scanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scanYYensure_buffer_stack();

	/* This block is copied from scanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scanYY_switch_to_buffer. */
	scanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE scanYY_scan_string (yyconst char * yystr )
{
    
	return scanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scanYYtext[scanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = scanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scanYYget_lineno  (void)
{
        
    return scanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *scanYYget_in  (void)
{
        return scanYYin;
}

/** Get the output stream.
 * 
 */
FILE *scanYYget_out  (void)
{
        return scanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t scanYYget_leng  (void)
{
        return scanYYleng;
}

/** Get the current token.
 * 
 */

char *scanYYget_text  (void)
{
        return scanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scanYYset_lineno (int  line_number )
{
    
    scanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scanYY_switch_to_buffer
 */
void scanYYset_in (FILE *  in_str )
{
        scanYYin = in_str ;
}

void scanYYset_out (FILE *  out_str )
{
        scanYYout = out_str ;
}

int scanYYget_debug  (void)
{
        return scanYY_flex_debug;
}

void scanYYset_debug (int  bdebug )
{
        scanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scanYYin = stdin;
    scanYYout = stdout;
#else
    scanYYin = (FILE *) 0;
    scanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scanYYlex_init()
     */
    return 0;
}

/* scanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int scanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    scanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see scanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 6003 "scanner.l"



//----------------------------------------------------------------------------

static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}
  
//----------------------------------------------------------------------------

static void newEntry()
{
  current_root->addSubEntry(current);
  previous = current;
  current = new Entry ;
  initEntry();
}

static void handleCommentBlock(const QCString &doc,bool brief)
{
  static bool hideInBodyDocs = Config_getBool("HIDE_IN_BODY_DOCS");
  int position=0;
  bool needsEntry=FALSE;
  if (docBlockInBody && hideInBodyDocs) return;
  //printf("parseCommentBlock [%s] brief=%d\n",doc.data(),brief);
  int lineNr = brief ? current->briefLine : current->docLine;   // line of block start
  
  // fill in inbodyFile && inbodyLine the first time, see bug 633891
  Entry *docEntry = docBlockInBody && previous ? previous : current;
  if (docBlockInBody && docEntry && docEntry->inbodyLine==-1)
  {
    docEntry->inbodyFile = yyFileName;
    docEntry->inbodyLine = lineNr;
  }

  while (parseCommentBlock(
	g_thisParser,
	docBlockInBody && previous ? previous : current,
	stripIndentation(doc),        // text
	yyFileName, // file
	lineNr,     // line of block start
	docBlockInBody ? FALSE : brief,               // isBrief
	docBlockInBody ? FALSE : docBlockAutoBrief,   // isJavaDocStyle
	docBlockInBody,                               // isInBody
	protection,
        position,
        needsEntry
        )
     ) 
  {
    //printf("parseCommentBlock position=%d [%s]\n",position,doc.data()+position);
    if (needsEntry) 
    {
      QCString docFile = current->docFile;
      newEntry();
      current->docFile = docFile;
      current->docLine = lineNr;
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

  if (docBlockTerm)
  {
    unput(docBlockTerm);
    docBlockTerm=0;
  }
}

static void handleParametersCommentBlocks(ArgumentList *al)
{
  //printf(">>>>>>> handleParametersCommentBlocks()\n");
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    //printf("    Param %s docs=%s\n",a->name.data(),a->docs.data());
    if (!a->docs.isEmpty())
    {
      int position=0;
      bool needsEntry;

      // save context
      QCString orgDoc   = current->doc;
      QCString orgBrief = current->brief;
      int orgDocLine    = current->docLine;
      int orgBriefLine  = current->briefLine;

      current->doc.resize(0);
      current->brief.resize(0);

      //printf("handleParametersCommentBlock [%s]\n",doc.data());
      while (parseCommentBlock(
	     g_thisParser,
	     current,
	     a->docs,            // text
	     yyFileName,         // file
	     current->docLine,   // line of block start
	     FALSE, 
	     FALSE,
	     FALSE,
	     protection,
	     position,
	     needsEntry
	    )
	  ) 
      {
	//printf("handleParametersCommentBlock position=%d [%s]\n",position,doc.data()+position);
	if (needsEntry) newEntry();
      }
      if (needsEntry)
      {
	newEntry();
      }
      a->docs = current->doc;

      // restore context
      current->doc       = orgDoc;
      current->brief     = orgBrief;
      current->docLine   = orgDocLine;
      current->briefLine = orgBriefLine;
    }
  }
}


//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  g_inputFromFile = FALSE;
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      padCount=0;
      //depthIf = 0;
      g_column=0;
      inputString = ce->program;
      inputPosition = 0;
      scanYYrestart( scanYYin ) ;
      if (ce->section==Entry::ENUM_SEC || (ce->spec&Entry::Enum))
	BEGIN( FindFields ) ;
      else
	BEGIN( FindMembers ) ;
      current_root = ce ;
      yyFileName = ce->fileName;
      //setContext();
      yyLineNr = ce->startLine ;
      insideObjC = ce->lang==SrcLangExt_ObjC;
      //printf("---> Inner block starts at line %d objC=%d\n",yyLineNr,insideObjC);
      //current->reset();
      if (current) delete current;
      current = new Entry;
      initEntry();
      gstat = FALSE;
      int ni=ce->name.findRev("::"); if (ni==-1) ni=0; else ni+=2;
      // set default protection based on the compound type
      if( ce->section==Entry::CLASS_SEC ) // class
      {

        if (insidePHP || insideD || insideJS)
	{
          current->protection = protection = Public ; 
	}
	else if (insideJava)
	{
          current->protection = protection = (ce->spec & (Entry::Interface|Entry::Enum)) ?  Public : Package;
	}
	else if (ce->spec&(Entry::Interface | Entry::Ref | Entry::Value | Entry::Struct | Entry::Union))
	{
	  if (ce->lang==SrcLangExt_ObjC)
	  {
	    current->protection = protection = Protected ;
	  }
	  else
	  {
	    current->protection = protection = Public ;
	  }
	}
	else 
	{
          current->protection = protection = Private ;
	}
      }
      else if (ce->section == Entry::ENUM_SEC ) // enum
      {
	current->protection = protection = ce->protection;
      }
      else if (!ce->name.isEmpty() && ce->name.at(ni)=='@') // unnamed union or namespace
      {
	if (ce->section == Entry::NAMESPACE_SEC ) // unnamed namespace
	{
          current->stat = gstat = TRUE;
	}
	current->protection = protection = ce->protection;
      }
      else // named struct, union, protocol, category
      {
	current->protection = protection = Public ;
      }
      mtype = Method;
      virt = Normal;
      //printf("name=%s current->stat=%d gstat=%d\n",ce->name.data(),current->stat,gstat);

      //memberGroupId = DOX_NOGROUP;
      //memberGroupRelates.resize(0);
      //memberGroupInside.resize(0);
      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      scanYYlex() ;
      g_lexInit=TRUE;
      //forceEndGroup();

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);
      
      delete current; current=0;
      ce->program.resize(0);


      //if (depthIf>0)
      //{
      //	warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
      //}
    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------

static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();
  //g_inputFromFile = TRUE;

  inputString = fileBuf;
  inputPosition = 0;
  g_inputFromFile = FALSE;
  g_column = 0;

  //anonCount     = 0;  // don't reset per file
  //depthIf       = 0;
  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  global_root   = rt;
  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    setContext();
    rt->lang = language;
    msg("Parsing file %s...\n",yyFileName.data());

    current_root  = rt ;
    initParser();
    groupEnterFile(yyFileName,yyLineNr);
    current       = new Entry;
    //printf("current=%p current_root=%p\n",current,current_root);
    int sec=guessSection(yyFileName);
    if (sec)
    {
      current->name    = yyFileName;
      current->section = sec;
      current_root->addSubEntry(current);
      current          = new Entry;
    }
    current->reset();
    initEntry();
    scanYYrestart( scanYYin );
    if ( insidePHP )
    {
      BEGIN( FindMembersPHP );
    }
    else
    {
      BEGIN( FindMembers );
    }

    scanYYlex();
    g_lexInit=TRUE;

    if (YY_START==Comment)
    {
      warn(yyFileName,yyLineNr,"warning: File ended in the middle of a comment block! Perhaps a missing \\endcode?");
    }

    //forceEndGroup();
    groupLeaveFile(yyFileName,yyLineNr);

    //if (depthIf>0)
    //{
    //  warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
    //}

    rt->program.resize(0);
    if (rt->children()->contains(current)==0) 
      // it could be that current is already added as a child to rt, so we
      // only delete it if this is not the case. See bug 635317.
    {
      delete current; current=0;
    }

    parseCompounds(rt);

    inputFile.close();

    anonNSCount++;
  }
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  bool orgInputFromFile;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(scanYY_create_buffer(scanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;
  orgInputFromFile = g_inputFromFile;

  // set new string
  inputString = text;
  inputPosition = 0;
  g_column = 0;
  g_inputFromFile = FALSE;
  scanYYrestart( scanYYin );
  BEGIN(Prototype);
  scanYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state
  YY_BUFFER_STATE tmpState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(orgState);
  scanYY_delete_buffer(tmpState);
  inputString = orgInputString; 
  inputPosition = orgInputPosition;
  g_inputFromFile = orgInputFromFile;

  //printf("**** parsePrototype end\n");
}

void scanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION)
  if (g_lexInit)
  {
    scanYYlex_destroy();
  }
#endif
}

//static void handleGroupStartCommand(const char *header)
//{
//  memberGroupHeader=header;
//  startGroupInDoc();
//}
//
//static void handleGroupEndCommand()
//{
//  endGroup();
//  previous=0;
//}

//----------------------------------------------------------------------------

void CLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);
}

void CLanguageScanner::parseCode(CodeOutputInterface & codeOutIntf,
                   const char * scopeName,
                   const QCString & input,
                   bool isExampleBlock,
                   const char * exampleName,
                   FileDef * fileDef,
                   int startLine,
                   int endLine,
                   bool inlineFragment,
		   MemberDef *memberDef,
		   bool showLineNumbers,
                   Definition *searchCtx
                  )
{
  ::parseCCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
               fileDef,startLine,endLine,inlineFragment,memberDef,
	       showLineNumbers,searchCtx);
}

bool CLanguageScanner::needsPreprocessing(const QCString &extension)
{
  QCString fe=extension.lower();
  return 
   !( fe==".java" || fe==".as"  || fe==".d"    || fe==".php" || 
      fe==".php4" || fe==".inc" || fe==".phtml" 
    );
}

void CLanguageScanner::resetCodeParserState()
{
  ::resetCCodeParserState();
}

void CLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void scannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


